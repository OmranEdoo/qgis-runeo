# -*- coding: utf-8 -*-

"""
/***************************************************************************
 CreateurBranchement
                                 A QGIS plugin
 Ce plugin créé des branchements sur une réseau AEP
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-06-10
        copyright            : (C) 2022 by Runeo
        email                : omranedoo@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modifNumeroy  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Runeo'
__date__ = '2022-06-10'
__copyright__ = '(C) 2022 by Runeo'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import difflib
from math import inf
from asyncio.windows_events import NULL
from distutils import ccompiler
from email import feedparser
from email.charset import add_alias
import os
from math import sqrt
from datetime import datetime
import math
import csv
from socket import NI_NUMERICHOST
from stat import FILE_ATTRIBUTE_NO_SCRUB_DATA
from typing import Optional
from xml.dom.minidom import TypeInfo
#import GeoCoding
from qgis.utils import *
from qgis.PyQt.QtCore import QCoreApplication, QVariant
from qgis.core import (QgsProcessing,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterField,
                       QgsFields,
                       QgsField,
                       QgsWkbTypes,
                       QgsVectorLayer,
                       QgsProject,
                       QgsProcessingContext,
                       QgsGeometry,
                       QgsPointXY,
                       QgsFeature,
                       QgsFeatureSink,
                       QgsSpatialIndex,
                       QgsFeatureRequest,
                       QgsCoordinateReferenceSystem,
                       QgsVectorFileWriter,
                       QgsPoint,
                       QgsLineString,
                       QgsLayerTreeLayer)
from processing.core.Processing import Processing
Processing.initialize()
from processing.tools import *
import processing


class CreateurBranchementAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    ADRESSE = 'ADRESSE'
    CODEPOSTAL = 'CODEPOSTAL'
    CHAMPADRESSE = 'CHAMPADRESSE'
    CHAMPNUM = 'CHAMPNUM'
    NUMVOIE = 'NUMVOIE'
    CHAMPNUMVOIE = 'CHAMPNUMVOIE'
    CHAMPIDNUMVOIE = 'CHAMPIDNUMVOIE'
    ROUTE = 'ROUTE'
    CHAMPRUE = 'CHAMPRUE'
    CANALISATION = 'CANALISATION'
    BRANCHEMENTENTREE = 'BRANCHEMENTENTREE'
    POINTDESSERTEENTREE = 'POINTDESSERTEENTREE'
    BRANCHEMENTSORTIE = 'BRANCHEMENTSORTIE'
    POINTDESSERTESORTIE = 'POINTDESSERTESORTIE'


    def actualiserProgress(self, feedback, avancementAlgo, points, message):
        """ Fonction actualisant la barre de progrès et affichant un message de feedback """
        avancementAlgo += points
        feedback.setProgress(avancementAlgo)
        if message:
            feedback.pushInfo(message)

        return avancementAlgo

    def trouverVoisinParcelle(self, point, plusProcheIdParcelle, parcelleData):
        """ Fonction trouvant le point d'une parcelle donnée le plus proche d'un autre point """
        fitParcelle2 = parcelleData.getFeatures(QgsFeatureRequest().setFilterFid(plusProcheIdParcelle))
        caracParcelle2 = QgsFeature()
        fitParcelle2.nextFeature(caracParcelle2)

        pointSurParcelle = caracParcelle2.geometry().closestSegmentWithContext(QgsPointXY(point.geometry().asPoint()))[1]

        return caracParcelle2, pointSurParcelle

    def trouverVoisinCanalisation(self, point, plusProcheIdCanalisation, sourceCanalisation):
        """ Fonction trouvant le point d'une canalisation donnée le plus proche d'un autre point """
        fitCanalisation2 = sourceCanalisation.getFeatures(QgsFeatureRequest().setFilterFid(plusProcheIdCanalisation))
        caracCanalisation2 = QgsFeature()
        fitCanalisation2.nextFeature(caracCanalisation2)

        pointSurCanalisation = caracCanalisation2.geometry().closestSegmentWithContext(QgsPointXY(point.geometry().asPoint()))[1]

        return caracCanalisation2, pointSurCanalisation

    def ajouterPointDesserte(self, pointDesserteFields, pointsDesserte, parametres, x, y):
        """ Fonction créant un point desserte """
        pointDesserte = QgsFeature(pointDesserteFields)
        pointDesserte.setAttributes(parametres) # lors de la création de la nouvelle couche, les noms des champs sont tronqués à la dixième lettre je ne sais pas pourquoi
        pointDesserte.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(x, y)))
        pointsDesserte.append(pointDesserte)
        idPointDesserte = parametres[0]+1

        return pointsDesserte, idPointDesserte

    def estGrand(self, geometrieBranchement, seuil):
        # Cas où le branchement est très grand
        if geometrieBranchement.length() > seuil:
            return True
        return False

    def croiseBranchement(self, branchementFields, branchement, branchements):

        coucheBranchement = self.creerCouche([branchement], "LineString", branchementFields)
                    
        branchementsCopie = []
                    
        # Création d'une copie de la couche branchement
        branchementsCopie = branchements
        coucheBranchements = self.creerCouche(branchementsCopie, "LineString", branchementFields)
                    
        # Sélection des branchements qui coupent le branchement qu'on souhaite créer
        params =  {"INPUT": coucheBranchements, "PREDICATE": [0], "INTERSECT": coucheBranchement, "METHOD": 0}
        processing.run("qgis:selectbylocation", params)
                    
        # Condition de non croisement des branchements
        if coucheBranchements.selectedFeatureCount() > 0:
            return True
        return False

    def croiseCanalisation(self, sourceCanalisation, coucheBranchement, branchementFields):
        feats = sourceCanalisation.getFeatures()
        canalisations = self.creerCouche(feats, "LineString", sourceCanalisation)
                
        params =  {"INPUT": canalisations, "PREDICATE": [0], "INTERSECT": coucheBranchement, "METHOD": 0}
        processing.run("qgis:selectbylocation", params)

        # Cas où le branchement intersect une canalisation
        if canalisations.selectedFeatureCount() > 1:
            return True
        return False

    def adresseEstSimilaire(self, string1, string2):
        return difflib.SequenceMatcher(a=string1.lower(), b=string2.lower()).ratio()


    def croiseParcelleHabite(self, coucheParcelles, batiment, parcelle, coucheBranchement, branchementFields):
        # Sélection des parcelles avec bâtiment
        params =  {"INPUT": coucheParcelles, "PREDICATE": [0], "INTERSECT": batiment, "METHOD": 0}
        processing.run("qgis:selectbylocation", params)
        coucheParcelleAvecBatiment = self.creerCouche(coucheParcelles.getSelectedFeatures(), "Polygon", coucheParcelles)
                
        # On enlève la parcelle sur laquelle se trouve le branchement
        coucheParcelle = self.creerCouche([parcelle], "Polygon", coucheParcelles)
        params =  {"INPUT": coucheParcelleAvecBatiment, "PREDICATE": [0], "INTERSECT": coucheParcelle, "METHOD": 3}
        processing.run("qgis:selectbylocation", params)

        # Sélection des autres parcelles intersectées par le branchement
        params =  {"INPUT": coucheParcelleAvecBatiment, "PREDICATE": [0], "INTERSECT": coucheBranchement, "METHOD": 2}
        processing.run("qgis:selectbylocation", params)
                
        # Cas où le branchement intersecte plus d'une parcelle avec bâtiment
        if coucheParcelleAvecBatiment.selectedFeatureCount() > 1:
            return True
        return False

    def estSuspect(self, branchement, branchementFields, sourceCanalisation, branchements, adresseJointureParcelle):

        score = 0
        
        score += branchement.geometry().length()/100

        if self.croiseBranchement(branchementFields, branchement, branchements):
            score += 0.2

        coucheBranchement = self.creerCouche([branchement], "LineString", branchementFields)
        if self.croiseCanalisation(sourceCanalisation, coucheBranchement, branchementFields):
            score += 0.2

        fitCanalisation = sourceCanalisation.getFeatures(QgsFeatureRequest().setFilterFid(branchement['canalId']))
        canalisation = QgsFeature()
        fitCanalisation.nextFeature(canalisation)

        adresseJointureParcelle.select(branchement['adresseId'])
        point = QgsFeature()
        adresseJointureParcelle.getSelectedFeatures().nextFeature(point)

        score += self.adresseEstSimilaire(canalisation['rue'], point['NOM VOIE'])

        return score
    
    def ajouterBranchement(self, branchementFields, branchements, idBranchement, idParcelle, idPointDesserte, idCanal, x1, y1, x2, y2, date, couche, sus):
        """ Fonction permettant de créer et d'ajouter un branchement à la liste des branchements """
        branchement = QgsFeature(branchementFields)
        geometrie = QgsGeometry.fromPolyline([QgsPoint(x1, y1), QgsPoint(x2, y2)])
        branchement.setGeometry(geometrie)
        champs = [idBranchement, idParcelle, idPointDesserte, idCanal, date, 'C', geometrie.length(), NULL]
        for field in couche.fields():
            if field.name() not in ['id', 'parcelleId', 'adresseId', 'canalId', 'date', 'prec_clas', 'suspect']:
                champs.append(couche[field.name()])                

        branchement.setAttributes(champs)
        branchements.append(branchement)
        idBranchement += 1

        return branchements, idBranchement

    def allongerBranchement(self, caracParcelle2, caracCanalisation2, x1, x2, y1, y2, normal):
        """ Fonction permettant d'allonger un branchement """
        if x2 != x1:
            a = (y2 - y1)/(x2 - x1)
        else:
            a = inf
        d = 3
        if normal:  
            x31, x32, b = CreateurBranchementAlgorithm.calculerCoords(x2, y2, a, d, 0)
        else: 
            x31, x32, b = CreateurBranchementAlgorithm.calculerCoords(x1, y1, a, d, 0)
        if CreateurBranchementAlgorithm.calculerDistanceEucl(x1, y1, x31, a*x31 + b) > CreateurBranchementAlgorithm.calculerDistanceEucl(x1, y1, x32, a*x32 + b):
            x3 = x31
        else:
            x3 = x32

        y3 = a*x3 + b
        
        # Les branchements ne sont pas de la longueur
        p1 = caracCanalisation2.geometry().closestSegmentWithContext(QgsPointXY(x3, y3))[1]
        x1, y1 = p1.x(), p1.y()
        p2 = caracParcelle2.geometry().closestSegmentWithContext(QgsPointXY(x1, y1))[1]
        x2, y2 = p2.x(), p2.y()
        if x2 != x1:
            a = (y2 - y1)/(x2 - x1)
        else:
            a = inf
        x31, x32, b = CreateurBranchementAlgorithm.calculerCoords(x2, y2, a, d, 0)
        if QgsGeometry.fromPointXY(QgsPointXY(x31, a*x31+b)).intersects(caracParcelle2.geometry()):
            x3 = x31
        else:
            x3 = x32

        y3 = a*x3 + b

        return x1, y1, x3, y3
    
    def testerIntersection(self, caracParcelle2, caracCanalisation2, x1, x2, y1, y2):
        """ Fonction vérifiant l'allongement d'un branchement et modifNumeroiant les paramètres d'allongement si besoin """
        x1, y1, x3, y3 = self.allongerBranchement(caracParcelle2, caracCanalisation2, x1, x2, y1, y2, True)
        geometrie = QgsGeometry.fromPointXY(QgsPointXY(x3, y3))
        if not geometrie.intersects(caracParcelle2.geometry()):
            x1, y1, x3, y3 = self.allongerBranchement(caracParcelle2, caracCanalisation2, x1, x2, y1, y2, False)
            geometrie = QgsGeometry.fromPointXY(QgsPointXY(x3, y3))
        if not geometrie.intersects(caracParcelle2.geometry()):
            p1 = caracCanalisation2.geometry().closestSegmentWithContext(QgsPointXY(x2, y2))[1]
            x1, y1 = p1.x(), p1.y()
            x3, y3 = x2, y2
            geometrie = QgsGeometry.fromPointXY(QgsPointXY(x3, y3))
        
        return geometrie, x1, y1, x3, y3

    def creerCouche(self, features, type, source, nom="duplicated_layer"):
        """ Fonction de création de couche """
        feats = [feat for feat in features]
        if isinstance(source, QgsVectorLayer):
            attributs = source.dataProvider().fields().toList()
        elif isinstance(source, QgsFields):
            attributs = source.toList()
        else:
            attributs = source.fields().toList()
            
        c = QgsVectorLayer(type+"?crs=epsg:2975", nom, "memory")

        bon = False
        while not bon:
            try: # Cela permet d'éviter les "RunTime Error" qui peuvent survenir à cause du garbage collecteur
                c.dataProvider().addAttributes(attributs)
                bon = True
                c.updateFields()
                c.dataProvider().addFeatures(feats)
            except:
                c = QgsVectorLayer(type+"?crs=epsg:2975", nom, "memory")
    
        return c

    def afficherCouche(self, couche, groupe, index):
        """ Méthode d'ajout d'une couche sur la map, utilisée pour les couches de la BD Parcellaire ainsi que la couche Route """
        QgsProject.instance().addMapLayer(couche, False)
        groupe.insertChildNode(index, QgsLayerTreeLayer(couche))
        #groupe.addLayer(couche)

    def retirerPointEtBranchement(self, point, branchement, parcId, champPoint1, champPoint2, champBranchement1, champBranchement2, nouveauxPointsDesserte, parcelleIdsNew, pointsRestants, branchements):
        """ Méthode permettant de retirer un point de desserte et son branchement et de remetrre le point en question dans la liste des points à traiter """
        if len(nouveauxPointsDesserte):
            for elt in nouveauxPointsDesserte:
                if elt[champPoint1] == point[champPoint2]:
                    nouveauxPointsDesserte.remove(elt)
                    parcelleIdsNew.remove(parcId)
                    pointsRestants.append(elt)

        if len(branchements):
            for elt in branchements:
                if elt[champBranchement1] == branchement[champBranchement2]:
                    branchements.remove(elt)

    def checkerNum(self, point, numNom):
        """ Fonction permettant d'obtenir le bon numéro de voie dans certains cas particuliers où celui noté dans le champ Num est le mauvais """
        if point['ADRESSE']:
            if point['ADRESSE'].split(' ')[0].isdigit():
                num = int(int(point['ADRESSE'].split(' ')[0])%2)
            else:
                num = int(point[numNom]%2)
        else:
            num = int(point[numNom]%2)
        
        return num

    def checkerParite(self, parite, parcId, point, numNom, modifNumero, jp, indexSpatialParcelle, parcelleData, caracCanalisation2, caracParcelle2, x1, y1, x2, y2, geometrie, nbPoints, numVoiePresent):
        """ Fonction vérifiant que la parité de l'adresse du point desserte est la même que la parité de la parcelle sur laquelle elle a été associée """
        if numVoiePresent:
            while parite is not None and parite != point[numNom]%2 and modifNumero:

                modifNumero = True
                jp += 1
                plusProcheIdParcelle = indexSpatialParcelle.nearestNeighbor(point.geometry(), jp+1)[jp]
                caracParcelle2, pointSurParcelle = self.trouverVoisinParcelle(point, plusProcheIdParcelle, parcelleData)
                parcId = caracParcelle2.id()
                parite = caracParcelle2['parite']

                # modifNumeroication des coordonnées afin de prolonger les branchement d'un facteur k
                geometrie, x1, y1, x2, y2 = self.testerIntersection(caracParcelle2, caracCanalisation2, x1, pointSurParcelle[0], y1, pointSurParcelle[1])
                
            return jp, geometrie, x1, y1, x2, y2, caracParcelle2, parcId
        else:
            numsVoie = parite.split(" ")
            for num in numsVoie:
                if num is not None and num == str(point[numNom]) and modifNumero: 
                    return jp, geometrie, x1, y1, x2, y2, caracParcelle2, parcId

            modifNumero = True
            jp += 1
            plusProcheIdParcelle = indexSpatialParcelle.nearestNeighbor(point.geometry(), jp+1)[jp]
            caracParcelle2, pointSurParcelle = self.trouverVoisinParcelle(point, plusProcheIdParcelle, parcelleData)
            parcId = caracParcelle2.id()
            parite = caracParcelle2['numNom']

            # modifNumeroication des coordonnées afin de prolonger les branchement d'un facteur k
            geometrie, x1, y1, x2, y2 = self.testerIntersection(caracParcelle2, caracCanalisation2, x1, pointSurParcelle[0], y1, pointSurParcelle[1])

            return self.checkerParite(parite, parcId, point, numNom, modifNumero, jp, indexSpatialParcelle, parcelleData, caracCanalisation2, caracParcelle2, x1, y1, x2, y2, geometrie, nbPoints, numVoiePresent)

    def changerDeParcelle(self, jp, indexSpatialParcelle, point, parcelleData, caracCanalisation2, x1, y1, nbPoints):
        """ Fonction permettant de changer de parcelle à analyser, on sélectionne une parcelle moins proche """
        modifNumero = True
        jp += 1

        plusProcheIdParcelle = indexSpatialParcelle.nearestNeighbor(point.geometry())[0]
        caracParcelle2, pointSurParcelle = self.trouverVoisinParcelle(point, plusProcheIdParcelle, parcelleData)
        parcId = caracParcelle2.id()

        geometrie, x1, y1, x2, y2 = self.testerIntersection(caracParcelle2, caracCanalisation2, x1, pointSurParcelle[0], y1, pointSurParcelle[1])

        return modifNumero, jp, parcId, caracParcelle2, geometrie, x1, y1, x2, y2

    def changerDeNumero(self, jp, indexSpatialNumVoie, coucheNumVoie, indexSpatialParcelle, point, parcelleData, caracCanalisation2, x1, y1, nbPoints):
        """ Fonction permettant de changer de parcelle à analyser, on sélectionne une parcelle moins proche """
        modifNumero = True
        jp += 1

        nearestIds = indexSpatialNumVoie.nearestNeighbor(point.geometry(), jp+1)[jp]
        fit = coucheNumVoie.getFeatures(QgsFeatureRequest().setFilterFid(nearestIds))
        numVoie = QgsFeature()
        fit.nextFeature(numVoie)

        plusProcheIdParcelle = indexSpatialParcelle.nearestNeighbor(numVoie.geometry(), jp+1)[jp]
        caracParcelle2, pointSurParcelle = self.trouverVoisinParcelle(point, plusProcheIdParcelle, parcelleData)
        parcId = caracParcelle2.id()

        # modifNumeroication des coordonnées afin de prolonger les branchement d'un facteur k
        geometrie, x1, y1, x2, y2 = self.testerIntersection(caracParcelle2, caracCanalisation2, x1, pointSurParcelle[0], y1, pointSurParcelle[1])

        return modifNumero, jp, parcId, caracParcelle2, geometrie, x1, y1, x2, y2

    @staticmethod
    def calculerDistanceEucl(x1, y1, x2, y2):
        return math.sqrt((x1-x2)**2+(y1-y2)**2)

    @staticmethod
    def calculerCoords(x, y, a, d, signe):
        """ Fonction déterminant les coordonnées d'un point à partir de l'équation d'une droite dont il appartient et de sa distance à un point donné """
        b = y - a*x
        aa = (a**2+1)
        bb = (2*a*b - 2*a*y-2*x)
        cc = (x**2+y**2+b**2-2*b*y-d**2)
        discriminant = bb**2-4*aa*cc
        if discriminant < 0: # on ne devrait pas arriver à ce cas
            discriminant = -discriminant
        if signe == 0:
            x21 = (-bb-sqrt(discriminant))/(2*aa)
            x22 = (-bb+sqrt(discriminant))/(2*aa)
            return x21, x22, b
        else:
            x2 = (-bb+signe*sqrt(discriminant))/(2*aa)
            return x2, b

    @staticmethod
    def trouverSigne(a, b, x1, x2, routeEntiere):
        """ Fonction trouvant la direction du point utilisé pour la création du polygone dans l'attribution de la parité de parcelles """
        if QgsGeometry.fromPointXY(QgsPointXY(x1, a*x1 + b)).intersects(routeEntiere.geometry()):
            x = x1
            signe = -1
        elif QgsGeometry.fromPointXY(QgsPointXY(x2, a*x2 + b)).intersects(routeEntiere.geometry()):
            x = x2
            signe = 1
        else:
            x = 0
            signe = 1
        return x, signe



    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # Couche des adresses de la table clientèle
        # Attention: la couche doit être entièrement georéférencée et être en EPSG:2975
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.ADRESSE,
                self.tr('Couche d\'entrée des adresses'),
                [QgsProcessing.TypeVectorPoint]
            )
        )

        # Nom de la colonne rescencant les code postaux dans la table clientèle
        self.addParameter(
            QgsProcessingParameterField(
                self.CODEPOSTAL,
                self.tr('Champ Code Postal'),
                parentLayerParameterName = self.ADRESSE,
                allowMultiple=False,
                optional=False,
            )
        )

        # Nom de la colonne donnant l'adresse complète
        self.addParameter(
            QgsProcessingParameterField(
                self.CHAMPADRESSE,
                self.tr('Champ adresse'),
                parentLayerParameterName = self.ADRESSE,
                allowMultiple=False,
                optional=False,
            )
        )

        # Nom de la colonne correspondant au numéro de rue
        self.addParameter(
            QgsProcessingParameterField(
                self.CHAMPNUM,
                self.tr('Champ de numéro de voie de la couche adresse'),
                parentLayerParameterName = self.ADRESSE,
                allowMultiple=False,
                optional=True,
            )
        )

        # Couche des numéros de voies
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.NUMVOIE,
                self.tr('Couche des numéros de voies'),
                [QgsProcessing.TypeVectorPoint],
                optional=True,
            )
        )
        
        # Nom de la colonne du champ indiquant le numéro de la voie
        self.addParameter(
            QgsProcessingParameterField(
                self.CHAMPNUMVOIE,
                self.tr('Champ du numéro de voie de la couche numéro de voie'),
                parentLayerParameterName = self.NUMVOIE,
                allowMultiple=False,
                optional=True,
            )
        )

        # Nom de la colonne du champ indiquant le numéro de la voie
        self.addParameter(
            QgsProcessingParameterField(
                self.CHAMPIDNUMVOIE,
                self.tr('Champ de l\'id des éléments numéro de voie'),
                parentLayerParameterName = self.NUMVOIE,
                allowMultiple=False,
                optional=True,
            )
        )

        # Nom de la colonne rescencant les canalisations du réseau sans les branchements
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.CANALISATION,
                self.tr('Couche d\'entrée des canalisations'),
                [QgsProcessing.TypeVectorLine]
            )
        )
        
        # Couche des points de desserte
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.POINTDESSERTEENTREE,
                self.tr('Couche d\'entrée des points de desserte'),
                [QgsProcessing.TypeVectorPoint],
                optional=True
            )
        )

        # Couche des branchements
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.BRANCHEMENTENTREE,
                self.tr('Couche d\'entrée des branchements'),
                [QgsProcessing.TypeVectorLine],
                optional=True
            )
        )

        # Couche des points de desserte
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.POINTDESSERTESORTIE,
                self.tr('Couche des points de dessertes')
            )
        )
        
        # Couche des branchements possibles 
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.BRANCHEMENTSORTIE,
                self.tr('Couche de sortie de branchements')
            )
        )


    def processAlgorithm(self, parameters, context, feedback):
        """"
        Here is where the processing itself takes place.
        """
        avancementAlgo = 0
        k = 1.5
        self.actualiserProgress(feedback, avancementAlgo, 1, "Début de l'algorithme...")

        # Accès aux paramêtres d'entrée
        sourceAdresse = self.parameterAsSource(parameters, self.ADRESSE, context)
        sourcePointDesserte = self.parameterAsSource(parameters, self.POINTDESSERTEENTREE, context)
        sourceBranchement = self.parameterAsSource(parameters, self.BRANCHEMENTENTREE, context)
        codePostalNom = self.parameterAsFields(parameters, self.CODEPOSTAL, context)[0]
        adresseNom = self.parameterAsFields(parameters, self.CHAMPADRESSE, context)[0]
        numNom = self.parameterAsFields(parameters, self.CHAMPNUM, context)[0]
        sourceNumVoie = self.parameterAsSource(parameters, self.NUMVOIE, context)
        numVoieNom = self.parameterAsFields(parameters, self.CHAMPNUMVOIE, context)[0]
        numVoieId = self.parameterAsFields(parameters, self.CHAMPIDNUMVOIE, context)[0]
        sourceCanalisation = self.parameterAsSource(parameters, self.CANALISATION, context)

        numVoiePresent = False
        # Check si la couche numéro de voie a été entré par l'utilisateur
        if sourceNumVoie.featureCount():
            numVoiePresent = True

        #Création des champs des couches de sortie
        pointDesserteFields = QgsFields()
        pointDesserteFields.append(QgsField('id', QVariant.Int, '', 254, 0))
        pointDesserteFields.append(QgsField('parcelleId', QVariant.Int, '', 254, 0))
        pointDesserteFields.append(QgsField('adresseId', QVariant.Int, '', 254, 0))
        pointDesserteFields.append(QgsField('canalId', QVariant.Int, '', 254, 0))
        pointDesserteFields.append(QgsField('date', QVariant.String, '', 254, 0))
        pointDesserteFields.append(QgsField('prec_clas', QVariant.Char, '', 254, 0))
        pointDesserteFields.append(QgsField('suspect', QVariant.Double, '', 254, 0))
        for field in sourceAdresse.fields():
            pointDesserteFields.append(QgsField(field.name(), QVariant.String, '', 254, 0))

        branchementFields = QgsFields()
        branchementFields.append(QgsField('id', QVariant.Int, '', 254, 0))
        branchementFields.append(QgsField('parcelleId', QVariant.Int, '', 254, 0))
        branchementFields.append(QgsField('adresseId', QVariant.Int, '', 254, 0))
        branchementFields.append(QgsField('canalId', QVariant.Int, '', 254, 0))
        branchementFields.append(QgsField('date', QVariant.String, '', 254, 0))
        branchementFields.append(QgsField('prec_clas', QVariant.Char, '', 254, 0))
        branchementFields.append(QgsField('longueur', QVariant.Double, '', 254, 0))
        branchementFields.append(QgsField('suspect', QVariant.Double, '', 254, 0))
        for field in sourceAdresse.fields():
            branchementFields.append(QgsField(field.name(), QVariant.String, '', 254, 0))

        if sourcePointDesserte and sourceBranchement:
            idPointDesserte = sourcePointDesserte.featureCount()
            idBranchement = sourceBranchement.featureCount()
        else:
            idPointDesserte = 0
            idBranchement = 0

        (sinkPointDesserte, destIdPointDesserte) = self.parameterAsSink(parameters, self.POINTDESSERTESORTIE,
                context, pointDesserteFields, QgsWkbTypes.Point, sourceAdresse.sourceCrs())
        (sinkBranchement, destIdBranchement) = self.parameterAsSink(parameters, self.BRANCHEMENTSORTIE,
                context, branchementFields, QgsWkbTypes.LineString, sourceAdresse.sourceCrs())

        date = str(datetime.now())

        # Filtrage de la BD PARCELLAIRE en fonction des communes de la zone étudiée
        root = QgsProject.instance().layerTreeRoot()
        groupe = root.addGroup("BD PARCELLAIRE")

        # Création de la liste des codes postaux des communes présentes dans le fichier clientèle
        codesPostaux = [] 
        for adr in sourceAdresse.getFeatures():
            if str(adr[codePostalNom]) not in codesPostaux:
                codesPostaux.append(str(adr[codePostalNom]))

        codesInsee = []

        # Conversion des codes postaux en codes INSEE car certains fichiers de la BD PARCELLAIRE ne contiennent que le champ code INSEE
        with open('D:\omran\Runeo\data\correspondance-code-insee-code-postal-reunion.csv', mode ='r') as file:   
            # reading the CSV file
            csvFile = csv.DictReader(file)
             
            for code in codesPostaux:
                for lines in csvFile:
                    if str(lines["Code Postal"]) == code and str(lines["Code INSEE"]) not in codesInsee:
                        codesInsee.append(str(lines["Code INSEE"]))
        
        avancementAlgo = self.actualiserProgress(feedback, avancementAlgo, 1, "Création des couches de la BD PARCELLAIRE...")

        # Si le fichier client n'a pas de champ de numéro de voie alors on le créer
        if not numNom:
            sourceAdresse.dataProvider().addAttributes([QgsField(numNom, QVariant.Int)])
            sourceAdresse.updateFields()
            sourceAdresse.startEditing()
            for adr in sourceAdresse.getFeatures():
                adresseComplete = adr[adresseNom]
                numero = [int(mot)for mot in adresseComplete.split() if mot.isdigit()][0]
                sourceAdresse[numNom] = numero
        
        # Création de copie des couches de la BD PARCELLAIRE
        file = 'D:\\omran\\IGN\\BDPARCELLAIRE_1-2_VECTEUR_SHP_RGR92UTM40S_D974_2018-09-06\\BDPARCELLAIRE\\1_DONNEES_LIVRAISON_2018-09-00112\\BDPV_1-2_SHP_RGR92UTM40S_D974\\'
        listeCoucheParcel = ['COMMUNE', 'BATIMENT', 'PARCELLE']#, 'DIVCAD', 'LOCALISANT'] # Nom des couches que l'on souhaite afficher
                
        for nomCouche in listeCoucheParcel:
            couche = QgsVectorLayer(file+nomCouche+".SHP", nomCouche, 'ogr')
            #self.afficherCouche(context, couche, 'Couche', groupe)
        
            if nomCouche == "COMMUNE":

                avancementAlgo = self.actualiserProgress(feedback, avancementAlgo, 1, "Création de 'COMMUNE'...")

                commune = self.creerCouche(couche.getFeatures(), "Polygon", couche, "COMMUNE")

                #context.temporaryLayerStore().removeMapLayers([couche])
                self.afficherCouche(commune, groupe, 2)

                # Suppression des communes inutiles
                ids = []
                for caracteristique in commune.getFeatures():
                    if caracteristique['CODE_INSEE'] not in codesInsee:
                        ids.append(caracteristique.id())

                commune.dataProvider().deleteFeatures(ids)
                commune.triggerRepaint()
            
            elif nomCouche == 'PARCELLE':

                avancementAlgo = self.actualiserProgress(feedback, avancementAlgo, 1, "Création de 'PARCELLE'...")

                coucheParcelles = self.creerCouche(couche.getFeatures(), "Polygon", couche, "PARCELLE")
                parcelleData = coucheParcelles.dataProvider()
                if numVoiePresent:
                    parcelleData.addAttributes([QgsField('numVoie', QVariant.String, '', 254, 0), QgsField('id', QVariant.Int, '', 254, 0)])
                else:
                    parcelleData.addAttributes([QgsField('parite', QVariant.Int, '', 254, 0), QgsField('id', QVariant.Int, '', 254, 0)])
                coucheParcelles.updateFields()

                #context.temporaryLayerStore().removeMapLayers([couche])
                self.afficherCouche(coucheParcelles, groupe, 1)
                
                # Suppression des parcelles qui ne sont pas dans les communes de la zone
                ids = []
                for caracteristique in coucheParcelles.getFeatures():
                    if '97'+caracteristique['CODE_COM'] not in codesInsee:
                        ids.append(caracteristique.id())

                coucheParcelles.dataProvider().deleteFeatures(ids)
                coucheParcelles.triggerRepaint()

            elif nomCouche == 'BATIMENT':

                avancementAlgo = self.actualiserProgress(feedback, avancementAlgo, 1, "Création de 'BATIMENT'...")

                batiment = self.creerCouche(couche.getFeatures(), "Polygon", couche, "BÂTIMENT")

                #context.temporaryLayerStore().removeMapLayers([couche])
                self.afficherCouche(batiment, groupe, 0)

        avancementAlgo = self.actualiserProgress(feedback, avancementAlgo, 1, "Suppression des bâtiments hors-zones...")

        batimentIds = []
        # Suppression des batiments qui ne sont pas dans les communes de la zone étudiée
        
        params =  {"INPUT": batiment, "PREDICATE": [0], "INTERSECT": commune, "METHOD": 0}
        processing.run("qgis:selectbylocation", params)

        batiment.invertSelection()
        l = batiment.selectedFeatureCount()
        m = 10/l

        for f in batiment.getSelectedFeatures():
            batimentIds.append(f.id())
            avancementAlgo = self.actualiserProgress(feedback, avancementAlgo, 0, "")

        batiment.dataProvider().deleteFeatures(batimentIds)
        batiment.triggerRepaint()

        parcelleId = 0

        coucheParcelles.startEditing()

        # création d'un champ id sur la couche parcelle
        for p in coucheParcelles.getFeatures():
            parcelleId += 1
            coucheParcelles.changeAttributeValue(p.id(), 9, parcelleId)

        coucheParcelles.commitChanges()
        
        # Création de la couche ROUTE
        params = {"INPUT": coucheParcelles, "OVERLAY": commune, "OUTPUT": "TEMPORARY_OUTPUT"}
        coucheRoute = processing.run("qgis:symmetricaldifference", params)

        route = [elt for elt in coucheRoute.values()][0]
        route.setName("ROUTE")

        aSupprimer = []

        for f in route.getFeatures():
            if not f['CODE_INSEE']:
                aSupprimer.append(f.id())
        
        route.dataProvider().deleteFeatures(aSupprimer)

        self.afficherCouche(route, groupe, 2)

        pointsDesserte = []
        branchements = []

        if sourcePointDesserte and sourceBranchement:
            pointsDesserte = [f for f in sourcePointDesserte.getFeatures()]
            branchements = [f for f in sourceBranchement.getFeatures()]

        pointsRestants = []

        feats = sourceAdresse.getFeatures()
        adresse = self.creerCouche(feats, "Point", sourceAdresse)

        # Sélection des points sur la commmune concernée
        params =  {"INPUT": adresse, "PREDICATE": [0], "INTERSECT": commune, "METHOD": 0}
        processing.run("qgis:selectbylocation", params)
        
        # Désélection des adresses dont le numéro de voie est 0
        params = {"INPUT": adresse, "FIELD": numNom, "VALUE": '0', "METHOD": 2}
        processing.run("qgis:selectbyattribute", params)

        feats = adresse.getSelectedFeatures()
        adresseBon = self.creerCouche(feats, "Point", sourceAdresse)

        # Sélection des adresses dont le numéro de voie est 0
        params = {"INPUT": adresse, "FIELD": numNom, "VALUE": '0', "METHOD": 0}
        processing.run("qgis:selectbyattribute", params)

        feats = adresse.getSelectedFeatures()
        adressePasBon = self.creerCouche(feats, "Point", sourceAdresse)

        sansGeometriePointsDesserte = []

        for adresse in adressePasBon.getFeatures():
            pointDesserte = QgsFeature(pointDesserteFields)
            champs = [idPointDesserte, NULL, adresse['fid'], NULL, date, 'C', NULL]
            for field in adresse.fields():
                if field.name() not in ['id', 'parcelleId', 'adresseId', 'canalId', 'date', 'prec_clas', 'suspect']:
                    champs.append(adresse[field.name()])

            geomNulle = QgsGeometry().fromWkt('')
                            
            pointDesserte.setAttributes(champs)
            pointDesserte.setGeometry(geomNulle)
            sansGeometriePointsDesserte.append(pointDesserte)
            idPointDesserte += 1

            branchement = QgsFeature(branchementFields)
            branchement.setGeometry(geomNulle)
            champs = [idBranchement, NULL, adresse['fid'], NULL, date, 'C', NULL, NULL]

            branchement.setAttributes(champs)
            branchements.append(branchement)
            idBranchement += 1

        pointsDouble = []
        latDejaChercher = []

        # Recherche de points double
        for adr in adresseBon.getFeatures():
            # On considère que si deux points ont la même latitude ils sont identiques au vu de la grande précision des coordonnées des points mais il faudrait également tester la longitude pour être parfaitement rigoureux
            if adr['Latitude'] not in latDejaChercher:
                latDejaChercher.append(adr['Latitude'])
                
                params = {"INPUT": adresseBon, "FIELD": "Latitude", "VALUE": adr['Latitude']}
                processing.run("qgis:selectbyattribute", params)

                if adresseBon.selectedFeatureCount() > 1:
                    liste = []
                    for adrDouble in adresseBon.getSelectedFeatures():
                        liste.append(adrDouble['fid'])
                    pointsDouble.append(liste)

        avancementAlgo = self.actualiserProgress(feedback, avancementAlgo, 1, "jointure de la couche d'adresses et de la couche des parcelles...")
        
        #adresseJointureParcelle = self.creerCouche(feats, "Point", sourceAdresse)

        # adresseJointureParcelle contient les adresses avec les numéros des parcelles sur lesquelles elles se trouvent
        params = {"INPUT": adresseBon, "JOIN": coucheParcelles, "PREDICATE": [0], "JOIN_FIELDS": ['id'], "METHOD": 0, "PREFIX": "p_", "OUTPUT": "TEMPORARY_OUTPUT"}
        coucheAdresse = processing.run("native:joinattributesbylocation", params)
        
        # Création de la couche adresse
        adresseJointureParcelle  = coucheAdresse['OUTPUT']
        adresseJointureParcelle.setName("ADRESSE")

        avancementAlgo = self.actualiserProgress(feedback, avancementAlgo, 1, "Sélection des parcelles qui ont un bâtiment...")

        # les parcelles sur lesquelles se trouvent un bâtiment son sélectionnées
        params =  {"INPUT": coucheParcelles, "PREDICATE": [0], "INTERSECT": batiment, "METHOD": 0}
        processing.run("qgis:selectbylocation", params)

        listeParcelleBatCorrecte = []

        for p in coucheParcelles.getSelectedFeatures():
            geom = p.geometry()
            compteur = 0
            if geom.isMultipart() is False: # if only simple polygon, calculate only for this
                polyg = geom.asPolygon() # transform to list of points
                for ring in polyg:
                    compteur += 1
            else: # is multipart
                multi = geom.asMultiPolygon()
                for polyg in multi:
                    for ring in polyg:
                        compteur += 1
            if compteur == 1:
                listeParcelleBatCorrecte.append(p.id())

        coucheParcelles.removeSelection()
        coucheParcelles.select(listeParcelleBatCorrecte)

        # parcelleBat contient les parcelles avec des bâtiments 
        parcelleBat = self.creerCouche(coucheParcelles.getSelectedFeatures(), "Polygon", coucheParcelles)        

        # On sélectionne les adresses qui sont dans des parcelles avec un bâtiment à l'intérieur
        params =  {"INPUT": adresseJointureParcelle, "PREDICATE": [0], "INTERSECT": parcelleBat, "METHOD": 0}
        processing.run("qgis:selectbylocation", params)

        avancementAlgo = self.actualiserProgress(feedback, avancementAlgo, 1, "Sélection des adresses qui sont dans des parcelles avec un bâtiment et changement en points de desserte...")

        seuilPente = 2 # Seuil de l'angle entre la canalisation et deux parcelles, si l'angle dépasse le seuil on n'attribue pas la parité
        parcParite = [] # Liste qui va contenir toutes les parcelles qui dont on aura attribué la parité
        nouveauxPointsDesserte = []

        indexSpatialCanalisation = QgsSpatialIndex()
        feat = QgsFeature()
        fit = sourceCanalisation.getFeatures()

        while fit.nextFeature(feat):
            indexSpatialCanalisation.insertFeature(feat)

        pointsTest = []## Les points stockés dans cette liste seront affichés avec les points desserte, utilisé uniquement pour des tests

        # Cas ou l'utilisateur a entré la couche des numéros de voie
        if numVoiePresent: 

            seuilTailleBranchement = 20
            seuilJp = 5
            seuilJc = 5
            idsNumVoie = []
            parcelleIds = []
            pointsSansNum = []

            indexSpatialParcelle = QgsSpatialIndex(coucheParcelles.getSelectedFeatures(), flags=QgsSpatialIndex.FlagStoreFeatureGeometries)
            indexSpatialCanalisation = QgsSpatialIndex(sourceCanalisation.getFeatures(), flags=QgsSpatialIndex.FlagStoreFeatureGeometries)

            for point in adresseJointureParcelle.getFeatures():

                adresseId = point['fid']
                jp = 0
                jc = 0
                numVoieParcelle = ""

                coucheNumVoie = self.creerCouche(sourceNumVoie.getFeatures(), "Point", sourceNumVoie)

                # Sélection des numéros qui sont identiques au numéro de l'adresse
                params = {"INPUT": coucheNumVoie, "FIELD": numVoieNom, "VALUE": point[numNom]}
                processing.run("qgis:selectbyattribute", params)

                # Première itération sur toutes les adresses, une fois tous les branchements créés,
                # une vérification et une rectification sera faite pour les branchements suspects
                if coucheNumVoie.selectedFeatureCount():

                    nombreCandidats = coucheNumVoie.selectedFeatureCount()-1
                    
                    # Sélection du numéro de voie le plus proche
                    indexSpatialNumVoie = QgsSpatialIndex(coucheNumVoie.getSelectedFeatures(), flags=QgsSpatialIndex.FlagStoreFeatureGeometries)
                    nearestId = indexSpatialNumVoie.nearestNeighbor(point.geometry())[0]
                    fit = coucheNumVoie.getFeatures(QgsFeatureRequest().setFilterFid(nearestId))
                    numVoie = QgsFeature()
                    fit.nextFeature(numVoie)

                    # Sélection de la parcelle la plus proche de ce numéro
                    plusProcheIdParcelle = indexSpatialParcelle.nearestNeighbor(numVoie.geometry())[0]
                    plusProcheIdCanalisation = indexSpatialCanalisation.nearestNeighbor(point.geometry().asPoint(), 1)[0]
                        
                    caracParcelle2, pointSurParcelle = self.trouverVoisinParcelle(point, plusProcheIdParcelle, parcelleData)
                    caracCanalisation2, pointSurLigne = self.trouverVoisinCanalisation(point, plusProcheIdCanalisation, sourceCanalisation)
                    
                    # Vérification sur la canalisation
                    while difflib.SequenceMatcher(a=caracCanalisation2['rue'].lower(), b=point['NOM VOIE'].lower()).ratio() < 0.7 and jc < seuilJc:###mettre les deux champs en parametres
                        jc += 1
                        plusProcheIdCanalisation = indexSpatialCanalisation.nearestNeighbor(point.geometry().asPoint(), jc+1)[jc]
                        caracCanalisation2, pointSurLigne = self.trouverVoisinCanalisation(point, plusProcheIdCanalisation, sourceCanalisation)

                    parcId = caracParcelle2.id()
                    canalId = caracCanalisation2.id()
                    parcelleIds.append(parcId)

                    if caracParcelle2['numVoie']:
                        numVoieParcelle = caracParcelle2['numVoie']

                    # Création de la couche de la parcelle la plus proche
                    coucheParcelleBat = self.creerCouche([caracParcelle2], "Polygon", coucheParcelles)

                    # On sélectionne les numéros qui sont sur la parcelle
                    params =  {"INPUT": coucheNumVoie, "PREDICATE": [0], "INTERSECT": coucheParcelleBat, "METHOD": 0}
                    processing.run("qgis:selectbylocation", params)

                    if coucheNumVoie.selectedFeatureCount():
                        # Attribution du numéro de voie aux parcelles qui ont un numéro en leur sein
                        for numVoie in coucheNumVoie.getSelectedFeatures(): # il peut y avoir plusieurs numéros sur une parcelle notamment lorque la parcelle intersecte plusieurs routes
                            numVoieParcelle += str(numVoie[numVoieNom])
                            numVoieParcelle += " "

                        coucheParcelles.startEditing()

                        indexColonneNumVoie = coucheParcelles.fields().indexFromName('numVoie')
                        coucheParcelles.changeAttributeValue(parcId, indexColonneNumVoie, numVoieParcelle)

                        coucheParcelles.commitChanges()

                        idsNumVoie.append(numVoie[numVoieId])

                    # Coordonnées du point du branchement partant de la canalisation
                    x1, y1 = pointSurLigne[0], pointSurLigne[1]

                    nbPoints = 0
                    listePoint = []
                    n = 0

                    geometrie, x1, y1, x2, y2 = self.testerIntersection(caracParcelle2, caracCanalisation2, x1, pointSurParcelle[0], y1, pointSurParcelle[1])
                    
                    # Check si le point est un point multiple
                    for liste in pointsDouble:
                        if point['fid'] in liste:
                            listePoint = liste
                            for i, valeur in enumerate(listePoint):
                                if point['fid'] == valeur:
                                    n = i
                            nbPoints = len(liste)
                    
                    modifNumero = True
                    numVoieParcelle = ""
                    
                    while modifNumero:
                        modifNumero = False
                        # Certains branchements ne satisferont aucune conditions sur toutes les parcelles, on limite donc raisonnablement le nombre d'itération maximum
                        if jp < seuilJp and jp < nombreCandidats:
                            # Cas où plusieurs points sont superposés, il faut les décaler légèrement
                            if nbPoints:
                                for pointId in listePoint:
                                    if pointId != point['fid']:
                                        for p in pointsDesserte:
                                            if p['adresseId'] == pointId:
                                                canalId = p['canalId']
                                                parcId = p['parcelleId']
                                                caracCanalisation2, pointSurLigne = self.trouverVoisinCanalisation(point, canalId, sourceCanalisation)
                                                caracParcelle2, pointSurParcelle = self.trouverVoisinParcelle(point, parcId, parcelleData)

                                                geometrie, x1, y1, x2, y2 = self.testerIntersection(caracParcelle2, caracCanalisation2, x1, pointSurParcelle[0], y1, pointSurParcelle[1])

                                                if n%2:
                                                    decalage = math.ceil(n/2)+1
                                                else:
                                                        decalage = -(n/2 + 1)

                                                k = 0.3
                                                d12 = CreateurBranchementAlgorithm.calculerDistanceEucl(x1, y1, x2, y2)
                                                d13 = CreateurBranchementAlgorithm.calculerDistanceEucl(x1, y1, x2, y1)
                                                angle = math.acos(d13/d12)
                                                dx = k*math.sin(angle)
                                                dy = k*math.cos(angle)

                                                if (x2 > x1 and y2 > y1) or (x2 < x1 and y2 < y1):
                                                    y2 -= decalage*dy
                                                    x2 += decalage*dx
                                                else:
                                                    y2 += decalage*dy
                                                    x2 += decalage*dx

                                                geometrie = QgsGeometry.fromPointXY(QgsPointXY(x2, y2))

                                                parcelleIds.append(parcId)

                            else:
                                caracParcelle2Init, geometrieInit, x1Init, y1Init, x2Init, y2Init = caracParcelle2, geometrie, x1, y1, x2, y2
                            
                                longueurBranchement = QgsGeometry.fromPolyline([QgsPoint(x1, y1), QgsPoint(x2, y2)]).length()
                                # Un branchement trop grand est suspect
                                if longueurBranchement > seuilTailleBranchement:
                                    jp += 1
                                    modifNumero = True

                                    nearestIds = indexSpatialNumVoie.nearestNeighbor(point.geometry(), jp+1)[jp]
                                    fit = coucheNumVoie.getFeatures(QgsFeatureRequest().setFilterFid(nearestIds))
                                    numVoie = QgsFeature()
                                    fit.nextFeature(numVoie)

                                    plusProcheIdParcelle = indexSpatialParcelle.nearestNeighbor(numVoie.geometry())[0]
                                    caracParcelle2, pointSurParcelle = self.trouverVoisinParcelle(point, plusProcheIdParcelle, parcelleData)
                                    parcId = caracParcelle2.id()
                                        
                                    parcelleIds.remove(caracParcelle2Init.id())
                                    parcelleIds.append(caracParcelle2.id())

                                    geometrie, x1, y1, x2, y2 = self.testerIntersection(caracParcelle2, caracCanalisation2, x1, pointSurParcelle[0], y1, pointSurParcelle[1])

                                    # Cas où l'ancien branchement était le plus court
                                    if QgsGeometry.fromPolyline([QgsPoint(x1, y1), QgsPoint(x2, y2)]).length() > longueurBranchement:
                                        jp -= 1
                                        modifNumero = False

                                        parcelleIds.remove(caracParcelle2.id())
                                        parcelleIds.append(caracParcelle2Init.id())

                                        caracParcelle2, geometrie, x1, y1, x2, y2 = caracParcelle2Init, geometrieInit, x1Init, y1Init, x2Init, y2Init
                                        parcId = caracParcelle2.id()
                                """
                                # Condition d'unicité de point de desserte par parcelle
                                if parcelleIds.count(parcId)-1 > nbPoints:###enlever ca et voir
                                    parcelleIds.remove(caracParcelle2.id())
                                    modifNumero, jp, parcId, caracParcelle2, geometrie, x1, y1, x2, y2 = self.changerDeNumero(jp, indexSpatialNumVoie, coucheNumVoie, indexSpatialParcelle, point, parcelleData, caracCanalisation2, x1, y1, nbPoints)
                                    parcelleIds.append(caracParcelle2.id())

                                    modifNumero = True"""

                                # Condition de nom de rue similaire
                                if difflib.SequenceMatcher(a=caracCanalisation2['rue'].lower(), b=point['NOM VOIE'].lower()).ratio() < 0.7:
                                    parcelleIds.remove(caracParcelle2.id())
                                    modifNumero, jp, parcId, caracParcelle2, geometrie, x1, y1, x2, y2 = self.changerDeNumero(jp, indexSpatialNumVoie, coucheNumVoie, indexSpatialParcelle, point, parcelleData, caracCanalisation2, x1, y1, nbPoints)
                                    parcelleIds.append(caracParcelle2.id())

                                    modifNumero = True
                    
                    # Création des branchements
                    geom = QgsGeometry.fromPolyline([QgsPoint(x1, y1), QgsPoint(x2, y2)])
                    branchements, idBranchement = self.ajouterBranchement(branchementFields, branchements, idBranchement, parcId, adresseId, canalId, x1, y1, x2, y2, date, point, NULL)
                    
                    pointDesserte = QgsFeature(pointDesserteFields)
                    pointDesserte.setGeometry(geometrie)
                    
                    champs = [idPointDesserte, parcId, adresseId, canalId, date, 'C', NULL]
                    for field in point.fields():
                        if field.name() not in ['id', 'parcelleId', 'adresseId', 'canalId', 'date', 'prec_clas', 'suspect']:
                            champs.append(point[field.name()])

                    pointDesserte.setAttributes(champs)
                    pointsDesserte.append(pointDesserte)
                    idPointDesserte += 1
                            
                else:
                    pointsSansNum.append(point)               

            # On travail sur une copie car on va modifier la vraie liste durant l'itération
            branchementsCopie = [branchement for branchement in branchements]
            nbSuspect = 0##

            self.actualiserProgress(feedback, avancementAlgo, 1, "Identification et rectification des branchements suspects...")
            l = len(branchementsCopie)
            m = 50/l

            # Vérification des hypothèses et rectification des points desserte et des branchements
            for branchement in branchementsCopie:
                
                avancementAlgo = self.actualiserProgress(feedback, avancementAlgo, m, "")
                
                jc = 0
                seuilJc = 5
                
                # Identification des branchements vraisemblablement faux
                estSuspect = False

                coucheParcelles.removeSelection()
                coucheParcelles.select(branchement['parcelleId'])
                parcelle = QgsFeature()
                coucheParcelles.getSelectedFeatures().nextFeature(parcelle)
                coucheBranchement = self.creerCouche([branchement], "LineString", branchementFields)

                # Sélection des parcelles avec bâtiment
                params =  {"INPUT": coucheParcelles, "PREDICATE": [0], "INTERSECT": batiment, "METHOD": 0}
                processing.run("qgis:selectbylocation", params)
                coucheParcelleAvecBatiment = self.creerCouche(coucheParcelles.getSelectedFeatures(), "Polygon", coucheParcelles)
                
                # On enlève la parcelle sur laquelle se trouve le branchement
                coucheParcelle = self.creerCouche([parcelle], "Polygon", coucheParcelles)
                params =  {"INPUT": coucheParcelleAvecBatiment, "PREDICATE": [0], "INTERSECT": coucheParcelle, "METHOD": 3}
                processing.run("qgis:selectbylocation", params)
                
                # Cas où le branchement intersect une canalisation
                if self.croiseCanalisation(sourceCanalisation, coucheBranchement, branchementFields):
                    estSuspect = True
                
                # Cas où le branchement est très grand
                if self.estGrand(branchement.geometry(), 100):
                    estSuspect = True
                
                if estSuspect:
                    nbSuspect += 1
                    # Supression des anciens branchements modifiés et de leurs points de desserte
                    branchements.remove(branchement)

                    """# semble ne pas marcher je sais pas pq
                    couchePointsDesserte = self.creerCouche(pointsDesserte, "Point", pointDesserteFields)
                    params = {"INPUT": couchePointsDesserte, "FIELD": "adresseId", "VALUE": str(branchement['adresseId'])}
                    processing.run("qgis:selectbyattribute", params)

                    feedback.pushInfo("nb elt pointsDesserte: "+str(couchePointsDesserte.featureCount()))
                    feedback.pushInfo("nb elt selected pointsDesserte: "+str(couchePointsDesserte.selectedFeatureCount()))

                    pointDesserte = QgsFeature()
                    couchePointsDesserte.getSelectedFeatures().nextFeature(pointDesserte)
                    """

                    for p in pointsDesserte:
                        if p["adresseId"] == branchement['adresseId']:
                            pointDesserte = p
                            break      

                    pointsDesserte.remove(pointDesserte)

                    for liste in pointsDouble:
                        if point['fid'] in liste:
                            listePoint = liste
                            for i, valeur in enumerate(listePoint):
                                if point['fid'] == valeur:
                                    n = i
                            nbPoints = len(liste)

                    if nbPoints:
                        for pointId in listePoint:
                            if pointId != point['fid']:
                                for p in pointsDesserte:
                                    if p['adresseId'] == pointId:
                                        canalId = p['canalId']
                                        parcId = p['parcelleId']
                                        caracCanalisation2, pointSurLigne = self.trouverVoisinCanalisation(point, canalId, sourceCanalisation)
                                        caracParcelle2, pointSurParcelle = self.trouverVoisinParcelle(point, parcId, parcelleData)

                                        geometrie, x1, y1, x2, y2 = self.testerIntersection(caracParcelle2, caracCanalisation2, x1, pointSurParcelle[0], y1, pointSurParcelle[1])

                                        if n%2:
                                            decalage = math.ceil(n/2)+1
                                        else:
                                                decalage = -(n/2 + 1)

                                        k = 0.3
                                        d12 = CreateurBranchementAlgorithm.calculerDistanceEucl(x1, y1, x2, y2)
                                        d13 = CreateurBranchementAlgorithm.calculerDistanceEucl(x1, y1, x2, y1)
                                        angle = math.acos(d13/d12)
                                        dx = k*math.sin(angle)
                                        dy = k*math.cos(angle)

                                        if (x2 > x1 and y2 > y1) or (x2 < x1 and y2 < y1):
                                            y2 -= decalage*dy
                                            x2 += decalage*dx
                                        else:
                                            y2 += decalage*dy
                                            x2 += decalage*dx

                                        geometrie = QgsGeometry.fromPointXY(QgsPointXY(x2, y2))

                                        parcelleIds.append(parcId)

                    else:
                        # Nouvelle attribution de parcelle
                        adresseJointureParcelle.removeSelection()
                        adresseJointureParcelle.select(branchement['adresseId'])

                        point = QgsFeature()
                        adresseJointureParcelle.getSelectedFeatures().nextFeature(point)
                        adresseId = point['fid']

                        coucheParcelles.removeSelection()
                        coucheParcelles.select(parcelleIds)
                        coucheParcelles.invertSelection()

                        parcelleIds.remove(branchement['parcelleId'])

                        feedback.pushInfo("0: "+str(coucheParcelles.selectedFeatureCount()))

                        params = {'INPUT': coucheParcelles, 'EXPRESSION': "\"numVoie\" is null ", 'METHOD': 3}
                        processing.run("qgis:selectbyexpression", params) # semble pas fonctionner

                        feedback.pushInfo("1: "+str(coucheParcelles.selectedFeatureCount()))
                                            
                        indexSpatialParcelle = QgsSpatialIndex(coucheParcelles.getSelectedFeatures(), flags=QgsSpatialIndex.FlagStoreFeatureGeometries)
                        plusProcheIdParcelle = indexSpatialParcelle.nearestNeighbor(point.geometry().asPoint())[0]
                        caracParcelle2, pointSurParcelle = self.trouverVoisinParcelle(point, plusProcheIdParcelle, parcelleData)
                        parcId = caracParcelle2.id()
                        canalId = pointDesserte['canalId']

                        parcelleIds.append(parcId)

                        caracCanalisation2, pointSurLigne = self.trouverVoisinCanalisation(point, canalId, sourceCanalisation)

                        # Vérification sur la canalisation
                        while difflib.SequenceMatcher(a=caracCanalisation2['rue'].lower(), b=point['NOM VOIE'].lower()).ratio() < 0.7 and jc < seuilJc:
                            jc += 1
                            plusProcheIdCanalisation = indexSpatialCanalisation.nearestNeighbor(point.geometry().asPoint(), jc+1)[jc]
                            caracCanalisation2, pointSurLigne = self.trouverVoisinCanalisation(point, plusProcheIdCanalisation, sourceCanalisation)
                        
                        geometrie, x1, y1, x2, y2 = self.testerIntersection(caracParcelle2, caracCanalisation2, pointSurLigne[0], pointSurParcelle[0], pointSurLigne[1], pointSurParcelle[1])

                        # Création des branchements
                        geometrieBranchement = QgsGeometry.fromPolyline([QgsPoint(x1, y1), QgsPoint(x2, y2)])
                        branchements, idBranchement = self.ajouterBranchement(branchementFields, branchements, branchement['id'], parcId, adresseId, canalId, x1, y1, x2, y2, date, point, NULL)

                        newPointDesserte = QgsFeature(pointDesserteFields)
                        newPointDesserte.setGeometry(geometrie)
                        
                        champs = [pointDesserte['id'], parcId, adresseId, canalId, date, 'C', NULL]
                        for field in point.fields():
                            if field.name() not in ['id', 'parcelleId', 'adresseId', 'canalId', 'date', 'prec_clas', 'suspect']:
                                champs.append(point[field.name()])

                        newPointDesserte.setAttributes(champs)
                        pointsDesserte.append(newPointDesserte)

            feedback.pushInfo("Il y a eu : "+str(nbSuspect)+" branchements suspects.")
            self.actualiserProgress(feedback, avancementAlgo, 1, "Attribution des branchements pour les numéros annexes...")

            for point in pointsSansNum:
                # Check si le point est un point multiple
                for liste in pointsDouble:
                    if point['fid'] in liste:
                        listePoint = liste
                        for i, valeur in enumerate(listePoint):
                            if point['fid'] == valeur:
                                n = i
                        nbPoints = len(liste)

                if nbPoints:
                    for pointId in listePoint:
                        if pointId != point['fid']:
                            for p in pointsDesserte:
                                if p['adresseId'] == pointId:
                                    canalId = p['canalId']
                                    parcId = p['parcelleId']
                                    caracCanalisation2, pointSurLigne = self.trouverVoisinCanalisation(point, canalId, sourceCanalisation)
                                    caracParcelle2, pointSurParcelle = self.trouverVoisinParcelle(point, parcId, parcelleData)

                                    geometrie, x1, y1, x2, y2 = self.testerIntersection(caracParcelle2, caracCanalisation2, x1, pointSurParcelle[0], y1, pointSurParcelle[1])

                                    if n%2:
                                        decalage = math.ceil(n/2)+1
                                    else:
                                            decalage = -(n/2 + 1)

                                    k = 0.3
                                    d12 = CreateurBranchementAlgorithm.calculerDistanceEucl(x1, y1, x2, y2)
                                    d13 = CreateurBranchementAlgorithm.calculerDistanceEucl(x1, y1, x2, y1)
                                    angle = math.acos(d13/d12)
                                    dx = k*math.sin(angle)
                                    dy = k*math.cos(angle)

                                    if (x2 > x1 and y2 > y1) or (x2 < x1 and y2 < y1):
                                        y2 -= decalage*dy
                                        x2 += decalage*dx
                                    else:
                                        y2 += decalage*dy
                                        x2 += decalage*dx

                                    geometrie = QgsGeometry.fromPointXY(QgsPointXY(x2, y2))

                                    parcelleIds.append(parcId)

                else:
                    coucheParcelles.removeSelection()
                    coucheParcelles.select(parcelleIds)
                    coucheParcelles.invertSelection()
                    
                    # On garde que les parcelle qui n'ont pas de numéro de voie en leur sein
                    params = {'INPUT': coucheParcelles, 'EXPRESSION': "\"numVoie\" is null ", 'METHOD': 3}
                    processing.run("qgis:selectbyexpression", params)

                    indexSpatialParcelle = QgsSpatialIndex(coucheParcelles.getSelectedFeatures(), flags=QgsSpatialIndex.FlagStoreFeatureGeometries)
                    plusProcheIdParcelle = indexSpatialParcelle.nearestNeighbor(point.geometry().asPoint())[0]
                    caracParcelle2, pointSurParcelle = self.trouverVoisinParcelle(point, plusProcheIdParcelle, parcelleData)
                    parcId = caracParcelle2.id()
                    canalId = pointDesserte['canalId']

                    parcelleIds.append(parcId)
                        
                    caracCanalisation2, pointSurLigne = self.trouverVoisinCanalisation(point, canalId, sourceCanalisation)

                    geometrie, x1, y1, x2, y2 = self.testerIntersection(caracParcelle2, caracCanalisation2, pointSurLigne[0], pointSurParcelle[0], pointSurLigne[1], pointSurParcelle[1])
                
                branchements, idBranchement = self.ajouterBranchement(branchementFields, branchements, branchement['id'], parcId, adresseId, canalId, x1, y1, x2, y2, date, point, NULL)

                newPointDesserte = QgsFeature(pointDesserteFields)
                newPointDesserte.setGeometry(geometrie)
                    
                champs = [pointDesserte['id'], parcId, adresseId, canalId, date, 'C', NULL]
                for field in point.fields():
                    if field.name() not in ['id', 'parcelleId', 'adresseId', 'canalId', 'date', 'prec_clas', 'suspect']:
                        champs.append(point[field.name()])

                newPointDesserte.setAttributes(champs)
                pointsDesserte.append(newPointDesserte)

            self.actualiserProgress(feedback, avancementAlgo, 1, "Remplissage du champ suspect des points de desserte et des branchments...")
          
            # On travail sur une copie car on va modifier la vraie liste durant l'itération
            branchementsCopie2 = [branchement for branchement in branchements]

            l = len(branchementsCopie2)
            m = 20/l

            # Remplissage du champ suspect
            for branchement in branchementsCopie2:

                self.actualiserProgress(feedback, avancementAlgo, m, "")

                if branchement['parcelleId']: # Branchements avec numéro postal égal à 0
                    sus = self.estSuspect(branchement, branchementFields, sourceCanalisation, branchements, adresseJointureParcelle)
                    
                    for p in pointsDesserte:
                        if p["adresseId"] == branchement['adresseId']:
                            pointDesserte = p
                            break

                    branchements.remove(branchement)
                    pointsDesserte.remove(pointDesserte)

                    champs = []
                    for field in branchement.fields():
                        if field.name() != 'suspect':
                            champs.append(branchement[field.name()])
                        else:
                            champs.append(sus)

                    branchement.setAttributes(champs)

                    champs = []
                    for field in pointDesserte.fields():
                        if field.name() != 'suspect':
                            champs.append(pointDesserte[field.name()])
                        else:
                            champs.append(sus)

                    pointDesserte.setAttributes(champs)

                    branchements.append(branchement)
                    pointsDesserte.append(pointDesserte)

        # Cas où la couche des numéros de voie n'a pas été renseignée
        else:
            # Itération sur les adresses qui sont sur des parcelles avec des bâtiments
            for pointSurParcelleAvecBatiment in adresseJointureParcelle.getSelectedFeatures():

                nouveauS = True
                aCreer = True
                pointsSurParcelleAvecBatiment = [pointSurParcelleAvecBatiment]

                while nouveauS:
                    for point in pointsSurParcelleAvecBatiment:

                        nbPoints = False

                        for liste in pointsDouble:
                            for pointsFid in liste:
                                if point['fid'] == pointsFid and len(liste) > 1:
                                    nbPoints = True

                        change = False

                        # Identification de la canalisation la plus proche de l'adresse
                        nearestIds = indexSpatialCanalisation.nearestNeighbor(point.geometry().asPoint(), 1)
                        featureId = nearestIds[0]
                        fit2 = sourceCanalisation.getFeatures(QgsFeatureRequest().setFilterFid(featureId))
                        canalisationProche = QgsFeature()
                        fit2.nextFeature(canalisationProche)
                        
                        # Identification du point le plus proche sur cette canalisation
                        pointSurLigne = canalisationProche.geometry().closestSegmentWithContext(QgsPointXY(point.geometry().asPoint()))[1]

                        # Sélection de la parcelle sur laquelle le point adresse se situe
                        params = {"INPUT": coucheParcelles, "FIELD": "id", "VALUE": point['p_id']}
                        processing.run("qgis:selectbyattribute", params)
                        parcelle = QgsFeature()
                        coucheParcelles.getSelectedFeatures().nextFeature(parcelle)

                        # Identification du point le plus proche du point trouvé juste avant sur cette parcelle
                        pointSurParcelle = parcelle.geometry().closestSegmentWithContext(pointSurLigne)[1]
                        
                        avancementAlgo = self.actualiserProgress(feedback, avancementAlgo, 0.1, "")

                        if aCreer:
                            coucheParcelles.startEditing()
                            # Dans certains cas la parité n'est pas définie par le champ "Num" mais par le numéro du champ "ADRESSE"
                            # Cela ajoute de la précision pour l'attribution de la parité mais c'est plutôt spécifique à notre fichier clientèle, si l'on n'a pas le même champ 'ADRESSE', cela ne sera pas pris en compte
                            num = self.checkerNum(point, numNom)
                            
                            indexColonneParite = coucheParcelles.fields().indexFromName('parite')
                            coucheParcelles.changeAttributeValue(parcelle.id(), indexColonneParite, num)
                            #feedback.pushInfo("____parcelle id: "+str(parcelle.id())+"___parité: "+str(num))
                            coucheParcelles.commitChanges()

                            parcParite.append(parcelle)
                            pointDesserte = QgsFeature(pointDesserteFields)
                            geometrie, x1, y1, x2, y2 = self.testerIntersection(parcelle, canalisationProche, pointSurLigne[0], pointSurParcelle[0], pointSurLigne[1], pointSurParcelle[1])
                            #x2 , y2 = p.geometry().centroid().asPoint().x(), p.geometry().centroid().asPoint().y()
                            params = [idPointDesserte, parcelle.id(), point['fid'], canalId, date, 'C', 0] # lors de la création de la nouvelle couche, les noms des champs sont tronqués à la dixième lettre je ne sais pas pourquoi
                            for field in pointSurParcelleAvecBatiment.fields():
                                if field.name() not in ['id', 'parcelleId', 'adresseId', 'canalId', 'date', 'prec_clas', 'suspect']:
                                    params.append(pointSurParcelleAvecBatiment[field.name()])

                            pointsDesserte, idPointDesserte = self.ajouterPointDesserte(pointDesserteFields, pointsDesserte, params, x2, y2)
                            branchements, idBranchement = self.ajouterBranchement(branchementFields, branchements, idBranchement, parcelle.id(), point.id(), canalId, pointSurLigne[0], pointSurLigne[1], x2, y2, date, pointSurParcelleAvecBatiment, 0)

                        # Création de la couche contenant uniquement la parcelle en question
                        coucheParcelle = self.creerCouche([parcelle], "Polygon", coucheParcelles)  

                        # Sélection des parcelles qui touchent la parcelle possédant une adresse
                        params =  {"INPUT": coucheParcelles, "PREDICATE": [4], "INTERSECT": coucheParcelle, "METHOD": 0}
                        processing.run("qgis:selectbylocation", params)    

                        # Déselection des parcelles ayant déjà une parité attribuée
                        params =  {"INPUT": coucheParcelles, "OPERATOR": 0, "FIELD": "parite", "VALUE": 0, "METHOD": 2}
                        processing.run("qgis:selectbyattribute", params)   
                        params =  {"INPUT": coucheParcelles, "OPERATOR": 0, "FIELD": "parite", "VALUE": 1, "METHOD": 2}
                        processing.run("qgis:selectbyattribute", params)   

                        autre = []

                        estChemin = False

                        # On différencie la route des parcelles avec bâtiment
                        for parcelle in coucheParcelles.getSelectedFeatures():
                            # Création de la couche contenant uniquement une parcelle qui touche la parcelle possédant une adresse
                            parcelleACote = self.creerCouche([parcelle], "Polygon", coucheParcelles)
                            
                            # Sélection des parcelles qui ont un bâtiment
                            params =  {"INPUT": parcelleACote, "PREDICATE": [0], "INTERSECT": batiment, "METHOD": 0}
                            processing.run("qgis:selectbylocation", params)

                            # Cas où la parcelle à un bâtiment
                            if parcelleACote.selectedFeatureCount() > 0: # cas des parcelles avec bâtiment
                                autre.append(parcelle)
                            # Cas des parcelles sans bâtiment
                            else: 
                                # Cas de la route -> intersection avec la canalisation
                                if parcelle.geometry().intersects(canalisationProche.geometry()): 
                                    estChemin = True
                                    prFeat = parcelle
                                # Cas des parcelle qui n'ont pas des bâtiments mais ne sont pas des routes
                                else: 
                                    autre.append(parcelle)
                            
                        if not estChemin:

                            routeEntiere = QgsFeature(parcelleData.fields())
                            route.getFeatures().nextFeature(routeEntiere)
                            idRoute = routeEntiere.id()
                                
                            pc1 = canalisationProche.geometry().asPolyline()[0]
                            xc1, yc1 = pc1[0], pc1[1]
                            pc2 = canalisationProche.geometry().asPolyline()[len(canalisationProche.geometry().asPolyline())-1]
                            xc2, yc2 = pc2[0], pc2[1]
                                
                            #indexSpatialRoute = QgsSpatialIndex(route.getFeatures(), flags=QgsSpatialIndex.FlagStoreFeatureGeometries)
                            fitRoute = route.getFeatures(QgsFeatureRequest().setFilterFid(idRoute))
                            caracRoute = QgsFeature()
                            fitRoute.nextFeature(caracRoute)
                            pointSurRoute1 = caracRoute.geometry().closestSegmentWithContext(QgsPointXY(xc1, yc1))[1]
                            pointSurRoute2 = caracRoute.geometry().closestSegmentWithContext(QgsPointXY(xc2, yc2))[1]
                                
                            x1, y1 = pointSurRoute1[0], pointSurRoute1[1]
                            x2, y2 = 0, 0
                            x3, y3 = pointSurRoute2[0], pointSurRoute2[1]
                            x4, y4 = 0, 0

                            # Calcul de la pente de la canalisation, on pourrait aussi prendre celle de la route
                            if xc2 != xc1:
                                penteCanal = (yc2 - yc1)/(xc2 - xc1)
                            else:
                                penteCanal = inf

                            iter1, iter2 = 0, 0

                            if yc2 != yc1:
                                a = -1/penteCanal # pente perdendiculaire à la pente de la canalisation
                            else:
                                a = inf

                            x21, x22, b = CreateurBranchementAlgorithm.calculerCoords(x1, y1, a, 0.1, 0)
                            
                            x2, signe1 = CreateurBranchementAlgorithm.trouverSigne(a, b, x21, x22, routeEntiere)
                            y2 = a*x2 + b
                            
                            d = 0.1
                            # On s'arrète lorsque le point est "sorti" de la route
                            while QgsGeometry.fromPointXY(QgsPointXY(x2, y2)).intersects(routeEntiere.geometry()):
                                d += 1
                                iter1 = d
                                x2, b = CreateurBranchementAlgorithm.calculerCoords(x1, y1, a, d, signe1)
                                y2 = a*x2 + b
                            
                            x41, x42, b = CreateurBranchementAlgorithm.calculerCoords(x3, y3, a, 0.1, 0)
                            
                            x4, signe2 = CreateurBranchementAlgorithm.trouverSigne(a, b, x41, x42, routeEntiere)
                            y4 = a*x4 + b
                                
                            d = 0.1
                            # On s'arrète lorsque le point est "sorti" de la route
                            while QgsGeometry.fromPointXY(QgsPointXY(x4, y4)).intersects(routeEntiere.geometry()):
                                d += 1
                                iter2 = d
                                x4, b = CreateurBranchementAlgorithm.calculerCoords(x3, y3, a, d, signe2)
                                y4 = a*x4 + b

                            # Mieux vaut trop gros que pas assez
                            if abs(iter1 - iter2) > 5:
                                if iter1 < iter2:
                                    iter2 = iter1
                                    x4, b = CreateurBranchementAlgorithm.calculerCoords(x3, y3, a, iter2, signe2)
                                    y4 = a*x4 + b
                                else:
                                    iter1 = iter2
                                    x2, b = CreateurBranchementAlgorithm.calculerCoords(x1, y1, a, iter1, signe1)
                                    y2 = a*x2 + b

                            # Cas où les lignes se croisent
                            if QgsGeometry.fromPolyline(QgsLineString(QgsPoint(x1, y1), QgsPoint(x3, y3))).intersects(QgsGeometry.fromPolyline(QgsLineString(QgsPoint(x2, y2), QgsPoint(x4, y4)))):
                                xInterm, yInterm = x3, y3
                                x3, y3 = x4, y4
                                x4, y4 = xInterm, yInterm

                            # On agrandit un peu les bords du polygone
                            newx1, b = CreateurBranchementAlgorithm.calculerCoords(x1, y1, a, 1, -signe1)
                            newy1 = a*x1 + b

                            newx3, b = CreateurBranchementAlgorithm.calculerCoords(x3, y3, a, 1, -signe2)
                            newy3 = a*x3 + b

                            points = [QgsPointXY(x1, y1), QgsPointXY(x2, y2), QgsPointXY(x4, y4), QgsPointXY(x3, y3), QgsPointXY(x1, y1)]                                
                            points2 = [QgsPointXY(newx1, newy1), QgsPointXY(x2, y2), QgsPointXY(x4, y4), QgsPointXY(x3, y3), QgsPointXY(x1, y1)]                                
                            points3 = [QgsPointXY(x1, y1), QgsPointXY(x2, y2), QgsPointXY(x4, y4), QgsPointXY(newx3, newy3), QgsPointXY(x1, y1)]                                

                            geom = QgsGeometry.fromPolygonXY([points])
                            geom2 = QgsGeometry.fromPolygonXY([points2])
                            geom3 = QgsGeometry.fromPolygonXY([points3])

                            if geom2.area() < geom.area():
                                newx1, b = CreateurBranchementAlgorithm.calculerCoords(x1, y1, a, 1, signe1)
                                newy1 = a*x1 + b
                            if geom3.area() < geom.area():
                                newx3, b = CreateurBranchementAlgorithm.calculerCoords(x3, y3, a, 1, signe2)
                                newy3 = a*x3 + b
                            
                            x1, y1, x3, y3 = newx1, newy1, newx3, newy3
                            points = [QgsPointXY(x1, y1), QgsPointXY(x2, y2), QgsPointXY(x4, y4), QgsPointXY(x3, y3), QgsPointXY(x1, y1)]                                
                            geom = QgsGeometry.fromPolygonXY([points])

                            prFeat = QgsFeature()
                            prFeat.setGeometry(geom)

                        # 
                        # On s'occupe à présent de la parité de l'autre côté de la route
                        coucheRoute = self.creerCouche([prFeat], "Polygon", coucheParcelles)

                        coucheAutre = self.creerCouche(autre, "Polygon", coucheParcelles)

                        if not estChemin:
                            # On intersecte les rectangles qu'on a créé avec la route réelle
                            params =  {"INPUT": coucheRoute, "OVERLAY": route, "OUTPUT": QgsProcessing.TEMPORARY_OUTPUT}
                            coucheRoute = processing.run("qgis:clip", params)['OUTPUT']
                            ##
                            #context.temporaryLayerStore().addMapLayer(coucheRoute)
                            #context.addLayerToLoadOnCompletion(coucheRoute.id(), QgsProcessingContext.LayerDetails('portionRoute', context.project(), 'portionRoute'))
                            ##
                        # Sélection des parcelles touchant la route parmis celles qui touchent la parcelle adresse
                        params =  {"INPUT": coucheAutre, "PREDICATE": [4], "INTERSECT": coucheRoute, "METHOD": 0}
                        processing.run("qgis:selectbylocation", params) 

                        for parc in coucheAutre.getSelectedFeatures():                            
                            # Sélection d'une parcelle qui touche la route et qui touche la parcelle avec le point adresse 
                            params = {"INPUT": coucheParcelles, "FIELD": "id", "VALUE": parc['id']}
                            processing.run("qgis:selectbyattribute", params)
                            parcelleACote = QgsFeature()
                            coucheParcelles.getSelectedFeatures().nextFeature(parcelleACote)

                            centroid = parcelleACote.geometry().centroid()

                            nearestIds = indexSpatialCanalisation.nearestNeighbor(centroid.asPoint(), 1)
                            featureId = nearestIds[0]
                            fit2 = sourceCanalisation.getFeatures(QgsFeatureRequest().setFilterFid(featureId))
                            canalisationProche2 = QgsFeature()
                            fit2.nextFeature(canalisationProche2)

                            if canalisationProche.id() == canalisationProche2.id():

                                pointSurLigne2 = canalisationProche2.geometry().closestSegmentWithContext(QgsPointXY(centroid.asPoint()))[1]

                                pointSurparcelleACote = parcelleACote.geometry().closestSegmentWithContext(pointSurLigne2)[1]

                                x1 = pointSurLigne.x()
                                y1 = pointSurLigne.y()
                                x2 = pointSurLigne2.x()
                                y2 = pointSurLigne2.y()
                                x0 = pointSurParcelle.x()
                                y0 = pointSurParcelle.y()
                                newX = pointSurparcelleACote.x()
                                newY = pointSurparcelleACote.y()
                                newPoint = QgsPointXY(newX, newY)

                                if x1 != x2:
                                    penteCanal = (y2 - y1)/(x2 - x1)
                                else:
                                    penteCanal = inf
                                if newX != x0:
                                    penteParc = (newY - y0)/(newX - x0)
                                else:
                                    penteParc = inf

                                # comparaison des pentes de la canalisation et des parcelles
                                if abs(penteCanal - penteParc) < seuilPente: 

                                    aCreer = False

                                    coucheParcelles.startEditing()
                                        
                                    num = self.checkerNum(point, numNom)

                                    indexColonneParite = coucheParcelles.fields().indexFromName('parite')
                                    coucheParcelles.changeAttributeValue(parcelleACote.id(), indexColonneParite, num)

                                    coucheParcelles.commitChanges()

                                    parcParite.append(parcelleACote)

                                    change = True
                                    point = QgsFeature(adresseJointureParcelle.fields())
                                    point['p_id'] = parcelleACote['id']
                                    point[numNom] = num
                                    point.setGeometry(QgsGeometry.fromPointXY(newPoint))

                                    pointsSurParcelleAvecBatiment.append(point)

                        if not change:
                            nouveauS = False
                        
                    # Attribution de la parité sur l'autre côté de la route

                    # Sélection des parcelles qui touchent la route
                    params =  {"INPUT": coucheParcelles, "PREDICATE": [0], "INTERSECT": coucheRoute, "METHOD": 0}
                    processing.run("qgis:selectbylocation", params)

                        
                    # Déselection de la parcelle route
                    params =  {"INPUT": coucheParcelles, "PREDICATE": [3], "INTERSECT": coucheRoute, "METHOD": 3}
                    processing.run("qgis:selectbylocation", params)

                    parcelleRoute = self.creerCouche(coucheParcelles.getSelectedFeatures(), "Polygon", coucheParcelles)

                    parcPariteCouche = self.creerCouche(parcParite, "Polygon", coucheParcelles)

                    # Sélection des parcelles qui touchent la route sans parité
                    params =  {"INPUT":parcelleRoute, "PREDICATE": [3], "INTERSECT": parcPariteCouche, "METHOD": 0}
                    processing.run("qgis:selectbylocation", params)
                    c = QgsFeature()
                        
                    # Si la sélection n'est pas vide
                    if parcelleRoute.selectedFeatureCount():

                        parcelleRoute.getSelectedFeatures().nextFeature(c)
                        parite = c['parite']

                        parcelleRoute.selectAll() # Sélection de tous les éléments
                        # Sélection des parcelles qui touchent la route mais pas les parcelles avec parité
                        params =  {"INPUT": parcelleRoute, "PREDICATE": [3], "INTERSECT": parcPariteCouche, "METHOD": 3}
                        processing.run("qgis:selectbylocation", params)

                        for parc in parcelleRoute.getSelectedFeatures():

                            # Sélection d'une parcelle qui touche la route et qui ne touche pas la parcelle avec le point adresse 
                            params = {"INPUT": coucheParcelles, "FIELD": "id", "VALUE": parc['id']}
                            processing.run("qgis:selectbyattribute", params)
                            parcelleACote = QgsFeature()
                            coucheParcelles.getSelectedFeatures().nextFeature(parcelleACote)

                            coucheParcelles.startEditing()

                            indexColonneParite = coucheParcelles.fields().indexFromName('parite')
                            coucheParcelles.changeAttributeValue(parcelleACote.id(), 8, int((parite+1)%2))
                            #feedback.pushInfo("____id: "+str(parcelleACote.id())+"___parite: "+str(int((parite+1)%2)))

                            coucheParcelles.commitChanges()

                            parcParite.append(parcelleACote)
                        
            adresseJointureParcelle.invertSelection()
                
            
            # Création des points restants pour les points adresse qui ne sont pas dans des parcelles avec bâtiment
            for s in adresseJointureParcelle.getSelectedFeatures():
                idPointDesserte += 1
                point = QgsFeature(pointDesserteFields)
                champs = [idPointDesserte, 0, s['fid'], 0, date, 'C', 1]
                for field in s.fields():
                    champs.append(s[field.name()])
                point.setAttributes(champs)
                point.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(s.geometry().asPoint())))
                pointsRestants.append(point)
        
            indexSpatialLocalisation = QgsSpatialIndex(sourceCanalisation.getFeatures(), flags=QgsSpatialIndex.FlagStoreFeatureGeometries)

            avancementAlgo += 10
            feedback.setProgress(avancementAlgo)
            feedback.pushInfo("Les premiers branchement ont été créé")

            # Sélection des parcelles avec bâtiment
            params =  {"INPUT": coucheParcelles, "PREDICATE": [0], "INTERSECT": batiment, "METHOD": 0}
            processing.run("qgis:selectbylocation", params)

            indexSpatialParcelle = QgsSpatialIndex(coucheParcelles.getSelectedFeatures(), flags=QgsSpatialIndex.FlagStoreFeatureGeometries)

            nouveauxPointsDesserte = []

            parcelleIds = []
            parcelleIdsNew = []

            nbParcelle = coucheParcelles.selectedFeatureCount() - 1

            for p in pointsDesserte:
                parcelleIds.append(p['parcelleId'])

            # On passe aux points qui ne sont pas sur des parcelles habités
            for point in pointsRestants:
    
                jp = 0

                plusProcheIdParcelle = indexSpatialParcelle.nearestNeighbor(point.geometry())[0]
                plusProcheIdCanalisation = indexSpatialLocalisation.nearestNeighbor(point.geometry().asPoint(), 1)[0]

                caracParcelle2, pointSurParcelle = self.trouverVoisinParcelle(point, plusProcheIdParcelle, parcelleData)
                caracCanalisation2, pointSurLigne = self.trouverVoisinCanalisation(point, plusProcheIdCanalisation, sourceCanalisation)
                
                # Coordonnées du point du branchement partant de la canalisation
                x1, y1 = pointSurLigne[0], pointSurLigne[1]

                if numVoiePresent:
                    parite = caracParcelle2['numVoie']
                else:
                    parite = caracParcelle2['parite']

                parcId = caracParcelle2.id()
                canalId = caracCanalisation2.id()

                nbPoints = 0
                listePoint = []
                n = 0

                # Check si le point est un point multiple
                for liste in pointsDouble:
                    if point['adresseId'] in liste:
                        #feedback.pushInfo("______"+str(point['adresseId']))
                        listePoint = liste
                        for i, valeur in enumerate(listePoint):
                            if point['adresseId'] == valeur:
                                n = i
                                p2 = QgsPointXY(caracParcelle2.geometry().centroid().asPoint())
                                x2, y2 = p2.x(), p2.y()
                        nbPoints = len(liste)

                # Check de la parité de la parcelle, on n'est pas obligé de mettre ça ici vu que la parité est déja vérifiée plus loin mais cela permet de potentiellement éliminer beaucoup de "candidats" directement et ainsi d'améliorer la rapidité de l'algorithme
                jp, geometrie, x1, y1, x2, y2, caracParcelle2, parcId = self.checkerParite(parite, parcId, point, numNom, True, jp, indexSpatialParcelle, parcelleData, caracCanalisation2, caracParcelle2, x1, y1, x2, y2, geometrie, False, numVoiePresent)
                
                branchement = QgsFeature(branchementFields)
                pointDesserte = QgsFeature(pointDesserteFields)

                # Coordonnées du point du branchement partant de la canalisation
                x1, y1 = pointSurLigne[0], pointSurLigne[1]

                # modifNumeroication des coordonnées afin de prolonger les branchement d'un facteur définit dans la fonction allongerBranchement() 
                geometrie, x1, y1, x2, y2 = self.testerIntersection(caracParcelle2, caracCanalisation2, x1, pointSurParcelle[0], y1, pointSurParcelle[1])
                adresse2 = self.creerCouche(pointsDesserte + nouveauxPointsDesserte, "Point", pointDesserteFields)

                # Sélection des points sur la parcelle s'il y en a
                params =  {"INPUT": adresse2, "FIELD": "parcelleId", "VALUE": parcId, "METHOD": 0}
                processing.run("qgis:selectbyattribute", params)
                pointSurParcelle = QgsFeature()
                adresse2.getSelectedFeatures().nextFeature(pointSurParcelle)

                # Sélection du point traité
                params =  {"INPUT": adresse2, "FIELD": "adresseId", "VALUE": point['adresseId'], "METHOD": 0}
                processing.run("qgis:selectbyattribute", params)
                pointRestant = QgsFeature()
                adresse2.getSelectedFeatures().nextFeature(pointRestant)
                        
                modifNumero = True
                # Tant que le point desserte ou le branchement associé ne respectent pas une des condition, on change de parcelle
                while modifNumero:
                    modifNumero = False

                    branchementPossible = QgsFeature(branchementFields)
                    branchementPossible.setGeometry(QgsGeometry.fromPolyline([QgsPoint(x1, y1), QgsPoint(x2, y2)]))

                    coucheBranchementPossible = self.creerCouche([branchementPossible], "LineString", branchementFields)
                    
                    branchementsCopie = []
                    
                    # Création d'une copie de la couche branchement
                    branchementsCopie = branchements
                    coucheBranchement = self.creerCouche(branchementsCopie, "LineString", branchementFields)
                    
                    # Sélection des branchements qui coupent le branchement qu'on souhaite créer
                    params =  {"INPUT": coucheBranchement, "PREDICATE": [0], "INTERSECT": coucheBranchementPossible, "METHOD": 0}
                    processing.run("qgis:selectbylocation", params)

                    f = QgsFeature()
                    
                    #feedback.pushInfo("_____coucheBranchement.selectedFeatureCount(): "+str(coucheBranchement.selectedFeatureCount()))
                    # Condition de non croisement des branchements
                    if coucheBranchement.selectedFeatureCount() > 0 and jp < nbParcelle:
                        #feedback.pushInfo("____branchement croise")
                        branchementCroise = QgsFeature()
                        for feat in coucheBranchement.getSelectedFeatures():
                            if feat['id'] != branchementPossible['id']: # On veut un branchement qui n'est pas branchementPossible (le branchement qu'on test)
                                branchementCroise = feat # branchement qui croise branchementPossible
                        #coucheBranchement.getSelectedFeatures().nextFeature(br)

                        coucheBranchementCroise = self.creerCouche([branchementCroise], "LineString", branchementFields)

                        processing.run("qgis:selectbylocation", {"INPUT": adresse2, "PREDICATE": [0], "INTERSECT": coucheBranchementCroise, "METHOD": 0})

                        pt = QgsFeature() # point du branchement qui croise le branchement que l'on test
                        for feat in adresse2.getSelectedFeatures(): # adresse2 n'est pas une couche d'adresses mais bien de points desserte, elle contient les points qui sont sur la même parcelle que le branchement
                            pt = feat
                        #adresse2.getSelectedFeatures().nextFeature(pt)
                        # Cas où l'ancien branchement est plus petit que le nouveau branchement
                        if branchementCroise.geometry().length() < branchementPossible.geometry().length() and jp < nbParcelle:
                            modifNumero, jp, parcId, caracParcelle2, geometrie, x1, y1, x2, y2 = self.changerDeParcelle(jp, indexSpatialParcelle, point, parcelleData, caracCanalisation2, x1, y1, nbPoints)
                            
                            branchementPossible = QgsFeature(branchementFields)
                            branchementPossible.setGeometry(QgsGeometry.fromPolyline([QgsPoint(x1, y1), QgsPoint(x2, y2)]))

                            coucheBranchementPossible = self.creerCouche([branchementPossible], "LineString", branchementFields)

                            params =  {"INPUT": coucheBranchement, "PREDICATE": [0], "INTERSECT": coucheBranchementPossible, "METHOD": 0}
                            processing.run("qgis:selectbylocation", params)
            
                        else:
                            nouveauxPointsDesserte, parcelleIdsNew, pointsRestants, branchements = self.retirerPointEtBranchement(pt, branchementCroise, parcId, 'id', 'id', 'parcelleId', 'parcelleId', nouveauxPointsDesserte, parcelleIdsNew, pointsRestants, branchements)
                            jp = 0
                                            
                    # Condition d'unicité de point de desserte par parcelle
                    if parcelleIds.count(parcId) + parcelleIdsNew.count(parcId) != 0 and jp < nbParcelle:
                        if parcelleIds.count(parcId) != 0:
                            modifNumero, jp, parcId, caracParcelle2, geometrie, x1, y1, x2, y2 = self.changerDeParcelle(jp, indexSpatialParcelle, point, parcelleData, caracCanalisation2, x1, y1, nbPoints)
                            
                        elif parcelleIds.count(parcId) + parcelleIdsNew.count(parcId) > nbPoints:
                            
                            modifNumero = True
                            if parcId in parcelleIdsNew: # cas où le point fait partie des points placés après (points restants)
                                        
                                pointDesserteVector = self.creerCouche(nouveauxPointsDesserte, "Point", pointDesserteFields)

                                branchementVector = self.creerCouche(branchements, "LineString", branchementFields)

                                processing.run("qgis:selectbyexpression", {'INPUT': pointDesserteVector, 'EXPRESSION': "\"parcelleId\" = "+str(parcId), 'METHOD': 0})
                                processing.run("qgis:selectbyexpression", {'INPUT': branchementVector, 'EXPRESSION': "\"parcelleId\" = "+str(parcId), 'METHOD': 0})

                                pt, br = QgsFeature(), QgsFeature()
                                pointDesserteVector.getSelectedFeatures().nextFeature(pt)
                                branchementVector.getSelectedFeatures().nextFeature(br)
                                
                                # On compare les longueurs des branchements, on considère que le plus petit est le bon
                                if br.geometry().length() < QgsGeometry.fromPolylineXY([QgsPointXY(x1, y1), QgsPointXY(x2, y2)]).length(): # cas où le branchement déjà présent est plus petit
                                    modifNumero, jp, parcId, caracParcelle2, geometrie, x1, y1, x2, y2 = self.changerDeParcelle(jp, indexSpatialParcelle, point, parcelleData, caracCanalisation2, x1, y1, nbPoints)

                                else: # cas où le nouveau branchement est le plus petit
                                    nouveauxPointsDesserte, parcelleIdsNew, pointsRestants, branchements = self.retirerPointEtBranchement(nouveauxPointsDesserte, pt, br, parcId, 'adresseId', 'fid', 'id', 'id', nouveauxPointsDesserte, parcelleIdsNew, pointsRestants, branchements)                    

                            elif parcId in parcelleIds: # cas où le point qui est sur la même parcelle où l'on souhaite placer notre nouveau point fait partie des points placés au début qui étaient déjà sur des parcelles habités
                                modifNumero, jp, parcId, caracParcelle2, geometrie, x1, y1, x2, y2 = self.changerDeParcelle(jp, indexSpatialParcelle, point, parcelleData, caracCanalisation2, x1, y1, nbPoints)

                            parcId = caracParcelle2.id()
                            if numVoiePresent:
                                parite = caracParcelle2['numVoie']
                            else:
                                parite = caracParcelle2['parite']
                            # Vérification de la parité
                            jp, geometrie, x1, y1, x2, y2, caracParcelle2, parcId = self.checkerParite(parite, parcId, point, numNom, True, jp, indexSpatialParcelle, parcelleData, caracCanalisation2, caracParcelle2, x1, y1, x2, y2, geometrie, nbPoints, numVoiePresent)
                            
                        elif nbPoints > 0: # Cas où plusieurs points sont superposés, il faut les décaler légèrement
                            #feedback.pushInfo("______decalage")

                            # Lorsqu'il y a trop de points multiples, certains points seront possiblement hors parcelle, afin d'éviter cela on établit le point de desserte au centre de la parcelle
                            p2 = QgsPointXY(caracParcelle2.geometry().centroid().asPoint())
                            x2, y2 = p2.x(), p2.y()

                            if n%2:
                                decalage = math.ceil(n/2)+1
                            else:
                                decalage = -(n/2 + 1)

                            k = 0.3
                            d12 = CreateurBranchementAlgorithm.calculerDistanceEucl(x1, y1, x2, y2)
                            d13 = CreateurBranchementAlgorithm.calculerDistanceEucl(x1, y1, x2, y1)
                            angle = math.acos(d13/d12)
                            dx = k*math.sin(angle)
                            dy = k*math.cos(angle)

                            if (x2 > x1 and y2 > y1) or (x2 < x1 and y2 < y1):
                                y2 -= decalage*dy
                                x2 += decalage*dx
                            else:
                                y2 += decalage*dy
                                x2 += decalage*dx

                            geometrie = QgsGeometry.fromPointXY(QgsPointXY(x2, y2))
                            modifNumero = False
                                        
                    parcId = caracParcelle2.id()
                    if numVoiePresent:
                        parite = caracParcelle2['numVoie']
                    else:
                        parite = caracParcelle2['parite']
                    # Condition de respect de la parité
                    jp, geometrie, x1, y1, x2, y2, caracParcelle2, parcId = self.checkerParite(parite, parcId, point, numNom, modifNumero, jp, indexSpatialParcelle, parcelleData, caracCanalisation2, caracParcelle2, x1, y1, x2, y2, geometrie, nbPoints, numVoiePresent)

                    # Couche du branchement étudié
                    branchementPossible = QgsFeature(branchementFields)
                    branchementPossible.setGeometry(QgsGeometry.fromPolyline([QgsPoint(x1, y1), QgsPoint(x2, y2)]))
                    coucheBranchementPossible = self.creerCouche([branchementPossible], "LineString", branchementFields)

                    # Sélection des parcelles avec bâtiment
                    params =  {"INPUT": coucheParcelles, "PREDICATE": [0], "INTERSECT": batiment, "METHOD": 0}
                    processing.run("qgis:selectbylocation", params)
                    coucheParcelleAvecBatiment = self.creerCouche(coucheParcelles.getSelectedFeatures(), "Polygon", coucheParcelles)
                    # On enlève la parcelle sur laquelle se trouve le branchement
                    coucheParcelle = self.creerCouche([caracParcelle2], "Polygon", coucheParcelles)
                    params =  {"INPUT": coucheParcelleAvecBatiment, "PREDICATE": [0], "INTERSECT": coucheParcelle, "METHOD": 3}
                    processing.run("qgis:selectbylocation", params)

                    # Cas où le branchement intersecte une parcelle avec bâtiment
                    if coucheParcelleAvecBatiment.selectedFeatureCount() and parcId not in parcelleIds and jp < nbParcelle:
                        #feedback.pushInfo("_____"+str(caracParcelle2['id'])+" est coupé par un branchment")
                        modifNumero, jp, parcId, caracParcelle2, geometrie, x1, y1, x2, y2 = self.changerDeParcelle(jp, indexSpatialParcelle, point, parcelleData, caracCanalisation2, x1, y1, nbPoints)

                    # Couche du branchement étudié
                    branchementPossible = QgsFeature(branchementFields)
                    branchementPossible.setGeometry(QgsGeometry.fromPolyline([QgsPoint(x1, y1), QgsPoint(x2, y2)]))
                    coucheBranchementPossible = self.creerCouche([branchementPossible], "LineString", branchementFields)

                    feats = sourceCanalisation.getFeatures()
                    canalisations = self.creerCouche(feats, "LineString", sourceCanalisation)

                    params =  {"INPUT": canalisations, "PREDICATE": [0], "INTERSECT": coucheBranchementPossible, "METHOD": 0}
                    processing.run("qgis:selectbylocation", params)
                    """
                    # Cas où le branchement intersect une canalisation
                    if canalisations.selectedFeatureCount() > 1 and jp < nbParcelle:
                        #feedback.pushInfo("_____canalisation coupé par branchment "+str(canalisations.selectedFeatureCount()))
                        modifNumero, jp, parcId, caracParcelle2, geometrie, x1, y1, x2, y2 = self.changerDeParcelle(jp, indexSpatialParcelle, point, parcelleData, caracCanalisation2, x1, y1, nbPoints)
                    """
                #feedback.pushInfo("___"+str(parcId))

                # Création des branchements
                geom = QgsGeometry.fromPolyline([QgsPoint(x1, y1), QgsPoint(x2, y2)])
                branchements, idBranchement = self.ajouterBranchement(branchementFields, branchements, idBranchement, parcId, point.id(), canalId, x1, y1, x2, y2, date, point, NULL)

                pointDesserte.setGeometry(geometrie)
                
                champs = [idPointDesserte, parcId, point['fid'], caracCanalisation2['id'], date, 'C', NULL]
                for field in point.fields():
                    if field.name() not in ['id', 'parcelleId', 'adresseId', 'canalId', 'date', 'prec_clas', 'suspect']:
                        champs.append(point[field.name()])

                pointDesserte.setAttributes(champs)
                nouveauxPointsDesserte.append(pointDesserte)
                idPointDesserte += 1
                parcelleIdsNew.append(parcId)
                #feedback.pushInfo("_____nb de point deja sur la parcelle "+ str(parcId) +": "+str(parcelleIds.count(parcId) + parcelleIdsNew.count(parcId)))

        # Création des couches de points desserte et de branchements
        for pointDesserte in pointsDesserte:
            sinkPointDesserte.addFeature(pointDesserte, QgsFeatureSink.FastInsert)

        for pointDesserte in nouveauxPointsDesserte:
            sinkPointDesserte.addFeature(pointDesserte, QgsFeatureSink.FastInsert)        

        for pointDesserte in sansGeometriePointsDesserte:
            sinkPointDesserte.addFeature(pointDesserte, QgsFeatureSink.FastInsert)

        for branchement in branchements:
            sinkBranchement.addFeature(branchement, QgsFeatureSink.FastInsert)

        for pointTest in pointsTest:
            sinkPointDesserte.addFeature(pointTest, QgsFeatureSink.FastInsert)

        coucheParcelles.removeSelection()
        
        avancementAlgo = self.actualiserProgress(feedback, avancementAlgo, 10, "")
        
        """
        # Update the progress bar
        feedback.setProgress(int(c * total))"""
        
        # Return the results of the algorithm. In this case our only result is
        # the feature sink which contains the processed features, but some
        # algorithms may return multiple feature sinks, calculated numeric
        # statistics, etc. These should all be included in the returned
        # dictionary, with keys matching the feature corresponding parameter
        # or output names.

        #os.remove(nomFichier)

        return {self.BRANCHEMENTSORTIE: destIdBranchement,
        self.POINTDESSERTESORTIE: destIdPointDesserte}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Createur Branchement'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'AEP'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return CreateurBranchementAlgorithm()