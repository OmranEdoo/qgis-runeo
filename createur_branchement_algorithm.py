# -*- coding: utf-8 -*-

"""
/***************************************************************************
 CreateurBranchement
                                 A QGIS plugin
 Ce plugin créé des branchements sur une réseau AEP
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-06-10
        copyright            : (C) 2022 by Runeo
        email                : omranedoo@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Runeo'
__date__ = '2022-06-10'
__copyright__ = '(C) 2022 by Runeo'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from asyncio.windows_events import NULL
from distutils import ccompiler
from email import feedparser
from email.charset import add_alias
import os
from math import sqrt
from datetime import datetime
import math
import csv
from socket import NI_NUMERICHOST
from stat import FILE_ATTRIBUTE_NO_SCRUB_DATA
from typing import Optional
from xml.dom.minidom import TypeInfo
#import GeoCoding
from qgis.utils import *
from qgis.PyQt.QtCore import QCoreApplication, QVariant
from qgis.core import (QgsProcessing,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterField,
                       QgsFields,
                       QgsField,
                       QgsWkbTypes,
                       QgsVectorLayer,
                       QgsProject,
                       QgsProcessingContext,
                       QgsGeometry,
                       QgsPointXY,
                       QgsFeature,
                       QgsFeatureSink,
                       QgsSpatialIndex,
                       QgsFeatureRequest,
                       QgsCoordinateReferenceSystem,
                       QgsVectorFileWriter,
                       QgsPoint,
                       QgsLineString)
from processing.core.Processing import Processing
Processing.initialize()
from processing.tools import *
import processing


class CreateurBranchementAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    ADRESSE = 'ADRESSE'
    CODEPOSTAL = 'CODEPOSTAL'
    CHAMPADRESSE = 'CHAMPADRESSE'
    CANALISATION = 'CANALISATION'
    BRANCHEMENT = 'BRANCHEMENT'
    POINTDESSERTE = 'POINTDESSERTE'


    def actualiserProgress(self, feedback, avancementAlgo, points, message):
        avancementAlgo += points
        feedback.setProgress(avancementAlgo)
        if message:
            feedback.pushInfo(message)

        return avancementAlgo

    def trouverVoisinParcelle(self, point, plusProcheIdParcelle, parcelleData):

            fitParcelle2 = parcelleData.getFeatures(QgsFeatureRequest().setFilterFid(plusProcheIdParcelle))
            caracParcelle2 = QgsFeature()
            fitParcelle2.nextFeature(caracParcelle2)

            pointSurParcelle = caracParcelle2.geometry().closestSegmentWithContext(QgsPointXY(point.geometry().asPoint()))[1]

            return caracParcelle2, pointSurParcelle

    def trouverVoisinCanalisation(self, point, plusProcheIdCanalisation, sourceCanalisation):

            fitCanalisation2 = sourceCanalisation.getFeatures(QgsFeatureRequest().setFilterFid(plusProcheIdCanalisation))
            caracCanalisation2 = QgsFeature()
            fitCanalisation2.nextFeature(caracCanalisation2)

            pointSurCanalisation = caracCanalisation2.geometry().closestSegmentWithContext(QgsPointXY(point.geometry().asPoint()))[1]

            return caracCanalisation2, pointSurCanalisation

    def ajouterPointDesserte(self, pointDesserteFields, pointsDesserte, parametres, x, y):
        pointDesserte = QgsFeature(pointDesserteFields)
        pointDesserte.setAttributes(parametres) # lors de la création de la nouvelle couche, les noms des champs sont tronqués à la dixième lettre je ne sais pas pourquoi
        pointDesserte.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(x, y)))
        pointsDesserte.append(pointDesserte)
        idPointDesserte = parametres[0]+1

        return pointsDesserte, idPointDesserte
    
    def ajouterBranchement(self, branchementFields, branchements, idBranchement, idParcelle, x1, y1, x2, y2, date):
        branchement = QgsFeature(branchementFields)
        geometrie = QgsGeometry.fromPolyline([QgsPoint(x1, y1), QgsPoint(x2, y2)])
        branchement.setGeometry(geometrie)
        branchement.setAttributes([idBranchement, idParcelle, date, 'C', geometrie.length()])
        branchements.append(branchement)
        idBranchement += 1

        return branchements, idBranchement

    def allongerBranchement(self, caracParcelle2, caracCanalisation2, x1, x2, y1, y2, normal):
        if x2 != x1:
            a = (y2 - y1)/(x2 - x1)
        else:
            a = 99999
        d = 3
        if normal:  
            x31, x32, b = CreateurBranchementAlgorithm.calculerCoords(x2, y2, a, d, 0)
        else: 
            x31, x32, b = CreateurBranchementAlgorithm.calculerCoords(x1, y1, a, d, 0)
        if CreateurBranchementAlgorithm.calculerDistanceEucl(x1, y1, x31, a*x31 + b) > CreateurBranchementAlgorithm.calculerDistanceEucl(x1, y1, x32, a*x32 + b):
            x3 = x31
        else:
            x3 = x32

        y3 = a*x3 + b
        
        # Les branchements ne sont pas de la longueur
        p1 = caracCanalisation2.geometry().closestSegmentWithContext(QgsPointXY(x3, y3))[1]
        x1, y1 = p1.x(), p1.y()
        p2 = caracParcelle2.geometry().closestSegmentWithContext(QgsPointXY(x1, y1))[1]
        x2, y2 = p2.x(), p2.y()
        if x2 != x1:
            a = (y2 - y1)/(x2 - x1)
        else:
            a = 99999
        x31, x32, b = CreateurBranchementAlgorithm.calculerCoords(x2, y2, a, d, 0)
        if QgsGeometry.fromPointXY(QgsPointXY(x31, a*x31+b)).intersects(caracParcelle2.geometry()):
            x3 = x31
        else:
            x3 = x32

        y3 = a*x3 + b

        return x1, y1, x3, y3
    
    def testerIntersection(self, caracParcelle2, caracCanalisation2, x1, x2, y1, y2):
        x1, y1, x3, y3 = self.allongerBranchement(caracParcelle2, caracCanalisation2, x1, x2, y1, y2, True)
        geometrie = QgsGeometry.fromPointXY(QgsPointXY(x3, y3))
        if not geometrie.intersects(caracParcelle2.geometry()):
            x1, y1, x3, y3 = self.allongerBranchement(caracParcelle2, caracCanalisation2, x1, x2, y1, y2, False)
            geometrie = QgsGeometry.fromPointXY(QgsPointXY(x3, y3))
        if not geometrie.intersects(caracParcelle2.geometry()):
            p1 = caracCanalisation2.geometry().closestSegmentWithContext(QgsPointXY(x2, y2))[1]
            x1, y1 = p1.x(), p1.y()
            x3, y3 = x2, y2
            geometrie = QgsGeometry.fromPointXY(QgsPointXY(x3, y2))
        
        return geometrie, x1, y1, x3, y3

    def creerCouche(self, features, type, source):
        feats = [feat for feat in features]
        if isinstance(source, QgsVectorLayer):
            attributs = source.dataProvider().fields().toList()
        elif isinstance(source, QgsFields):
            attributs = source.toList()
        else:
            attributs = source.fields().toList()
        
        c = QgsVectorLayer(type+"?crs=epsg:2975", "duplicated_layer", "memory")

        bon = False
        while not bon:
            try: # Cela permet d'éviter les "RunTime Error" qui peuvent survenir à cause du garbage collecteur
                c.dataProvider().addAttributes(attributs)
                bon = True
            except:
                c = QgsVectorLayer(type+"?crs=epsg:2975", "duplicated_layer", "memory")
        
        c.updateFields()
        c.dataProvider().addFeatures(feats)
        return c

    def afficherCouche(self, context, couche, nomCouche):
            context.temporaryLayerStore().addMapLayer(couche)
            context.addLayerToLoadOnCompletion(couche.id(), QgsProcessingContext.LayerDetails(nomCouche, context.project(), 'nomCouche'))


    @staticmethod
    def calculerDistanceEucl(x1, y1, x2, y2):
        return math.sqrt((x1-x2)**2+(y1-y2)**2)

    @staticmethod
    def calculerCoords(x, y, a, d, signe):
        b = y - a*x
        aa = (a**2+1)
        bb = (2*a*b - 2*a*y-2*x)
        cc = (x**2+y**2+b**2-2*b*y-d**2)
        discriminant = bb**2-4*aa*cc
        if discriminant < 0: ### on ne devrait pas arriver à ce cas
            discriminant = -discriminant
        if signe == 0:
            x21 = (-bb-sqrt(discriminant))/(2*aa)
            x22 = (-bb+sqrt(discriminant))/(2*aa)
            return x21, x22, b
        else:
            x2 = (-bb+signe*sqrt(discriminant))/(2*aa)
            return x2, b

    @staticmethod
    def trouverSigne(a, b, x1, x2, routeEntiere):
        if QgsGeometry.fromPointXY(QgsPointXY(x1, a*x1 + b)).intersects(routeEntiere.geometry()):
            x = x1
            signe = -1
        elif QgsGeometry.fromPointXY(QgsPointXY(x2, a*x2 + b)).intersects(routeEntiere.geometry()):
            x = x2
            signe = 1
        else:
            x = 0
            signe = 1
        return x, signe



    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # Couche des adresses de la table clientèle
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.ADRESSE,
                self.tr('Couche d\'entrée des adresses'),
                [QgsProcessing.TypeVectorPoint]
            )
        )

        # Nom de la colonne rescencant les code postaux dans la table clientèle
        self.addParameter(
            QgsProcessingParameterField(
                self.CODEPOSTAL,
                self.tr('Champ Code Postal'),
                parentLayerParameterName = self.ADRESSE,
                allowMultiple=False,
                optional=False,
            )
        )

        # Nom de la colonne donnant l'adresse complète
        self.addParameter(
            QgsProcessingParameterField(
                self.CHAMPADRESSE,
                self.tr('Champ adresse'),
                parentLayerParameterName = self.ADRESSE,
                allowMultiple=False,
                optional=False,
            )
        )

        # Nom de la colonne rescencant les canalisations du réseau sans les branchements
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.CANALISATION,
                self.tr('Couche d\'entrée des canalisations'),
                [QgsProcessing.TypeVectorLine]
            )
        )

        # Couche des branchements possibles 
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.BRANCHEMENT,
                self.tr('Couche de sortie de branchements')
            )
        )

        # Couche des points de desserte
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.POINTDESSERTE,
                self.tr('Couche des points de dessertes')
            )
        )


    def processAlgorithm(self, parameters, context, feedback):
        """"
        Here is where the processing itself takes place.
        """
        avancementAlgo = 0
        k = 1.5
        self.actualiserProgress(feedback, avancementAlgo, 1, "Début de l'algorithme...")

        #Création des champs des couches de sortie
        pointDesserteFields = QgsFields()
        pointDesserteFields.append(QgsField('id', QVariant.Int, '', 254, 0))
        pointDesserteFields.append(QgsField('parcelle_id', QVariant.Int, '', 254, 0))
        pointDesserteFields.append(QgsField('adresse_id', QVariant.Int, '', 254, 0))
        pointDesserteFields.append(QgsField('canalisation_id', QVariant.Int, '', 254, 0))
        pointDesserteFields.append(QgsField('adresse complète', QVariant.String, '', 254, 0))
        pointDesserteFields.append(QgsField('Num', QVariant.Int, '', 254, 0))
        pointDesserteFields.append(QgsField('date', QVariant.String, '', 254, 0))
        pointDesserteFields.append(QgsField('prec_clas', QVariant.Char, '', 254, 0))

        branchementFields = QgsFields()
        branchementFields.append(QgsField('id', QVariant.Int, '', 254, 0))
        branchementFields.append(QgsField('parcelle_id', QVariant.Int, '', 254, 0))
        branchementFields.append(QgsField('date', QVariant.String, '', 254, 0))
        branchementFields.append(QgsField('prec_clas', QVariant.Char, '', 254, 0))
        branchementFields.append(QgsField('longueur', QVariant.Double, '', 254, 0))

        idPointDesserte = 0
        idBranchement = 0

        # Retrieve the feature source and sink. The 'dest_id' variable is used
        # to uniquely identify the feature sink, and must be included in the
        # dictionary returned by the processAlgorithm function.
        sourceAdresse = self.parameterAsSource(parameters, self.ADRESSE, context)
        codePostalNom = self.parameterAsFields(parameters, self.CODEPOSTAL, context)[0]
        adresseNom = self.parameterAsFields(parameters, self.CHAMPADRESSE, context)[0]
        sourceCanalisation = self.parameterAsSource(parameters, self.CANALISATION, context)

        (sinkPointDesserte, destIdPointDesserte) = self.parameterAsSink(parameters, self.POINTDESSERTE,
                context, pointDesserteFields, QgsWkbTypes.Point, sourceAdresse.sourceCrs())
        (sinkBranchement, destIdBranchement) = self.parameterAsSink(parameters, self.BRANCHEMENT,
                context, branchementFields, QgsWkbTypes.LineString, sourceAdresse.sourceCrs())

        # Pour le feedback de la progression de l'algorithme
        total = 100.0 / sourceAdresse.featureCount() if sourceAdresse.featureCount() else 0
        date = str(datetime.now())

        # Filtrage de la BD PARCELLAIRE en fonction des communes de la zone étudiée
        root = QgsProject.instance().layerTreeRoot()
        #groupe = root.addGroup("BD PARCELLAIRE")

        # Création de la liste des codes postaux des communes présentes dans le fichier clientèle
        codesPostaux = [] 
        for adr in sourceAdresse.getFeatures():
            if str(adr[codePostalNom]) not in codesPostaux:
                codesPostaux.append(str(adr[codePostalNom]))

        codesInsee = []

        # Conversion des codes postaux en codes INSEE car certains fichiers de la BD PARCELLAIRE ne contiennent que le champ code INSEE
        with open('D:\omran\Runeo\data\correspondance-code-insee-code-postal-reunion.csv', mode ='r') as file:   
            # reading the CSV file
            csvFile = csv.DictReader(file)
             
            for code in codesPostaux:
                for lines in csvFile:
                    if str(lines["Code Postal"]) == code and str(lines["Code INSEE"]) not in codesInsee:
                        codesInsee.append(str(lines["Code INSEE"]))
        
        avancementAlgo = self.actualiserProgress(feedback, avancementAlgo, 2, "Création des couches de la BD PARCELLAIRE...")

        # Création de copie des couches de la BD PARCELLAIRE
        file = 'D:\\omran\\IGN\\BDPARCELLAIRE_1-2_VECTEUR_SHP_RGR92UTM40S_D974_2018-09-06\\BDPARCELLAIRE\\1_DONNEES_LIVRAISON_2018-09-00112\\BDPV_1-2_SHP_RGR92UTM40S_D974\\'
        listeCoucheParcel = ['COMMUNE', 'BATIMENT', 'PARCELLE']#, 'DIVCAD', 'LOCALISANT'] # Nom des couches que l'on souhaite afficher
                
        for nomCouche in listeCoucheParcel:
            couche = QgsVectorLayer(file+nomCouche+".SHP", nomCouche, 'ogr')
            self.afficherCouche(context, couche, 'Couche')
            #groupe.insertChildNode(0, QgsLayerTreeLayer(couche))
            #groupe.addLayer(couche)
            if nomCouche == "COMMUNE":

                avancementAlgo = self.actualiserProgress(feedback, avancementAlgo, 2, "Création de 'COMMUNE'...")

                commune = self.creerCouche(couche.getFeatures(), "Polygon", couche)

                context.temporaryLayerStore().removeMapLayers([couche])
                self.afficherCouche(context, commune, 'COMMUNE')

                # Suppression des communes inutiles
                ids = []
                for caracteristique in commune.getFeatures():
                    if caracteristique['CODE_INSEE'] not in codesInsee:
                        ids.append(caracteristique.id())

                commune.dataProvider().deleteFeatures(ids)
                commune.triggerRepaint()
            
            elif nomCouche == 'PARCELLE':

                avancementAlgo = self.actualiserProgress(feedback, avancementAlgo, 2, "Création de 'PARCELLE'...")

                coucheParcelles = self.creerCouche(couche.getFeatures(), "Polygon", couche)
                parcelleData = coucheParcelles.dataProvider()
                parcelleData.addAttributes([QgsField('parite', QVariant.Int, '', 254, 0), QgsField('id', QVariant.Int, '', 254, 0)])
                coucheParcelles.updateFields()

                context.temporaryLayerStore().removeMapLayers([couche])
                self.afficherCouche(context, coucheParcelles, 'PARCELLE')
                
                # Suppression des parcelles qui ne sont pas dans les communes de la zone
                ids = []
                for caracteristique in coucheParcelles.getFeatures():
                    if '97'+caracteristique['CODE_COM'] not in codesInsee:
                        ids.append(caracteristique.id())

                coucheParcelles.dataProvider().deleteFeatures(ids)
                coucheParcelles.triggerRepaint()
            elif nomCouche == 'BATIMENT':

                avancementAlgo = self.actualiserProgress(feedback, avancementAlgo, 2, "Création de 'BATIMENT'...")

                batiment = self.creerCouche(couche.getFeatures(), "Polygon", couche)

                context.temporaryLayerStore().removeMapLayers([couche])
                self.afficherCouche(context, batiment, 'BATIMENT')

        avancementAlgo = self.actualiserProgress(feedback, avancementAlgo, 2, "Suppression des bâtiments hors-zones...")

        batimentIds = []
        # Suppression des batiments qui ne sont pas dans les communes de la zone étudiée
        
        params =  {"INPUT": batiment, "PREDICATE": [0], "INTERSECT": commune, "METHOD": 0}
        processing.run("qgis:selectbylocation", params)

        batiment.invertSelection()

        for f in batiment.getSelectedFeatures():
            batimentIds.append(f.id())
            avancementAlgo = self.actualiserProgress(feedback, avancementAlgo, 0.0001, "")

        batiment.dataProvider().deleteFeatures(batimentIds)
        batiment.triggerRepaint()

        parcelleId = 0

        coucheParcelles.startEditing()

        # création d'un champ id sur la couche parcelle
        for p in coucheParcelles.getFeatures():
            parcelleId += 1
            coucheParcelles.changeAttributeValue(p.id(), 9, parcelleId)

        coucheParcelles.commitChanges()

        # Création de la couche ROUTE
        nomFichier = 'D:/omran/Runeo/data/ROUTE.shp'

        if os.path.exists(nomFichier):
            os.remove(nomFichier)

        route = self.creerCouche([], "Polygon", coucheParcelles)
    
        QgsVectorFileWriter.writeAsVectorFormat(route, nomFichier, 'UTF-8', QgsCoordinateReferenceSystem('epsg:2975'), 'ESRI Shapefile')
        
        params = {"INPUT": coucheParcelles, "OVERLAY": commune, "OUTPUT": nomFichier}
        processing.run("qgis:symmetricaldifference", params)

        route = QgsVectorLayer(nomFichier, "ROUTE", "ogr")

        aSupprimer = []

        for f in route.getFeatures():
            if not f['CODE_INSEE']:
                aSupprimer.append(f.id())
        
        route.dataProvider().deleteFeatures(aSupprimer)

        self.afficherCouche(context, route, 'ROUTE')

        pointsDesserte = []
        pointsRestants = []
        branchements = []

        feats = sourceAdresse.getFeatures()
        adresse = self.creerCouche(feats, "Point", sourceAdresse)

        pointsDouble = []
        latDejaChercher = []

        # Recherche de points double
        for adr in adresse.getFeatures():
            if adr['Latitude'] not in latDejaChercher:
                latDejaChercher.append(adr['Latitude'])
                
                params = {"INPUT": adresse, "FIELD": "Latitude", "VALUE": adr['Latitude']}
                processing.run("qgis:selectbyattribute", params)

                if adresse.selectedFeatureCount() > 1:
                    liste = []
                    for adrDouble in adresse.getSelectedFeatures():
                        liste.append(adrDouble['fid'])
                    pointsDouble.append(liste)

        avancementAlgo = self.actualiserProgress(feedback, avancementAlgo, 2, "jointure de la couche d'adresses et de la couche des parcelles...")
        
        adresseJointureParcelle = self.creerCouche(feats, "Point", sourceAdresse)

        nomFichier = 'D:/omran/Runeo/data/adresse6.shp'###supprimer a la fin

        if os.path.exists(nomFichier):
            os.remove(nomFichier)

        QgsVectorFileWriter.writeAsVectorFormat(adresseJointureParcelle, nomFichier, 'UTF-8', QgsCoordinateReferenceSystem('EPSG:2975'), 'ESRI Shapefile')

        # adresseJointureParcelle contient les adresses avec les numéros des parcelles sur lesquelles elles se trouvent
        params = {"INPUT": adresse, "JOIN": coucheParcelles, "PREDICATE": [0], "JOIN_FIELDS": ['id'], "METHOD": 0, "PREFIX": "p_", "OUTPUT": nomFichier}
        processing.run("native:joinattributesbylocation", params)

        adresseJointureParcelle = QgsVectorLayer(nomFichier, "adresse", "ogr")

        avancementAlgo = self.actualiserProgress(feedback, avancementAlgo, 2, "Sélection des parcelles qui ont un bâtiment...")

        # les parcelles sur lesquelles se trouvent un bâtiment son sélectionnées
        params =  {"INPUT": coucheParcelles, "PREDICATE": [0], "INTERSECT": batiment, "METHOD": 0}
        processing.run("qgis:selectbylocation", params)

        # parcelleBat contient les parcelles avec des bâtiments 
        parcelleBat = self.creerCouche(coucheParcelles.getSelectedFeatures(), "Polygon", coucheParcelles)        

        # On sélectionne les adresses qui sont dans des parcelles avec un bâtiment à l'intérieur
        params =  {"INPUT": adresseJointureParcelle, "PREDICATE": [0], "INTERSECT": parcelleBat, "METHOD": 0}
        processing.run("qgis:selectbylocation", params)

        avancementAlgo = self.actualiserProgress(feedback, avancementAlgo, 2, "Sélection des adresses qui sont dans des parcelles avec un bâtiment et changement en points de desserte...")

        sensRue = {}
        seuilPente = 2
        parcParite = []

        indexSpatialCanalisation = QgsSpatialIndex()
        feat = QgsFeature()
        fit = sourceCanalisation.getFeatures()

        while fit.nextFeature(feat):
            indexSpatialCanalisation.insertFeature(feat)

        pointsTest = []##

        # Itération sur les adresses qui sont sur des parcelles avec des bâtiments
        for pointSurParcelleAvecBatiment in adresseJointureParcelle.getSelectedFeatures():

            nouveauS = True
            aCreer = True
            pointsSurParcelleAvecBatiment = [pointSurParcelleAvecBatiment]

            while nouveauS:
                for point in pointsSurParcelleAvecBatiment:

                    change = False

                    # Identification de la canalisation la plus proche de l'adresse
                    nearestIds = indexSpatialCanalisation.nearestNeighbor(point.geometry().asPoint(), 1)
                    featureId = nearestIds[0]
                    fit2 = sourceCanalisation.getFeatures(QgsFeatureRequest().setFilterFid(featureId))
                    canalisationProche = QgsFeature()
                    fit2.nextFeature(canalisationProche)
                    
                    # Identification du point le plus proche sur cette canalisation
                    pointSurLigne = canalisationProche.geometry().closestSegmentWithContext(QgsPointXY(point.geometry().asPoint()))[1]

                    # Sélection de la parcelle sur laquelle le point adresse se situe
                    params = {"INPUT": coucheParcelles, "FIELD": "id", "VALUE": point['p_id']}
                    processing.run("qgis:selectbyattribute", params)
                    parcelle = QgsFeature()
                    coucheParcelles.getSelectedFeatures().nextFeature(parcelle)

                    """
                    fitP = parcelleData.getFeatures(QgsFeatureRequest().setFilterFid(parcelle.id()))
                    parcProche = QgsFeature()
                    fitP.nextFeature(parcProche)"""

                    # Identification du point le plus proche du point trouvé juste avant sur cette parcelle
                    pointSurParcelle = parcelle.geometry().closestSegmentWithContext(pointSurLigne)[1]
                    
                    avancementAlgo = self.actualiserProgress(feedback, avancementAlgo, 0.1, "")

                    if aCreer:
                        coucheParcelles.startEditing()
                        # Dans certains cas la parité n'est pas définie par le champ "Num" mais par le numéro du champ "ADRESSE"
                        if point['ADRESSE']:
                            if point['ADRESSE'].split(' ')[0].isdigit():
                                num = int(int(point['ADRESSE'].split(' ')[0])%2)
                            else:
                                num = int(point["Num"]%2)
                        else:
                            num = int(point["Num"]%2)
                        indexColonneParite = coucheParcelles.fields().indexFromName('parite')
                        coucheParcelles.changeAttributeValue(parcelle.id(), indexColonneParite, num)
                        #feedback.pushInfo("____parcelle id: "+str(parcelle.id())+"___parité: "+str(num))
                        coucheParcelles.commitChanges()

                        parcParite.append(parcelle)
                        pointDesserte = QgsFeature(pointDesserteFields)
                        geometrie, x1, y1, x2, y2 = self.testerIntersection(parcelle, canalisationProche, pointSurLigne[0], pointSurParcelle[0], pointSurLigne[1], pointSurParcelle[1])
                        #x2 , y2 = p.geometry().centroid().asPoint().x(), p.geometry().centroid().asPoint().y()
                        params = [idPointDesserte, parcelle.id(), point['fid'], canalisationProche['id'], point[adresseNom[:10]], num, date, 'C'] # lors de la création de la nouvelle couche, les noms des champs sont tronqués à la dixième lettre je ne sais pas pourquoi
                        pointsDesserte, idPointDesserte = self.ajouterPointDesserte(pointDesserteFields, pointsDesserte, params, x2, y2)

                        branchements, idBranchement = self.ajouterBranchement(branchementFields, branchements, idBranchement, parcelle.id(), pointSurLigne[0], pointSurLigne[1], x2, y2, date)

                    # Création de la couche contenant uniquement la parcelle en question
                    coucheParcelle = self.creerCouche([parcelle], "Polygon", coucheParcelles)  

                    # Sélection des parcelles qui touchent la parcelle possédant une adresse
                    params =  {"INPUT": coucheParcelles, "PREDICATE": [4], "INTERSECT": coucheParcelle, "METHOD": 0}
                    processing.run("qgis:selectbylocation", params)    

                    # Déselection des parcelles ayant déjà une parité attribuée
                    params =  {"INPUT": coucheParcelles, "OPERATOR": 0, "FIELD": "parite", "VALUE": 0, "METHOD": 2}
                    processing.run("qgis:selectbyattribute", params)   
                    params =  {"INPUT": coucheParcelles, "OPERATOR": 0, "FIELD": "parite", "VALUE": 1, "METHOD": 2}
                    processing.run("qgis:selectbyattribute", params)   

                    autre = []

                    estChemin = False

                    # On différencie la route des parcelles avec bâtiment
                    for parcelle in coucheParcelles.getSelectedFeatures():
                        # Création de la couche contenant uniquement une parcelle qui touche la parcelle possédant une adresse
                        parcelleACote = self.creerCouche([parcelle], "Polygon", coucheParcelles)
                        
                        # Sélection des parcelles qui ont un bâtiment
                        params =  {"INPUT": parcelleACote, "PREDICATE": [0], "INTERSECT": batiment, "METHOD": 0}
                        processing.run("qgis:selectbylocation", params)

                        # Cas où la parcelle à un bâtiment
                        if parcelleACote.selectedFeatureCount() > 0: # cas des parcelles avec bâtiment
                            autre.append(parcelle)
                        # Cas des parcelles sans bâtiment
                        else: 
                            # Cas de la route -> intersection avec la canalisation
                            if parcelle.geometry().intersects(canalisationProche.geometry()): 
                                estChemin = True
                                prFeat = parcelle
                            # Cas des parcelle qui n'ont pas des bâtiments mais ne sont pas des routes
                            else: 
                                autre.append(parcelle)
                        
                    if not estChemin:

                        routeEntiere = QgsFeature(parcelleData.fields())
                        route.getFeatures().nextFeature(routeEntiere)
                        idRoute = routeEntiere.id()

                        """
                        # Cas où la canalisation n'intersecte pas la route
                        if canalisationProche.geometry().intersects(routeEntiere.geometry()):
                            estChemin = True"""
                            
                        pc1 = canalisationProche.geometry().asPolyline()[0]
                        xc1, yc1 = pc1[0], pc1[1]
                        pc2 = canalisationProche.geometry().asPolyline()[len(canalisationProche.geometry().asPolyline())-1]
                        xc2, yc2 = pc2[0], pc2[1]
                            
                        #indexSpatialRoute = QgsSpatialIndex(route.getFeatures(), flags=QgsSpatialIndex.FlagStoreFeatureGeometries)
                        fitRoute = route.getFeatures(QgsFeatureRequest().setFilterFid(idRoute))
                        caracRoute = QgsFeature()
                        fitRoute.nextFeature(caracRoute)
                        pointSurRoute1 = caracRoute.geometry().closestSegmentWithContext(QgsPointXY(xc1, yc1))[1]
                        pointSurRoute2 = caracRoute.geometry().closestSegmentWithContext(QgsPointXY(xc2, yc2))[1]
                            
                        x1, y1 = pointSurRoute1[0], pointSurRoute1[1]
                        x2, y2 = 0, 0
                        x3, y3 = pointSurRoute2[0], pointSurRoute2[1]
                        x4, y4 = 0, 0

                        # Calcul de la pente de la canalisation, on pourrait aussi prendre celle de la route
                        if xc2 != xc1:
                            penteCanal = (yc2 - yc1)/(xc2 - xc1)
                        else:
                            penteCanal = 999999

                        iter1, iter2 = 0, 0

                        if yc2 != yc1:
                            a = -1/penteCanal # pente perdendiculaire à la pente de la canalisation
                        else:
                            a = 999999

                        x21, x22, b = CreateurBranchementAlgorithm.calculerCoords(x1, y1, a, 0.1, 0)
                        
                        x2, signe1 = CreateurBranchementAlgorithm.trouverSigne(a, b, x21, x22, routeEntiere)
                        y2 = a*x2 + b
                        
                        d = 0.1
                        # On s'arrète lorsque le point est "sorti" de la route
                        while QgsGeometry.fromPointXY(QgsPointXY(x2, y2)).intersects(routeEntiere.geometry()):##
                            d += 1
                            iter1 = d
                            x2, b = CreateurBranchementAlgorithm.calculerCoords(x1, y1, a, d, signe1)
                            y2 = a*x2 + b
                        
                        x41, x42, b = CreateurBranchementAlgorithm.calculerCoords(x3, y3, a, 0.1, 0)
                        
                        x4, signe2 = CreateurBranchementAlgorithm.trouverSigne(a, b, x41, x42, routeEntiere)
                        y4 = a*x4 + b
                            
                        d = 0.1
                        # On s'arrète lorsque le point est "sorti" de la route
                        while QgsGeometry.fromPointXY(QgsPointXY(x4, y4)).intersects(routeEntiere.geometry()):##
                            d += 1
                            iter2 = d
                            x4, b = CreateurBranchementAlgorithm.calculerCoords(x3, y3, a, d, signe2)
                            y4 = a*x4 + b

                        # Mieux vaut trop gros que pas assez
                        if abs(iter1 - iter2) > 5:
                            if iter1 < iter2:
                                iter2 = iter1
                                x4, b = CreateurBranchementAlgorithm.calculerCoords(x3, y3, a, iter2, signe2)
                                y4 = a*x4 + b
                            else:
                                iter1 = iter2
                                x2, b = CreateurBranchementAlgorithm.calculerCoords(x1, y1, a, iter1, signe1)
                                y2 = a*x2 + b

                        # Cas où les lignes se croisent
                        if QgsGeometry.fromPolyline(QgsLineString(QgsPoint(x1, y1), QgsPoint(x3, y3))).intersects(QgsGeometry.fromPolyline(QgsLineString(QgsPoint(x2, y2), QgsPoint(x4, y4)))):
                            xInterm, yInterm = x3, y3
                            x3, y3 = x4, y4
                            x4, y4 = xInterm, yInterm

                        # On agrandit un peu les bords du polygone
                        newx1, b = CreateurBranchementAlgorithm.calculerCoords(x1, y1, a, 1, -signe1)
                        newy1 = a*x1 + b

                        newx3, b = CreateurBranchementAlgorithm.calculerCoords(x3, y3, a, 1, -signe2)
                        newy3 = a*x3 + b

                        points = [QgsPointXY(x1, y1), QgsPointXY(x2, y2), QgsPointXY(x4, y4), QgsPointXY(x3, y3), QgsPointXY(x1, y1)]                                
                        points2 = [QgsPointXY(newx1, newy1), QgsPointXY(x2, y2), QgsPointXY(x4, y4), QgsPointXY(x3, y3), QgsPointXY(x1, y1)]                                
                        points3 = [QgsPointXY(x1, y1), QgsPointXY(x2, y2), QgsPointXY(x4, y4), QgsPointXY(newx3, newy3), QgsPointXY(x1, y1)]                                

                        geom = QgsGeometry.fromPolygonXY([points])
                        geom2 = QgsGeometry.fromPolygonXY([points2])
                        geom3 = QgsGeometry.fromPolygonXY([points3])

                        if geom2.area() < geom.area():
                            newx1, b = CreateurBranchementAlgorithm.calculerCoords(x1, y1, a, 1, signe1)
                            newy1 = a*x1 + b
                        if geom3.area() < geom.area():
                            newx3, b = CreateurBranchementAlgorithm.calculerCoords(x3, y3, a, 1, signe2)
                            newy3 = a*x3 + b
                        
                        x1, y1, x3, y3 = newx1, newy1, newx3, newy3
                        points = [QgsPointXY(x1, y1), QgsPointXY(x2, y2), QgsPointXY(x4, y4), QgsPointXY(x3, y3), QgsPointXY(x1, y1)]                                
                        geom = QgsGeometry.fromPolygonXY([points])

                        prFeat = QgsFeature()
                        prFeat.setGeometry(geom)

                    # 
                    # On s'occupe à présent de la parité de l'autre côté de la route
                    coucheRoute = self.creerCouche([prFeat], "Polygon", coucheParcelles)

                    coucheAutre = self.creerCouche(autre, "Polygon", coucheParcelles)

                    if not estChemin:
                        # On intersecte les rectangles qu'on a créé avec la route réelle
                        params =  {"INPUT": coucheRoute, "OVERLAY": route, "OUTPUT": QgsProcessing.TEMPORARY_OUTPUT}
                        coucheRoute = processing.run("qgis:clip", params)['OUTPUT']
                        ##
                        #context.temporaryLayerStore().addMapLayer(coucheRoute)
                        #context.addLayerToLoadOnCompletion(coucheRoute.id(), QgsProcessingContext.LayerDetails('portionRoute', context.project(), 'portionRoute'))
                        ##
                    # Sélection des parcelles touchant la route parmis celles qui touchent la parcelle adresse
                    params =  {"INPUT": coucheAutre, "PREDICATE": [4], "INTERSECT": coucheRoute, "METHOD": 0}
                    processing.run("qgis:selectbylocation", params) 

                    for parc in coucheAutre.getSelectedFeatures():                            
                        # Sélection d'une parcelle qui touche la route et qui touche la parcelle avec le point adresse 
                        params = {"INPUT": coucheParcelles, "FIELD": "id", "VALUE": parc['id']}
                        processing.run("qgis:selectbyattribute", params)
                        parcelleACote = QgsFeature()
                        coucheParcelles.getSelectedFeatures().nextFeature(parcelleACote)

                        centroid = parcelleACote.geometry().centroid()

                        nearestIds = indexSpatialCanalisation.nearestNeighbor(centroid.asPoint(), 1)
                        featureId = nearestIds[0]
                        fit2 = sourceCanalisation.getFeatures(QgsFeatureRequest().setFilterFid(featureId))
                        canalisationProche2 = QgsFeature()
                        fit2.nextFeature(canalisationProche2)

                        if canalisationProche.id() == canalisationProche2.id():

                            pointSurLigne2 = canalisationProche2.geometry().closestSegmentWithContext(QgsPointXY(centroid.asPoint()))[1]

                            pointSurparcelleACote = parcelleACote.geometry().closestSegmentWithContext(pointSurLigne2)[1]

                            x1 = pointSurLigne.x()
                            y1 = pointSurLigne.y()
                            x2 = pointSurLigne2.x()
                            y2 = pointSurLigne2.y()
                            x0 = pointSurParcelle.x()
                            y0 = pointSurParcelle.y()
                            newX = pointSurparcelleACote.x()
                            newY = pointSurparcelleACote.y()
                            newPoint = QgsPointXY(newX, newY)

                            if x1 != x2:
                                penteCanal = (y2 - y1)/(x2 - x1)
                            else:
                                penteCanal = 999999
                            if newX != x0:
                                penteParc = (newY - y0)/(newX - x0)
                            else:
                                penteParc = 999999

                            # comparaison des pentes de la canalisation et des parcelles
                            if abs(penteCanal - penteParc) < seuilPente: 

                                aCreer = False

                                coucheParcelles.startEditing()
                                    
                                if point['ADRESSE']:
                                    if point['ADRESSE'].split(' ')[0].isdigit():
                                        num = int(int(point['ADRESSE'].split(' ')[0])%2)
                                    else:
                                        num = int(point["Num"]%2)
                                else:
                                    num = int(point["Num"]%2)

                                sensRue[parcelle["id"]] = num
                                indexColonneParite = coucheParcelles.fields().indexFromName('parite')
                                coucheParcelles.changeAttributeValue(parcelleACote.id(), indexColonneParite, num)

                                coucheParcelles.commitChanges()

                                parcParite.append(parcelleACote)

                                change = True
                                point = QgsFeature(adresseJointureParcelle.fields())
                                point['p_id'] = parcelleACote['id']
                                point['Num'] = num
                                point.setGeometry(QgsGeometry.fromPointXY(newPoint))

                                pointsSurParcelleAvecBatiment.append(point)

                    if not change:
                        nouveauS = False
                    
                # Attribution de la parité sur l'autre côté de la route

                # Sélection des parcelles qui touchent la route
                params =  {"INPUT": coucheParcelles, "PREDICATE": [0], "INTERSECT": coucheRoute, "METHOD": 0}
                processing.run("qgis:selectbylocation", params)

                    
                # Déselection de la parcelle route
                params =  {"INPUT": coucheParcelles, "PREDICATE": [3], "INTERSECT": coucheRoute, "METHOD": 3}
                processing.run("qgis:selectbylocation", params)

                parcelleRoute = self.creerCouche(coucheParcelles.getSelectedFeatures(), "Polygon", coucheParcelles)

                parcPariteCouche = self.creerCouche(parcParite, "Polygon", coucheParcelles)

                # Sélection des parcelles qui touchent la route sans parité
                params =  {"INPUT":parcelleRoute, "PREDICATE": [3], "INTERSECT": parcPariteCouche, "METHOD": 0}
                processing.run("qgis:selectbylocation", params)
                c = QgsFeature()
                    
                # Si la sélection n'est pas vide
                if parcelleRoute.selectedFeatureCount():

                    parcelleRoute.getSelectedFeatures().nextFeature(c)
                    parite = c['parite']

                    parcelleRoute.select([f.id() for f in parcelleRoute.getFeatures()]) # Sélection de tous les éléments
                    # Sélection des parcelles qui touchent la route mais pas les parcelles avec parité
                    params =  {"INPUT": parcelleRoute, "PREDICATE": [3], "INTERSECT": parcPariteCouche, "METHOD": 3}
                    processing.run("qgis:selectbylocation", params)

                    for parc in parcelleRoute.getSelectedFeatures():

                        # Sélection d'une parcelle qui touche la route et qui ne touche pas la parcelle avec le point adresse 
                        params = {"INPUT": coucheParcelles, "FIELD": "id", "VALUE": parc['id']}
                        processing.run("qgis:selectbyattribute", params)
                        parcelleACote = QgsFeature()
                        coucheParcelles.getSelectedFeatures().nextFeature(parcelleACote)

                        coucheParcelles.startEditing()

                        sensRue[parcelleACote["id"]] = int((parite+1)%2)
                        indexColonneParite = coucheParcelles.fields().indexFromName('parite')
                        coucheParcelles.changeAttributeValue(parcelleACote.id(), 8, int((parite+1)%2))
                        #feedback.pushInfo("____id: "+str(parcelleACote.id())+"___parite: "+str(int((parite+1)%2)))

                        coucheParcelles.commitChanges()

                        parcParite.append(parcelleACote)
                    
        adresseJointureParcelle.invertSelection()
        
        # Création des points restants pour les points adresse qui ne sont pas dans des parcelles avec bâtiment
        for s in adresseJointureParcelle.getSelectedFeatures():
            idPointDesserte += 1
            point = QgsFeature(pointDesserteFields)
            point.setAttributes([idPointDesserte, 0, s['fid'], 0, s[adresseNom[:10]], s['Num'], date, 'C'])
            point.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(s.geometry().asPoint())))
            pointsRestants.append(point)  ########a verifier 
        
        indexSpatialLocalisation = QgsSpatialIndex(sourceCanalisation.getFeatures(), flags=QgsSpatialIndex.FlagStoreFeatureGeometries)

        avancementAlgo += 10
        feedback.setProgress(avancementAlgo)
        feedback.pushInfo("Les premiers branchement ont été créé")

        # Sélection des parcelles avec bâtiment
        params =  {"INPUT": coucheParcelles, "PREDICATE": [0], "INTERSECT": batiment, "METHOD": 0}
        processing.run("qgis:selectbylocation", params)

        indexSpatialParcelle = QgsSpatialIndex(coucheParcelles.getSelectedFeatures(), flags=QgsSpatialIndex.FlagStoreFeatureGeometries)

        nouveauxPointsDesserte = []

        parcelleIds = []
        parcelleIdsNew = []

        for p in pointsDesserte:
            parcelleIds.append(p['parcelle_id'])

        for point in pointsRestants:
            
            jp = 0
            #jc = 0
            plusProcheIdParcelle = indexSpatialParcelle.nearestNeighbor(point.geometry())[0]
            plusProcheIdCanalisation = indexSpatialLocalisation.nearestNeighbor(point.geometry().asPoint(), 1)[0]

            caracParcelle2, pointSurParcelle = self.trouverVoisinParcelle(point, plusProcheIdParcelle, parcelleData)
            caracCanalisation2, pointSurLigne = self.trouverVoisinCanalisation(point, plusProcheIdCanalisation, sourceCanalisation)
            """
            ###verifier si la canalisation la plus proche est la bonne grace a la rue de la couche canalisation et la rue dans la couche point
            feedback.pushInfo(point['adresse complète'].lower())
            listeMot = caracCanalisation2['rue'].lower().split(' ') 
            if '(' in caracCanalisation2['rue']:
                nomRue = " ".join(listeMot[1:len(listeMot)-1])
            else:
                nomRue = " ".join(listeMot[1:])

            while nomRue not in point['adresse complète'].lower():
                jc += 1
                plusProcheIdCanalisation = indexSpatialLocalisation.nearestNeighbor(point.geometry().asPoint(), jc+1)[jc]
                caracCanalisation2, pointSurLigne = self.trouverVoisinCanalisation(point, plusProcheIdCanalisation, sourceCanalisation)             
                listeMot = caracCanalisation2['rue'].lower().split(' ') 
                if '(' in caracCanalisation2['rue']:
                    nomRue = " ".join(listeMot[1:len(listeMot)-1])
                else:
                    nomRue = " ".join(listeMot[1:])
                feedback.pushInfo(nomRue)
            """
            parite = caracParcelle2['parite']
            # Check de la parité de la parcelle
            while parite is not None and parite != point["Num"]%2: 
                jp += 1
                plusProcheIdParcelle = indexSpatialParcelle.nearestNeighbor(point.geometry(), jp+1)[jp]
                caracParcelle2, pointSurParcelle = self.trouverVoisinParcelle(point, plusProcheIdParcelle, parcelleData)             
                parite = caracParcelle2['parite']

            parcId = caracParcelle2.id()
            
            branchement = QgsFeature(branchementFields)
            pointDesserte = QgsFeature(pointDesserteFields)

            # x1 et y1 resteront fixes, ce sont les coordonnées du point du branchement partant de la canalisation
            x1, y1 = pointSurLigne[0], pointSurLigne[1]
            # Modification des coordonnées afin de prolonger les branchement d'un facteur k 
            iterator = coucheParcelles.getFeatures(QgsFeatureRequest().setFilterFid(plusProcheIdParcelle))
            feature = next(iterator)
            #x2, y2 = pointSurParcelle[0], pointSurParcelle[1]
            #geometrie = QgsGeometry.fromPointXY(QgsPointXY(x2, y2))
            geometrie, x1, y1, x2, y2 = self.testerIntersection(caracParcelle2, caracCanalisation2, x1, pointSurParcelle[0], y1, pointSurParcelle[1])
            adresse2 = self.creerCouche(pointsDesserte + nouveauxPointsDesserte, "Point", pointDesserteFields)

            # Sélection des points sur la parcelle s'il y en a
            params =  {"INPUT": adresse2, "FIELD": "parcelle_id", "VALUE": parcId, "METHOD": 0}
            processing.run("qgis:selectbyattribute", params)
            pointSurParcelle = QgsFeature()
            adresse2.getSelectedFeatures().nextFeature(pointSurParcelle)

            # Sélection du point traité
            params =  {"INPUT": adresse2, "FIELD": "adresse_id", "VALUE": point['adresse_id'], "METHOD": 0}
            processing.run("qgis:selectbyattribute", params)
            pointRestant = QgsFeature()
            adresse2.getSelectedFeatures().nextFeature(pointRestant)

            nbPoints = 0
            listePoint = []
            n = 0

            # Check si le point est un point multiple
            for liste in pointsDouble:
                if point['adresse_id'] in liste:
                    listePoint = liste
                    for i, valeur in enumerate(listePoint):
                        if point['adresse_id'] == valeur:
                            n = i
                    nbPoints = len(liste)
                    
            """
            try:
                if CreateurBranchementAlgorithm.calculerDistanceEucl(p.geometry().asPoint(), parcelleACote.geometry().asPoint()) < 0.1: # les points sont au même endroit, la même adresse est donc dans le fichier client plusieurs fois, il y a plusieurs branchements sur la parcelle
                    ### on decale un peu le point
                    pente = (y2 - y1)/(x2 - x1)
                    x2 += 1
                    y2 += 1
                elif p['parcelle_id'] == parcId: # si le pointDesserte est sur la meme parcelle qu'un autre point, on compare le branchment de l'ancien point de desserte et du nouveau, on garde le plus petit   
            """ 

            modif = True
            # Tant que le point desserte ou le branchement associé ne respectent pas une des condition, on change de parcelle
            while modif:
                modif = False
                branchementPossible = QgsFeature(branchementFields)
                branchementPossible.setGeometry(QgsGeometry.fromPolyline([QgsPoint(x1, y1), QgsPoint(x2, y2)]))

                coucheBranchementPossible = self.creerCouche([branchementPossible], "LineString", branchementFields)
                
                branchementsCopie = []
                
                # Création d'une copie de la couche branchement
                branchementsCopie = branchements
                coucheBranchement = self.creerCouche(branchementsCopie, "LineString", branchementFields)
                
                # Sélection des branchements qui coupent le branchement qu'on souhaite créer
                params =  {"INPUT": coucheBranchement, "PREDICATE": [0], "INTERSECT": coucheBranchementPossible, "METHOD": 0}
                processing.run("qgis:selectbylocation", params)

                f = QgsFeature()

                #feedback.pushInfo("_____coucheBranchement.selectedFeatureCount(): "+str(coucheBranchement.selectedFeatureCount()))
                # Condition de non croisement des branchements
                if coucheBranchement.selectedFeatureCount() > 0:
                    #feedback.pushInfo("____branchement croise")
                    branchementCroise = QgsFeature()
                    for feat in coucheBranchement.getSelectedFeatures():
                        if feat['id'] != branchementPossible['id']: # On veut un branchement qui n'est pas branchementPossible (le branchement qu'on test)
                            branchementCroise = feat # branchement qui croise branchementPossible
                    #coucheBranchement.getSelectedFeatures().nextFeature(br)

                    coucheBranchementCroise = self.creerCouche([branchementCroise], "LineString", branchementFields)

                    processing.run("qgis:selectbylocation", {"INPUT": adresse2, "PREDICATE": [0], "INTERSECT": coucheBranchementCroise, "METHOD": 0})

                    pt = QgsFeature() # point du branchement qui croise le branchement que l'on test
                    for feat in adresse2.getSelectedFeatures(): # adresse2 n'est pas une couche d'adresses mais bien de points desserte, elle contient les points qui sont sur la même parcelle que le branchement
                        pt = feat
                    #adresse2.getSelectedFeatures().nextFeature(pt)
                    # Cas où l'ancien branchement est plus petit que le nouveau branchement
                    if branchementCroise.geometry().length() < branchementPossible.geometry().length() and jp < coucheParcelles.selectedFeatureCount()-1:
                        modif = True
                        jp += 1
                        plusProcheIdParcelle = indexSpatialParcelle.nearestNeighbor(point.geometry(), jp+1)[jp]
                        caracParcelle2, pointSurParcelle = self.trouverVoisinParcelle(point, plusProcheIdParcelle, parcelleData)
                        parcId = caracParcelle2.id()

                        # Modification des coordonnées afin de prolonger les branchement d'un facteur k
                        iterator = coucheParcelles.getFeatures(QgsFeatureRequest().setFilterFid(plusProcheIdParcelle))
                        feature = next(iterator)
                        geometrie, x1, y1, x2, y2 = self.testerIntersection(caracParcelle2, caracCanalisation2, x1, pointSurParcelle[0], y1, pointSurParcelle[1])

                        branchementPossible = QgsFeature(branchementFields)
                        branchementPossible.setGeometry(QgsGeometry.fromPolyline([QgsPoint(x1, y1), QgsPoint(x2, y2)]))

                        coucheBranchementPossible = self.creerCouche([branchementPossible], "LineString", branchementFields)

                        params =  {"INPUT": coucheBranchement, "PREDICATE": [0], "INTERSECT": coucheBranchementPossible, "METHOD": 0}
                        processing.run("qgis:selectbylocation", params)
                    # Cas où il y a plusieurs points sur la parcelle
                    elif adresse2.selectedFeatureCount() > 1:# or jp == parcelle.selectedFeatureCount()-1:
                        #feedback.pushInfo("______remove"+str(jp))
                        if len(nouveauxPointsDesserte):
                            for elt in nouveauxPointsDesserte: ### creer fct de delete
                                if elt['id'] == pt['id']:
                                    nouveauxPointsDesserte.remove(elt)
                                    parcelleIdsNew.remove(parcId)
                                    pointsRestants.append(elt)
                        if len(branchements):
                            for elt in branchements:
                                if elt['parcelle_id'] == branchementCroise['parcelle_id']:
                                    #feedback.pushInfo("______remove branchement")
                                    branchements.remove(elt)
                    else:
                        jp = 0
                                        
                #feedback.pushInfo("_____nb de point deja sur la parcelle "+ str(parcId) +": "+str(parcelleIds.count(parcId) + parcelleIdsNew.count(parcId)))
                #feedback.pushInfo("______nb adresses: "+str(nbPoints))
                ########certains points ne passe pas ici et sont afficher autre part alors qu'ils devraient etre decallés
                # Condition d'unicité de point de desserte par parcelle
                if parcelleIds.count(parcId) + parcelleIdsNew.count(parcId) != 0:
                    
                    if parcelleIds.count(parcId) + parcelleIdsNew.count(parcId) > nbPoints:
                        
                        modif = True
                        if parcId in parcelleIdsNew: # cas où le point fait partie des points placés après
                                    
                            pointDesserteVector = self.creerCouche(nouveauxPointsDesserte, "Point", pointDesserteFields)

                            branchementVector = self.creerCouche(branchements, "LineString", branchementFields)

                            processing.run("qgis:selectbyexpression", {'INPUT': pointDesserteVector, 'EXPRESSION': "\"parcelle_id\" = "+str(parcId), 'METHOD': 0})
                            processing.run("qgis:selectbyexpression", {'INPUT': branchementVector, 'EXPRESSION': "\"parcelle_id\" = "+str(parcId), 'METHOD': 0})

                            pt, br = QgsFeature(), QgsFeature()
                            pointDesserteVector.getSelectedFeatures().nextFeature(pt)
                            branchementVector.getSelectedFeatures().nextFeature(br)
                            
                            # On compare les longueurs des branchements, on considère que le plus petit est le bon
                            if br.geometry().length() < QgsGeometry.fromPolylineXY([QgsPointXY(x1, y1), QgsPointXY(x2, y2)]).length(): # cas où le branchement déjà présent est plus petit
                                modif = True
                                jp += 1
                                
                                plusProcheIdParcelle = indexSpatialParcelle.nearestNeighbor(point.geometry(), jp+1)[jp]
                                caracParcelle2, pointSurParcelle = self.trouverVoisinParcelle(point, plusProcheIdParcelle, parcelleData)
                                parcId = caracParcelle2.id()

                                # Modification des coordonnées afin de prolonger les branchement d'un facteur k
                                iterator = coucheParcelles.getFeatures(QgsFeatureRequest().setFilterFid(plusProcheIdParcelle))
                                feature = next(iterator)
                                geometrie, x1, y1, x2, y2 = self.testerIntersection(caracParcelle2, caracCanalisation2, x1, pointSurParcelle[0], y1, pointSurParcelle[1])

                            else: # cas où le nouveau branchement est le plus petit
                                for elt in nouveauxPointsDesserte: ### creer fct de delete
                                    if elt['adresse_id'] == pt['fid']:
                                        nouveauxPointsDesserte.remove(elt)
                                        parcelleIdsNew.remove(parcId)
                                        pointsRestants.append(elt)
                                for elt in branchements:
                                    if elt['id'] == br['id']:
                                        branchements.remove(elt)                                

                        elif parcId in parcelleIds: # cas où le point qui est sur la même parcelle où l'on souhaite placer notre nouveau point fait partie des points placés au début qui étaient déjà sur des parcelles habités
                            modif = True
                            jp += 1
                        
                            plusProcheIdParcelle = indexSpatialParcelle.nearestNeighbor(point.geometry(), jp+1)[jp]
                            caracParcelle2, pointSurParcelle = self.trouverVoisinParcelle(point, plusProcheIdParcelle, parcelleData)
                            parcId = caracParcelle2.id()

                            # Modification des coordonnées afin de prolonger les branchement d'un facteur k
                            iterator = coucheParcelles.getFeatures(QgsFeatureRequest().setFilterFid(plusProcheIdParcelle))
                            feature = next(iterator)
                            geometrie, x1, y1, x2, y2 = self.testerIntersection(caracParcelle2, caracCanalisation2, x1, pointSurParcelle[0], y1, pointSurParcelle[1])

                        parite = caracParcelle2['parite']
                        # Vérification de la parité
                        if parite is not None and parite != point["Num"]%2:
                            modif = True
                            jp += 1
                            plusProcheIdParcelle = indexSpatialParcelle.nearestNeighbor(point.geometry(), jp+1)[jp]
                            caracParcelle2, pointSurParcelle = self.trouverVoisinParcelle(point, plusProcheIdParcelle, parcelleData)
                            parcId = caracParcelle2.id()

                            # Modification des coordonnées afin de prolonger les branchement d'un facteur k
                            iterator = coucheParcelles.getFeatures(QgsFeatureRequest().setFilterFid(plusProcheIdParcelle))
                            feature = next(iterator)
                            geometrie, x1, y1, x2, y2 = self.testerIntersection(caracParcelle2, caracCanalisation2, x1, pointSurParcelle[0], y1, pointSurParcelle[1])
                    elif nbPoints > 0: # cas où plusieurs points sont superposés, il faut les décaler légèrement
                        #feedback.pushInfo("______decalage")
                        if n%2:
                            decalage = (math.ceil(n/2))/5
                        else:
                            decalage = -(n/2)/5
                        w = (y2-y1)**2+(x2-x1)**2-(x2-x1-decalage)**2
                        if w < 0:
                            w = -w
                        y2 = sqrt(w) + y1
                        x2 -= decalage
                        geometrie = QgsGeometry.fromPointXY(QgsPointXY(x2, y2))
                        modif = False
                
                parite = caracParcelle2['parite']
                # Condition de respect de la parité
                if parite is not None and parite != point["Num"]%2 and modif:
                    #feedback.pushInfo("____parité")
                    jp += 1
                    plusProcheIdParcelle = indexSpatialParcelle.nearestNeighbor(point.geometry(), jp+1)[jp]
                    caracParcelle2, pointSurParcelle = self.trouverVoisinParcelle(point, plusProcheIdParcelle, parcelleData)
                    parcId = caracParcelle2.id()

                    # Modification des coordonnées afin de prolonger les branchement d'un facteur k
                    iterator = coucheParcelles.getFeatures(QgsFeatureRequest().setFilterFid(plusProcheIdParcelle))
                    feature = next(iterator)
                    geometrie, x1, y1, x2, y2 = self.testerIntersection(caracParcelle2, caracCanalisation2, x1, pointSurParcelle[0], y1, pointSurParcelle[1])
            #feedback.pushInfo("___"+str(parcId))
            pointDesserte.setGeometry(geometrie)
            pointDesserte.setAttributes([idPointDesserte, parcId, point['id'], caracCanalisation2['id'], point['Adresse complète'], point['Num'], date, 'C'])
            nouveauxPointsDesserte.append(pointDesserte)
            idPointDesserte += 1
            parcelleIdsNew.append(parcId)
            #feedback.pushInfo("_____nb de point deja sur la parcelle "+ str(parcId) +": "+str(parcelleIds.count(parcId) + parcelleIdsNew.count(parcId)))

            # Création des branchements
            branchements, idBranchement = self.ajouterBranchement(branchementFields, branchements, idBranchement,  parcId, x1, y1, x2, y2, date)

        # Création des couches de points desserte et de branchements
        for pointDesserte in pointsDesserte:
            sinkPointDesserte.addFeature(pointDesserte, QgsFeatureSink.FastInsert)

        for pointDesserte in nouveauxPointsDesserte:
            sinkPointDesserte.addFeature(pointDesserte, QgsFeatureSink.FastInsert)        

        for branchement in branchements:
            sinkBranchement.addFeature(branchement, QgsFeatureSink.FastInsert)

        ###
        for pointTest in pointsTest:
            sinkPointDesserte.addFeature(pointTest, QgsFeatureSink.FastInsert)
        ###

        coucheParcelles.removeSelection()
        
        avancementAlgo = self.actualiserProgress(feedback, avancementAlgo, 10, "")
        
        """
        # Update the progress bar
        feedback.setProgress(int(c * total))"""
        
        # Return the results of the algorithm. In this case our only result is
        # the feature sink which contains the processed features, but some
        # algorithms may return multiple feature sinks, calculated numeric
        # statistics, etc. These should all be included in the returned
        # dictionary, with keys matching the feature corresponding parameter
        # or output names.

        #os.remove(nomFichier)

        return {self.BRANCHEMENT: destIdBranchement,
        self.POINTDESSERTE: destIdPointDesserte}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Createur Branchement'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'AEP'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return CreateurBranchementAlgorithm()