# -*- coding: utf-8 -*-

"""
/***************************************************************************
 CreateurBranchement
                                 A QGIS plugin
 Ce plugin créé des branchements sur une réseau AEP
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-06-10
        copyright            : (C) 2022 by Runeo
        email                : omranedoo@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Runeo'
__date__ = '2022-06-10'
__copyright__ = '(C) 2022 by Runeo'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from math import sqrt
from datetime import datetime
import math
import csv
from typing import Optional
from xml.dom.minidom import TypeInfo
from qgis.utils import iface
from qgis.PyQt.QtCore import QCoreApplication, QVariant
from qgis.core import (QgsProcessing,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterField,
                       QgsFields,
                       QgsField,
                       QgsWkbTypes,
                       QgsVectorLayer,
                       QgsProject,
                       QgsProcessingContext,
                       QgsGeometry,
                       QgsPointXY,
                       QgsFeature,
                       QgsFeatureSink,
                       QgsSpatialIndex,
                       QgsFeatureRequest)


class CreateurBranchementAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    ADRESSE = 'ADRESSE'
    CODEPOSTAL = 'CODEPOSTAL'
    CANALISATION = 'CANALISATION'
    BRANCHEMENT = 'BRANCHEMENT'
    POINTDESSERTE = 'POINTDESSERTE'
    

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # Couche des adresses de la table clientèle
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.ADRESSE,
                self.tr('Couche d\'entrée de vannes'),
                [QgsProcessing.TypeVectorPoint]
            )
        )

        # Nom de la colonne rescencant les code postaux dans la table clientèle
        self.addParameter(
            QgsProcessingParameterField(
                self.CODEPOSTAL,
                self.tr('Champ Code Postal'),
                parentLayerParameterName = self.ADRESSE,
                allowMultiple=False,
                optional=False,
            )
        )

        # Nom de la colonne rescencant les canalisations du réseau sans les branchements
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.CANALISATION,
                self.tr('Canalisations'),
                [QgsProcessing.TypeVectorLine]
            )
        )

        # Couche des branchements possibles 
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.BRANCHEMENT,
                self.tr('Couche de sortie de branchements')
            )
        )

        # Couche des points de desserte
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.POINTDESSERTE,
                self.tr('Couche des points de dessertes')
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """"
        Here is where the processing itself takes place.
        """
        #Création des champs des couches de sortie
        pointDesserteFields = QgsFields()
        pointDesserteFields.append(QgsField('id', QVariant.Int, '', 254, 0))
        pointDesserteFields.append(QgsField('nom voie', QVariant.String, '', 254, 0))
        pointDesserteFields.append(QgsField('adresse complète', QVariant.String, '', 254, 0))
        pointDesserteFields.append(QgsField('date', QVariant.String, '', 254, 0))
        pointDesserteFields.append(QgsField('prec_clas', QVariant.Char, '', 254, 0))

        branchementFields = QgsFields()
        branchementFields.append(QgsField('id', QVariant.Int, '', 254, 0))
        branchementFields.append(QgsField('date', QVariant.String, '', 254, 0))
        branchementFields.append(QgsField('prec_clas', QVariant.Char, '', 254, 0))

        # Retrieve the feature source and sink. The 'dest_id' variable is used
        # to uniquely identify the feature sink, and must be included in the
        # dictionary returned by the processAlgorithm function.
        sourceAdresse = self.parameterAsSource(parameters, self.ADRESSE, context)
        sourceCodePostal = self.parameterAsSource(parameters, self.CODEPOSTAL, context)
        sourceCanalisation = self.parameterAsSource(parameters, self.CANALISATION, context)

        (sinkPointDesserte, destIdPointDesserte) = self.parameterAsSink(parameters, self.POINTDESSERTE,
                context, pointDesserteFields, QgsWkbTypes.Point, sourceAdresse.sourceCrs())
        (sinkBranchement, destIdBranchement) = self.parameterAsSink(parameters, self.BRANCHEMENT,
                context, branchementFields, QgsWkbTypes.LineString, sourceAdresse.sourceCrs())

        # Compute the number of steps to display within the progress bar and
        # get features from source
        total = 100.0 / sourceAdresse.featureCount() if sourceAdresse.featureCount() else 0
        date = str(datetime.now())

        # Filtrage de la BD PARCELLAIRE en fonction des communes de la zone étudiée
        root = QgsProject.instance().layerTreeRoot()
        #groupe = root.addGroup("BD PARCELLAIRE")

        codesPostaux = []
        for adr in sourceAdresse.getFeatures():
            if str(adr['CODE POSTAL']) not in codesPostaux:
                codesPostaux.append(str(adr['CODE POSTAL']))

        codesInsee = []

        with open('D:\omran\Runeo\data\correspondance-code-insee-code-postal-reunion.csv', mode ='r') as file:   
            # reading the CSV file
            csvFile = csv.DictReader(file)
             
            for code in codesPostaux:
                for lines in csvFile:
                    if str(lines["Code Postal"]) == code and str(lines["Code INSEE"]) not in codesInsee:
                        codesInsee.append(str(lines["Code INSEE"]))

        """
        feedback.pushInfo(lines["Commune"])
            for code in codePostaux:
                if lines['Code INSEE'] == code:
                    codeInsee.append(lines["Code INSEE"])
        """

        file = 'D:\\omran\\IGN\\BDPARCELLAIRE_1-2_VECTEUR_SHP_RGR92UTM40S_D974_2018-09-06\\BDPARCELLAIRE\\1_DONNEES_LIVRAISON_2018-09-00112\\BDPV_1-2_SHP_RGR92UTM40S_D974\\'
        listeCoucheParcel = ['COMMUNE', 'BATIMENT', 'PARCELLE']#, 'DIVCAD', 'LOCALISANT']
        for nomCouche in listeCoucheParcel:
            couche = QgsVectorLayer(file+nomCouche+".SHP", nomCouche, 'ogr')
            context.temporaryLayerStore().addMapLayer(couche)
            context.addLayerToLoadOnCompletion(couche.id(), QgsProcessingContext.LayerDetails('Couche', context.project(), 'Couche'))
            #groupe.insertChildNode(0, QgsLayerTreeLayer(couche))
            #groupe.addLayer(couche)
            if nomCouche == "COMMUNE":
                feats = [feat for feat in couche.getFeatures()]

                commune = QgsVectorLayer("Polygon?crs=epsg:2975", "duplicated_layer", "memory")

                communeData = commune.dataProvider()
                attributs = couche.dataProvider().fields().toList()
                communeData.addAttributes(attributs)
                commune.updateFields()
                communeData.addFeatures(feats)

                context.temporaryLayerStore().removeMapLayers([couche])

                context.temporaryLayerStore().addMapLayer(commune)
                context.addLayerToLoadOnCompletion(commune.id(), QgsProcessingContext.LayerDetails('COMMUNE', context.project(), 'COMMUNE'))

                ids = []
                for caracteristique in commune.getFeatures():
                    if caracteristique['CODE_INSEE'] not in codesInsee:
                        ids.append(caracteristique.id())

                commune.dataProvider().deleteFeatures(ids)
                commune.triggerRepaint()
            elif nomCouche == 'PARCELLE':
                feats = [feat for feat in couche.getFeatures()]

                parcelle = QgsVectorLayer("Polygon?crs=epsg:2975", "duplicated_layer", "memory")

                parcelleData = parcelle.dataProvider()
                attributs = couche.dataProvider().fields().toList()
                parcelleData.addAttributes(attributs)
                parcelle.updateFields()
                parcelleData.addFeatures(feats)

                context.temporaryLayerStore().removeMapLayers([couche])

                context.temporaryLayerStore().addMapLayer(parcelle)
                context.addLayerToLoadOnCompletion(parcelle.id(), QgsProcessingContext.LayerDetails('PARCELLE', context.project(), 'PARCELLE'))
            
                ids = []
                for caracteristique in parcelle.getFeatures():
                    if '97'+caracteristique['CODE_COM'] not in codesInsee:
                        ids.append(caracteristique.id())

                parcelle.dataProvider().deleteFeatures(ids)
                parcelle.triggerRepaint()
            elif nomCouche == 'BATIMENT':
                feats = [feat for feat in couche.getFeatures()]

                batiment = QgsVectorLayer("Polygon?crs=epsg:2975", "duplicated_layer", "memory")

                batimentData = batiment.dataProvider()
                attributs = couche.dataProvider().fields().toList()
                batimentData.addAttributes(attributs)
                batiment.updateFields()
                batimentData.addFeatures(feats)

                context.temporaryLayerStore().removeMapLayers([couche])

                context.temporaryLayerStore().addMapLayer(batiment)
                context.addLayerToLoadOnCompletion(batiment.id(), QgsProcessingContext.LayerDetails('BATIMENT', context.project(), 'BATIMENT'))

        batimentIds = []
        
        for a in communeData.getFeatures():
            for b in batimentData.getFeatures():
                if a.geometry().intersects(b.geometry()):
                    pass
                else:
                    batimentIds.append(b.id())

        batiment.dataProvider().deleteFeatures(batimentIds)
        batiment.triggerRepaint()

        pointsDesserte = []
        pointsRestants = []

        for a in sourceAdresse.getFeatures():
            for b in parcelleData.getFeatures():
                if a.geometry().intersects(b.geometry()):
                    for c in batimentData.getFeatures():
                        if b.geometry().intersects(c.geometry()):
                            pointDesserte = QgsFeature(pointDesserteFields)
                            pointDesserte.setAttributes([a['fid'], a['Adresse complète'], a.id(), date, 'C'])
                            pointDesserte.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(a.geometry().asPoint())))
                            sinkPointDesserte.addFeature(pointDesserte, QgsFeatureSink.FastInsert)
                            pointsDesserte.append(pointDesserte)
                            break
                        else:
                            point = QgsFeature(pointDesserteFields)
                            point.setAttributes([a['fid'], a['NOM VOIE'], a['Adresse complète'], date, 'C'])
                            point.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(a.geometry().asPoint())))
                            pointsRestants.append(point)
        
        indexSaptial = QgsSpatialIndex()
        carac = QgsFeature()
        fit = sourceCanalisation.getFeatures()

        while fit.nextFeature(carac):
            indexSaptial.insertFeature(carac)

        branchements = []

        for i, point in enumerate(pointsDesserte):
            plusProcheId = indexSaptial.nearestNeighbor(point.geometry().asPoint(), 1)[0]
            fit2 = sourceCanalisation.getFeatures(QgsFeatureRequest().setFilterFid(plusProcheId))
            carac2 = QgsFeature()
            fit2.nextFeature(carac2)

            pointSurLigne = carac2.geometry().closestSegmentWithContext(QgsPointXY(point.geometry().asPoint()))[1]

            branchement = QgsFeature(branchementFields)
            branchement.setGeometry(QgsGeometry.fromPolylineXY([QgsPointXY(point.geometry().asPoint()), QgsPointXY(pointSurLigne[0], pointSurLigne[1])]))
            branchement.setAttributes([i, date, 'C'])
            branchements.append(branchement)
            sinkBranchement.addFeature(branchement, QgsFeatureSink.FastInsert)


        indexSaptialParcelle = QgsSpatialIndex()
        caracParcelle = QgsFeature()
        fitParcelle = parcelleData.getFeatures()

        while fitParcelle.nextFeature(caracParcelle):
            indexSaptialParcelle.insertFeature(caracParcelle)

        indexSaptialCanalisation = QgsSpatialIndex()
        caracCanalisation = QgsFeature()
        fitCanalisation = sourceCanalisation.getFeatures()

        while fitCanalisation.nextFeature(caracCanalisation):
            indexSaptialCanalisation.insertFeature(caracCanalisation)

        feedback.pushInfo(str(len(pointsRestants)))

        for i, point in enumerate(pointsRestants):
            plusProcheIdParcelle = indexSaptialParcelle.nearestNeighbor(point.geometry().asPoint(), 1)[0]
            fitParcelle2 = parcelleData.getFeatures(QgsFeatureRequest().setFilterFid(plusProcheIdParcelle))
            caracParcelle2 = QgsFeature()
            fitParcelle2.nextFeature(caracParcelle2)

            pointSurParcelle = caracParcelle2.geometry().closestSegmentWithContext(QgsPointXY(point.geometry().asPoint()))[1]

            plusProcheIdCanalisation = indexSaptialCanalisation.nearestNeighbor(point.geometry().asPoint(), 1)[0]
            fitCanalisation2 = sourceCanalisation.getFeatures(QgsFeatureRequest().setFilterFid(plusProcheIdCanalisation))
            caracCanalisation2 = QgsFeature()
            fitCanalisation2.nextFeature(caracCanalisation2)

            pointSurLigne = caracCanalisation2.geometry().closestSegmentWithContext(QgsPointXY(point.geometry().asPoint()))[1]

            branchement = QgsFeature(branchementFields)
            branchement.setGeometry(QgsGeometry.fromPolylineXY([QgsPointXY(pointSurLigne[0], pointSurLigne[1]), QgsPointXY(pointSurParcelle[0], pointSurParcelle[1])]))
            branchement.setAttributes([len(pointsDesserte)+i, date, 'C'])
            branchements.append(branchement)
            sinkBranchement.addFeature(branchement, QgsFeatureSink.FastInsert)


        """
        clusters = {}

        for point in pointsRestants:
            feedback.pushInfo(point['Adresse complète'])
            if clusters[point['NOM VOIE']]:
                clusters[point['NOM VOIE']].append(point)
            else:
                clusters[point['NOM VOIE']] = [point]
        """

        """
        # Update the progress bar
        feedback.setProgress(int(c * total))"""
        
        # Return the results of the algorithm. In this case our only result is
        # the feature sink which contains the processed features, but some
        # algorithms may return multiple feature sinks, calculated numeric
        # statistics, etc. These should all be included in the returned
        # dictionary, with keys matching the feature corresponding parameter
        # or output names.
        return {self.BRANCHEMENT: destIdBranchement,
                self.POINTDESSERTE: destIdPointDesserte}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Createur Branchement'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'AEP'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return CreateurBranchementAlgorithm()

def calculerDistanceEucl(p1, p2):
    return math.sqrt((p1.x()-p2.x())**2+(p1.y()-p2.y())**2)