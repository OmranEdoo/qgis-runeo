# -*- coding: utf-8 -*-

"""
/***************************************************************************
 CreateurBranchement
                                 A QGIS plugin
 Ce plugin créé des branchements sur une réseau AEP
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-06-10
        copyright            : (C) 2022 by Runeo
        email                : omranedoo@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Runeo'
__date__ = '2022-06-10'
__copyright__ = '(C) 2022 by Runeo'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from asyncio.windows_events import NULL
import os
from math import sqrt
from datetime import datetime
import math
import csv
from socket import NI_NUMERICHOST
from typing import Optional
from xml.dom.minidom import TypeInfo
#import GeoCoding
from qgis.utils import *
from qgis.PyQt.QtCore import QCoreApplication, QVariant
from qgis.core import (QgsProcessing,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterField,
                       QgsFields,
                       QgsField,
                       QgsWkbTypes,
                       QgsVectorLayer,
                       QgsProject,
                       QgsProcessingContext,
                       QgsGeometry,
                       QgsPointXY,
                       QgsFeature,
                       QgsFeatureSink,
                       QgsSpatialIndex,
                       QgsFeatureRequest,
                       QgsExpression,
                       QgsCoordinateReferenceSystem,
                       QgsVectorFileWriter)
from processing.core.Processing import Processing
Processing.initialize()
from processing.tools import *
import processing


class CreateurBranchementAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    ADRESSE = 'ADRESSE'
    CODEPOSTAL = 'CODEPOSTAL'
    CHAMPADRESSE = 'CHAMPADRESSE'
    CANALISATION = 'CANALISATION'
    BRANCHEMENT = 'BRANCHEMENT'
    POINTDESSERTE = 'POINTDESSERTE'

    def actualiserProgress(self, feedback, avancementAlgo, points, message):
        avancementAlgo += points
        feedback.setProgress(avancementAlgo)
        if message:
            feedback.pushInfo(message)

        return avancementAlgo

    def trouverVoisinParcelle(self, point, plusProcheIdParcelle, parcelleData):

            fitParcelle2 = parcelleData.getFeatures(QgsFeatureRequest().setFilterFid(plusProcheIdParcelle))
            caracParcelle2 = QgsFeature()
            fitParcelle2.nextFeature(caracParcelle2)

            pointSurParcelle = caracParcelle2.geometry().closestSegmentWithContext(QgsPointXY(point.geometry().asPoint()))[1]

            return caracParcelle2, pointSurParcelle

    def trouverVoisinCanalisation(self, point, plusProcheIdCanalisation, sourceCanalisation):

            fitCanalisation2 = sourceCanalisation.getFeatures(QgsFeatureRequest().setFilterFid(plusProcheIdCanalisation))
            caracCanalisation2 = QgsFeature()
            fitCanalisation2.nextFeature(caracCanalisation2)

            pointSurCanalisation = caracCanalisation2.geometry().closestSegmentWithContext(QgsPointXY(point.geometry().asPoint()))[1]

            return caracCanalisation2, pointSurCanalisation

    def allongerBranchement(self, x1, x2Init, y1, y2Init, coefficient, mode):
        x2 = x2Init 
        y2 = y2Init
        pente = (y2Init - y1)/(x2Init - x1)
        if mode:
            if x1 != x2Init:
                    if x2Init > x1:
                        x2 += pente*coefficient
                    else:
                        x2 -= pente*coefficient
            if y1 != y2Init:
                if y2Init > y1:
                    y2 += pente*coefficient
                else:
                    y2 -= pente*coefficient
        else:
            if x1 != x2Init:
                if x2Init < x1:
                    x2 += 2*pente*coefficient
                else:
                    x2 -= 2*pente*coefficient
            if y1 != y2Init:
                if y2Init < y1:
                    y2 += 2*pente*coefficient
                else:
                    y2 -= 2*pente*coefficient
        return x2, y2

    def testerIntersection(self, caracParcelle2, x1, x2Init, y1, y2Init, k):
        x2, y2 = self.allongerBranchement(x1, x2Init, y1, y2Init, k, True)

        geometrie = QgsGeometry.fromPointXY(QgsPointXY(x2, y2))
        if not geometrie.intersects(caracParcelle2.geometry()):
            x2, y2 = self.allongerBranchement(x1, x2Init, y1, y2Init, k, False)
            geometrie = QgsGeometry.fromPointXY(QgsPointXY(x2, y2))
            if not geometrie.intersects(caracParcelle2.geometry()):
                x2, y2 = x2Init, y2Init
                geometrie = QgsGeometry.fromPointXY(QgsPointXY(x2, y2))
        
        return geometrie, x2, y2
    
    def ajouterBranchement(self, branchementFields, branchements, idBranchement, idParcelle, x1, y1, x2, y2, date):
        branchement = QgsFeature(branchementFields)
        geometrie = QgsGeometry.fromPolylineXY([QgsPointXY(x1, y1), QgsPointXY(x2, y2)])
        branchement.setGeometry(geometrie)
        branchement.setAttributes([idBranchement, idParcelle, date, 'C', geometrie.length()])
        branchements.append(branchement)
        idBranchement += 1

        return branchements, idBranchement

    def creerCouche(self, features, type, source):
        feats = [feat for feat in features]
        couche = QgsVectorLayer(type+"?crs=epsg:2975", "duplicated_layer", "memory")
        coucheData = couche.dataProvider()
        if isinstance(source, QgsVectorLayer):
            attributs = source.dataProvider().fields().toList()
        elif isinstance(source, QgsFields):
            attributs = source.toList()
        else:
            attributs = source.fields().toList()
        coucheData.addAttributes(attributs)
        couche.updateFields()
        coucheData.addFeatures(feats)
        return couche

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # Couche des adresses de la table clientèle
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.ADRESSE,
                self.tr('Couche d\'entrée des adresses'),
                [QgsProcessing.TypeVectorPoint]
            )
        )

        # Nom de la colonne rescencant les code postaux dans la table clientèle
        self.addParameter(
            QgsProcessingParameterField(
                self.CODEPOSTAL,
                self.tr('Champ Code Postal'),
                parentLayerParameterName = self.ADRESSE,
                allowMultiple=False,
                optional=False,
            )
        )

        # Nom de la colonne donnant l'adresse complète
        self.addParameter(
            QgsProcessingParameterField(
                self.CHAMPADRESSE,
                self.tr('Champ adresse'),
                parentLayerParameterName = self.ADRESSE,
                allowMultiple=False,
                optional=False,
            )
        )

        # Nom de la colonne rescencant les canalisations du réseau sans les branchements
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.CANALISATION,
                self.tr('Couche d\'entrée des canalisations'),
                [QgsProcessing.TypeVectorLine]
            )
        )

        # Couche des branchements possibles 
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.BRANCHEMENT,
                self.tr('Couche de sortie de branchements')
            )
        )

        # Couche des points de desserte
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.POINTDESSERTE,
                self.tr('Couche des points de dessertes')
            )
        )


    def processAlgorithm(self, parameters, context, feedback):
        """"
        Here is where the processing itself takes place.
        """
        avancementAlgo = 0
        self.actualiserProgress(feedback, avancementAlgo, 1, "Début de l'algorithme...")

        #Création des champs des couches de sortie
        pointDesserteFields = QgsFields()
        pointDesserteFields.append(QgsField('id', QVariant.Int, '', 254, 0))
        pointDesserteFields.append(QgsField('parcelle_id', QVariant.Int, '', 254, 0))
        pointDesserteFields.append(QgsField('adresse_id', QVariant.Int, '', 254, 0))
        pointDesserteFields.append(QgsField('adresse complète', QVariant.String, '', 254, 0))
        pointDesserteFields.append(QgsField('date', QVariant.String, '', 254, 0))
        pointDesserteFields.append(QgsField('prec_clas', QVariant.Char, '', 254, 0))

        branchementFields = QgsFields()
        branchementFields.append(QgsField('id', QVariant.Int, '', 254, 0))
        branchementFields.append(QgsField('parcelle_id', QVariant.Int, '', 254, 0))
        branchementFields.append(QgsField('date', QVariant.String, '', 254, 0))
        branchementFields.append(QgsField('prec_clas', QVariant.Char, '', 254, 0))
        branchementFields.append(QgsField('longueur', QVariant.Double, '', 254, 0))

        idPointDesserte = 0
        idBranchement = 0

        # Retrieve the feature source and sink. The 'dest_id' variable is used
        # to uniquely identify the feature sink, and must be included in the
        # dictionary returned by the processAlgorithm function.
        sourceAdresse = self.parameterAsSource(parameters, self.ADRESSE, context)
        codePostalNom = self.parameterAsFields(parameters, self.CODEPOSTAL, context)[0]
        adresseNom = self.parameterAsFields(parameters, self.CHAMPADRESSE, context)[0]
        sourceCanalisation = self.parameterAsSource(parameters, self.CANALISATION, context)

        (sinkPointDesserte, destIdPointDesserte) = self.parameterAsSink(parameters, self.POINTDESSERTE,
                context, pointDesserteFields, QgsWkbTypes.Point, sourceAdresse.sourceCrs())
        (sinkBranchement, destIdBranchement) = self.parameterAsSink(parameters, self.BRANCHEMENT,
                context, branchementFields, QgsWkbTypes.LineString, sourceAdresse.sourceCrs())

        # Pour le feedback de la progression de l'algorithme
        total = 100.0 / sourceAdresse.featureCount() if sourceAdresse.featureCount() else 0
        date = str(datetime.now())

        # Filtrage de la BD PARCELLAIRE en fonction des communes de la zone étudiée
        root = QgsProject.instance().layerTreeRoot()
        #groupe = root.addGroup("BD PARCELLAIRE")

        # Création de la liste des codes postaux des communes présentes dans le fichier clientèle
        codesPostaux = [] 
        for adr in sourceAdresse.getFeatures():
            if str(adr[codePostalNom]) not in codesPostaux:
                codesPostaux.append(str(adr[codePostalNom]))

        codesInsee = []

        # Conversion des codes postaux en codes INSEE car certains fichiers de la BD PARCELLAIRE ne contiennent que le champ code INSEE
        with open('D:\omran\Runeo\data\correspondance-code-insee-code-postal-reunion.csv', mode ='r') as file:   
            # reading the CSV file
            csvFile = csv.DictReader(file)
             
            for code in codesPostaux:
                for lines in csvFile:
                    if str(lines["Code Postal"]) == code and str(lines["Code INSEE"]) not in codesInsee:
                        codesInsee.append(str(lines["Code INSEE"]))
        
        avancementAlgo = self.actualiserProgress(feedback, avancementAlgo, 2, "Création des couches de la BD PARCELLAIRE...")

        # Création de copie des couches de la BD PARCELLAIRE
        file = 'D:\\omran\\IGN\\BDPARCELLAIRE_1-2_VECTEUR_SHP_RGR92UTM40S_D974_2018-09-06\\BDPARCELLAIRE\\1_DONNEES_LIVRAISON_2018-09-00112\\BDPV_1-2_SHP_RGR92UTM40S_D974\\'
        listeCoucheParcel = ['COMMUNE', 'BATIMENT', 'PARCELLE']#, 'DIVCAD', 'LOCALISANT'] # Nom des couches que l'on souhaite afficher
                
        for nomCouche in listeCoucheParcel:
            couche = QgsVectorLayer(file+nomCouche+".SHP", nomCouche, 'ogr')
            context.temporaryLayerStore().addMapLayer(couche)
            context.addLayerToLoadOnCompletion(couche.id(), QgsProcessingContext.LayerDetails('Couche', context.project(), 'Couche'))
            #groupe.insertChildNode(0, QgsLayerTreeLayer(couche))
            #groupe.addLayer(couche)
            if nomCouche == "COMMUNE":

                avancementAlgo = self.actualiserProgress(feedback, avancementAlgo, 2, "Création de 'COMMUNE'...")

                commune = self.creerCouche(couche.getFeatures(), "Polygon", couche)

                context.temporaryLayerStore().removeMapLayers([couche])

                context.temporaryLayerStore().addMapLayer(commune)
                context.addLayerToLoadOnCompletion(commune.id(), QgsProcessingContext.LayerDetails('COMMUNE', context.project(), 'COMMUNE'))

                # Suppression des communes inutiles
                ids = []
                for caracteristique in commune.getFeatures():
                    if caracteristique['CODE_INSEE'] not in codesInsee:
                        ids.append(caracteristique.id())

                commune.dataProvider().deleteFeatures(ids)
                commune.triggerRepaint()
            
            elif nomCouche == 'PARCELLE':

                avancementAlgo = self.actualiserProgress(feedback, avancementAlgo, 2, "Création de 'PARCELLE'...")

                parcelle = self.creerCouche(couche.getFeatures(), "Polygon", couche)
                parcelleData = parcelle.dataProvider()
                parcelleData.addAttributes([QgsField('parite', QVariant.Int, '', 254, 0), QgsField('id', QVariant.Int, '', 254, 0)])
                parcelle.updateFields()

                context.temporaryLayerStore().removeMapLayers([couche])

                context.temporaryLayerStore().addMapLayer(parcelle)
                context.addLayerToLoadOnCompletion(parcelle.id(), QgsProcessingContext.LayerDetails('PARCELLE', context.project(), 'PARCELLE'))
                
                # Suppression des parcelles qui ne sont pas dans les communes de la zone
                ids = []
                for caracteristique in parcelle.getFeatures():
                    if '97'+caracteristique['CODE_COM'] not in codesInsee:
                        ids.append(caracteristique.id())

                parcelle.dataProvider().deleteFeatures(ids)
                parcelle.triggerRepaint()
            elif nomCouche == 'BATIMENT':

                avancementAlgo = self.actualiserProgress(feedback, avancementAlgo, 2, "Création de 'BATIMENT'...")

                batiment = self.creerCouche(couche.getFeatures(), "Polygon", couche)

                context.temporaryLayerStore().removeMapLayers([couche])

                context.temporaryLayerStore().addMapLayer(batiment)
                context.addLayerToLoadOnCompletion(batiment.id(), QgsProcessingContext.LayerDetails('BATIMENT', context.project(), 'BATIMENT'))

        avancementAlgo = self.actualiserProgress(feedback, avancementAlgo, 2, "Suppression des bâtiments hors-zones...")

        batimentIds = []
        # Suppression des batiments qui ne sont pas dans les communes de la zone étudiée
        
        params =  {"INPUT": batiment, "PREDICATE": [0], "INTERSECT": commune, "METHOD": 0}
        processing.run("qgis:selectbylocation", params)

        batiment.invertSelection()

        #☻compter nb elt pr feedb

        for f in batiment.getSelectedFeatures():
            batimentIds.append(f.id())
            avancementAlgo = self.actualiserProgress(feedback, avancementAlgo, 0.0001, "")

        batiment.dataProvider().deleteFeatures(batimentIds)
        batiment.triggerRepaint()

        parcelleId = 0

        parcelle.startEditing()

        # création d'un champ id sur la couche parcelle
        for p in parcelle.getFeatures():
            parcelleId += 1
            parcelle.changeAttributeValue(p.id(), 9, parcelleId)

        parcelle.commitChanges()

        pointsDesserte = []
        pointsRestants = []

        feats = sourceAdresse.getFeatures()
        adresse = self.creerCouche(feats, "Point", sourceAdresse)

        avancementAlgo = self.actualiserProgress(feedback, avancementAlgo, 2, "Jointure de la couche d'adresses et de la couche des parcelles...")
        
        adresseJointure = self.creerCouche(feats, "Point", sourceAdresse)

        nomFichier = 'D:/omran/Runeo/data/adresse2.shp'

        if os.path.exists(nomFichier):
            os.remove(nomFichier)

        QgsVectorFileWriter.writeAsVectorFormat(adresseJointure, nomFichier, 'UTF-8', QgsCoordinateReferenceSystem('EPSG:2975'), 'ESRI Shapefile')

        # adresseJointure contient les adresses avec les numéros des parcelles sur lesquelles elles se trouvent
        params = {"INPUT": adresse, "JOIN": parcelle, "PREDICATE": [0], "JOIN_FIELDS": ['id'], "METHOD": 0, "PREFIX": "p_", "OUTPUT": nomFichier}
        processing.run("native:joinattributesbylocation", params)

        adresseJointure = QgsVectorLayer(nomFichier, "adresse", "ogr")

        avancementAlgo = self.actualiserProgress(feedback, avancementAlgo, 2, "Sélection des parcelles qui ont un bâtiment...")

        # les parcelles sur lesquelles se trouvent un bâtiment son tsélectionnées
        params =  {"INPUT": parcelle, "PREDICATE": [0], "INTERSECT": batiment, "METHOD": 0}
        processing.run("qgis:selectbylocation", params)

        # parcelleBat contient les parcelles avec des bâtiments 
        parcelleBat = self.creerCouche(parcelle.getSelectedFeatures(), "Polygon", parcelle)        

        # On sélectionne les adresses qui sont dans des parcelles avec un bâtiment à l'intérieur
        params =  {"INPUT": adresseJointure, "PREDICATE": [0], "INTERSECT": parcelleBat, "METHOD": 0}
        processing.run("qgis:selectbylocation", params)

        avancementAlgo = self.actualiserProgress(feedback, avancementAlgo, 2, "Sélection des adresses qui sont dans des parcelles avec un bâtiment et changement en points de desserte...")

        sensRue = {}

        spIndexCanal = QgsSpatialIndex()
        feat = QgsFeature()
        fit = sourceCanalisation.getFeatures()

        while fit.nextFeature(feat):
            spIndexCanal.insertFeature(feat)

        pointsTest = []###

        ###on regarde les parcelles qui intersectes les parcelles avec les points à l'intérieur, on regarde l'id de la parcelle qui n'a pas de bât, ensuite dans le reste des parcelles qui intersects on regarde celles qui intersectes à la fois la parcelle et celle qui n'a pas de bat, on attribut alors par pair ou impair en fonction 
        # Itération sur les adresses qui sont sur des parcelles avec des bâtiments
        for s in adresseJointure.getSelectedFeatures():

            nouveauS = True
            aCreer = True
            change = False

            while nouveauS:

                nearestIds = spIndexCanal.nearestNeighbor(s.geometry().asPoint(), 1)
                featureId = nearestIds[0]
                fit2 = sourceCanalisation.getFeatures(QgsFeatureRequest().setFilterFid(featureId))
                canalisationProche = QgsFeature()
                fit2.nextFeature(canalisationProche)

                pointSurLigne = canalisationProche.geometry().closestSegmentWithContext(QgsPointXY(s.geometry().asPoint()))[1]

                fitP = parcelleData.getFeatures(QgsFeatureRequest().setFilterFid(p.id()))
                parcProche = QgsFeature()
                fitP.nextFeature(parcProche)

                pointSurP = parcProche.geometry().closestSegmentWithContext(pointSurLigne)[1]
                
                avancementAlgo = self.actualiserProgress(feedback, avancementAlgo, 0.1, "")
                
                # Sélection de la parcelle sur laquelle le point adresse se situe
                params = {"INPUT": parcelle, "FIELD": "id", "VALUE": s['p_id']}
                processing.run("qgis:selectbyattribute", params)
                p = QgsFeature()
                parcelle.getSelectedFeatures().nextFeature(p)

                if aCreer:
                    parcelle.startEditing()
                    parcelle.changeAttributeValue(p.id(), 8, int(s["Num"]%2))
                    parcelle.commitChanges()

                    pointDesserte = QgsFeature(pointDesserteFields)
                    pointDesserte.setAttributes([idPointDesserte, p.id(), s['fid'], s[adresseNom[:10]], date, 'C']) # lors de la création de la nouvelle couche, les noms des champs sont tronqués à la dixième lettre je ne sais pas pourquoi
                    pointDesserte.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(s.geometry().asPoint())))
                    pointsDesserte.append(pointDesserte)
                    idPointDesserte += 1

                # Création de la couche contenant uniquement la parcelle en question
                pCouche = self.creerCouche([p], "Polygon", parcelle)  

                # Sélection des parcelles qui touchent la parcelle possédant
                params =  {"INPUT": parcelle, "PREDICATE": [4], "INTERSECT": pCouche, "METHOD": 0}
                processing.run("qgis:selectbylocation", params)    

                # Déselection des parcelles ayant déjà une parité attribuée
                params =  {"INPUT": parcelle, "OPERATOR": 1, "FIELD": "parite", "VALUE": 0, "METHOD": 2}
                processing.run("qgis:selectbyattribute", params)   
                params =  {"INPUT": parcelle, "OPERATOR": 1, "FIELD": "parite", "VALUE": 1, "METHOD": 2}
                processing.run("qgis:selectbyattribute", params)   

                autre = []

                route = 0

                # On différencie la route des parcelles avec bâtiment
                for parc in parcelle.getSelectedFeatures():
                    # Création de la couche contenant uniquement une parcelle qui touche
                    parcToucheCouche = self.creerCouche([parc], "Polygon", parcelle)
                    
                    # Sélection des parcelles qui ont un bâtiment
                    params =  {"INPUT": parcToucheCouche, "PREDICATE": [0], "INTERSECT": batiment, "METHOD": 0}
                    processing.run("qgis:selectbylocation", params)

                    parcTouche = QgsFeature()

                    if parcToucheCouche.getSelectedFeatures().nextFeature(parcTouche):
                        autre.append(parc)
                    else:
                        if parcTouche.geometry().intersects(canalisationProche.geometry()):
                        #if parcToucheCouche.getSelectedFeatures().nextFeature(parcTouche):
                            route = parc
                            ###probleme car parfois plusieurs routes
                            ### qd ya pas de canalisation qui croise route, mettre dans autre car sinon ca coupe la chaine de transmission
                        else:
                            autre.append(parc)######la c chelou ca march up

                if route:

                    coucheRoute = self.creerCouche([route], "Polygon", parcelle)

                    coucheAutre = self.creerCouche(autre, "Polygon", parcelle)
                        
                    params =  {"INPUT": coucheAutre, "PREDICATE": [4], "INTERSECT": coucheRoute, "METHOD": 1}
                    processing.run("qgis:selectbylocation", params)

                    for parc in coucheAutre.getSelectedFeatures():

                        # Sélection de la parcelle qui touche la route et qui touche la parcelle avec le point adresse 
                        params = {"INPUT": parcelle, "FIELD": "id", "VALUE": parc['id']}
                        processing.run("qgis:selectbyattribute", params)
                        p2 = QgsFeature()
                        parcelle.getSelectedFeatures().nextFeature(p2)

                        centroid = p2.geometry().centroid()

                        nearestIds = spIndexCanal.nearestNeighbor(centroid.asPoint(), 1)
                        featureId = nearestIds[0]
                        fit2 = sourceCanalisation.getFeatures(QgsFeatureRequest().setFilterFid(featureId))
                        canalisationProche2 = QgsFeature()
                        fit2.nextFeature(canalisationProche2)

                        if canalisationProche.id() == canalisationProche2.id():

                            pointSurLigne2 = canalisationProche2.geometry().closestSegmentWithContext(QgsPointXY(centroid.asPoint()))[1]

                            pointSurP2 = p2.geometry().closestSegmentWithContext(pointSurLigne2)[1]

                            x1 = pointSurLigne.x()
                            y1 = pointSurLigne.y()
                            x2 = pointSurLigne2.x()
                            y2 = pointSurLigne2.y()
                            x0 = pointSurP.x()
                            y0 = pointSurP.y()
                            newX = pointSurP2.x()
                            newY = pointSurP2.y()
                            newPoint = QgsPointXY(newX, newY)

                            penteCanal = (y2 - y1)/(x2 - x1)
                            penteParc = (newY - y0)/(newX - x0)

                            feedback.pushInfo(str(penteCanal))
                            feedback.pushInfo(str(penteParc))

                            if abs(penteCanal - penteParc) < 90:#comparer pentes

                                feedback.pushInfo("_____parité ecrite:")
                                aCreer = False

                                    ###on prend le centroid de la parcelle, 
                                    # on prend le point la canalisation la plus proche de ce centroide, 
                                    # on vérifie si c la meme
                                    # on prend le point de la canalisation le plus proche
                                    # on prend la point de la parcelle le plus proche de ce dernier point
                                    # on calcul la pente et la distance entre les deux pts les plus proches
                                    # on transpose au point qui est dans la parcelle avec le bat, on obtient alors un autre point
                                    # on verifie si ce point est bien dans la parcelle,
                                    # si cest le cas on attribue la parité, et on passe au suivant

                                parcelle.startEditing()

                                sensRue[p["id"]] = int(s["Num"]%2)
                                parcelle.changeAttributeValue(p2.id(), 8, int(s["Num"]%2))

                                feedback.pushInfo(str(s["Num"]%2))

                                parcelle.commitChanges()

                                change = True
                                num = s['Num']
                                s = QgsFeature(adresseJointure.fields())
                                s['p_id'] = p2['id']
                                s['Num'] = num
                                feedback.pushInfo(str(s['p_id']))
                                s.setGeometry(QgsGeometry.fromPointXY(newPoint))
                if not change:
                    nouveauS = False
    
        adresseJointure.invertSelection()
        
        for s in adresseJointure.getSelectedFeatures():
            point = QgsFeature(pointDesserteFields)
            point.setAttributes([idPointDesserte, 0, s['fid'], s[adresseNom[:10]], date, 'C'])
            point.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(s.geometry().asPoint())))
            pointsRestants.append(point)   
        
        indexSaptialCanalisation = QgsSpatialIndex(sourceCanalisation.getFeatures(), flags=QgsSpatialIndex.FlagStoreFeatureGeometries)

        branchements = []

        # Création des points de desserte pour les adresses qu'on a stocker précédement
        for point in pointsDesserte:
            plusProcheId = indexSaptialCanalisation.nearestNeighbor(point.geometry())[0]
            fitCanalisation2 = sourceCanalisation.getFeatures(QgsFeatureRequest().setFilterFid(plusProcheId))
            caracCanalisation2 = QgsFeature()
            fitCanalisation2.nextFeature(caracCanalisation2)

            pointSurLigne = caracCanalisation2.geometry().closestSegmentWithContext(QgsPointXY(point.geometry().asPoint()))[1]
            
            # selection par loc des parcelles qui coupe les branchements, s'il y a + de 2 parcelle coupées on refait

            """

            carac = QgsFeature()
            couche = QgsVectorLayer()
            attributs = 
            geometrie = QgsGeometry.fromPolylineXY([QgsPointXY(point.geometry().asPoint()), QgsPointXY(pointSurLigne[0], pointSurLigne[1])])
            params =  {"INPUT": , "PREDICATE": [0], "INTERSECT": parcelle.getSelectedFeatures(), "METHOD": 0}
            processing.run("qgis:selectbylocation", params)
            """
            branchements, idBranchement = self.ajouterBranchement(branchementFields, branchements, idBranchement, point['parcelle_id'], QgsPointXY(point.geometry().asPoint()).x(), QgsPointXY(point.geometry().asPoint()).y(), pointSurLigne[0], pointSurLigne[1], date)

        avancementAlgo += 10
        feedback.setProgress(avancementAlgo)
        feedback.pushInfo("Les premiers branchement ont été créé")

        params =  {"INPUT": parcelle, "PREDICATE": [0], "INTERSECT": batiment, "METHOD": 0}
        processing.run("qgis:selectbylocation", params)

        indexSaptialParcelle = QgsSpatialIndex(parcelle.getSelectedFeatures(), flags=QgsSpatialIndex.FlagStoreFeatureGeometries)

        nouveauxPointsDesserte = []

        for point in pointsRestants:
            
            j = 0
            plusProcheIdParcelle = indexSaptialParcelle.nearestNeighbor(point.geometry())[0]
            plusProcheIdCanalisation = indexSaptialCanalisation.nearestNeighbor(point.geometry().asPoint(), 1)[0]

            caracParcelle2, pointSurParcelle = self.trouverVoisinParcelle(point, plusProcheIdParcelle, parcelleData)
            caracCanalisation2, pointSurLigne = self.trouverVoisinCanalisation(point, plusProcheIdCanalisation, sourceCanalisation)

            for cle in sensRue:
                if caracParcelle2.id() == cle:
                    if sensRue[cle] != point["Num"]%2:
                        j +=1
                        plusProcheIdParcelle = indexSaptialParcelle.nearestNeighbor(point.geometry(), j+1)[j]
                        caracParcelle2, pointSurParcelle = self.trouverVoisinParcelle(point, plusProcheIdParcelle, parcelleData)
            

            branchement = QgsFeature(branchementFields)
            pointDesserte = QgsFeature(pointDesserteFields)

            x1, y1 = pointSurLigne[0], pointSurLigne[1]
            x2Init, y2Init = pointSurParcelle[0], pointSurParcelle[1]
            k = 2
            # Modification des coordonnées afin de prolonger les branchement d'un facteur k
            geometrie, x2, y2 = self.testerIntersection(caracParcelle2, x1, x2Init, y1, y2Init, k)

            parcelleIds = []
            parcelleIdsNew = []

            for p in nouveauxPointsDesserte:
                parcelleIdsNew.append(p['parcelle_id'])
            for p in pointsDesserte:
                parcelleIds.append(p['parcelle_id'])

            adresse = self.creerCouche(pointsDesserte + nouveauxPointsDesserte, "Point", pointDesserteFields)

            params =  {"INPUT": adresse, "FIELD": "parcelle_id", "VALUE": caracParcelle2.id(), "METHOD": 0}
            processing.run("qgis:selectbyattribute", params)
            p = QgsFeature()
            adresse.getSelectedFeatures().nextFeature(p)

            params =  {"INPUT": adresse, "FIELD": "adresse_id", "VALUE": point['adresse_id'], "METHOD": 0}
            processing.run("qgis:selectbyattribute", params)
            p2 = QgsFeature()
            adresse.getSelectedFeatures().nextFeature(p2)

            try:
                if p.geometry().asPoint() == p2.geometry().asPoint():
                    feedback.pushInfo("points au même endroit")
                else:# si le pointDesserte est sur la meme parcelle qu'un autre point, on compare le branchment de l'ancien point de desserte et du nouveau, on garde le plus petit
                    while caracParcelle2.id() in parcelleIds or caracParcelle2.id() in parcelleIdsNew:
                        
                        j += 1

                        if caracParcelle2.id() in parcelleIdsNew: # on différencie les cas où le point qui est sur la même parcelle où l'on souhaite placer notre nouveau point fait partie des points placés au début qui étaient déjà sur des parcelles habités ou s'il fait partie des points placés après
                            
                            pointDesserteVector = self.creerCouche(nouveauxPointsDesserte, "Point", pointDesserteFields)
                            
                            branchementVector = self.creerCouche(branchements, "Line", branchementFields)

                            processing.run("qgis:selectbyexpression", {'INPUT': pointDesserteVector, 'EXPRESSION': "\"parcelle_id\" = "+str(caracParcelle2.id()), 'METHOD': 0})
                            processing.run("qgis:selectbyexpression", {'INPUT': branchementVector, 'EXPRESSION': "\"parcelle_id\" = "+str(caracParcelle2.id()), 'METHOD': 0})

                            p, b = QgsFeature(), QgsFeature()
                            pointDesserteVector.getSelectedFeatures().nextFeature(p)
                            branchementVector.getSelectedFeatures().nextFeature(b)
                            
                            # On compare les longueurs des branchements, on considère que le plus petit est le bon
                            if b.geometry().length() < QgsGeometry.fromPolylineXY([QgsPointXY(x1, y1), QgsPointXY(x2, y2)]).length():
                                plusProcheIdParcelle = indexSaptialParcelle.nearestNeighbor(point.geometry(), j+1)[j]
                                caracParcelle2, pointSurParcelle = self.trouverVoisinParcelle(point, plusProcheIdParcelle, parcelleData)

                                x2Init, y2Init = pointSurParcelle[0], pointSurParcelle[1]
                                # Modification des coordonnées afin de prolonger les branchement d'un facteur k
                                geometrie, x2, y2 = self.testerIntersection(caracParcelle2, x1, x2Init, y1, y2Init, k)
                            else:
                                nouveauxPointsDesserte.remove(p)
                                branchements.remove(b)
                                pointsRestants.append(p)
                                break
                        else:
                            plusProcheIdParcelle = indexSaptialParcelle.nearestNeighbor(point.geometry(), j+1)[j]
                            caracParcelle2, pointSurParcelle = self.trouverVoisinParcelle(point, plusProcheIdParcelle, parcelleData)

                            x2Init, y2Init = pointSurParcelle[0], pointSurParcelle[1]
                            # Modification des coordonnées afin de prolonger les branchement d'un facteur k
                            geometrie, x2, y2 = self.testerIntersection(caracParcelle2, x1, x2Init, y1, y2Init, k)
            except: # Cas où il n'y a qu'un seul point sur la parcelle
                pass

            pointDesserte.setGeometry(geometrie)
            pointDesserte.setAttributes([idPointDesserte, caracParcelle2.id(), point['id'], point['Adresse complète'], date, 'C'])
            nouveauxPointsDesserte.append(pointDesserte)
            idPointDesserte += 1

            # Création des branchements
            branchements, idBranchement = self.ajouterBranchement(branchementFields, branchements, idBranchement,  pointDesserte['parcelle_id'], x1, y1, x2, y2, date)

        # Création des couches de points desserte et de branchements
        for pointDesserte in pointsDesserte:
            sinkPointDesserte.addFeature(pointDesserte, QgsFeatureSink.FastInsert)

        for pointDesserte in nouveauxPointsDesserte:
            sinkPointDesserte.addFeature(pointDesserte, QgsFeatureSink.FastInsert)        

        for branchement in branchements:
            sinkBranchement.addFeature(branchement, QgsFeatureSink.FastInsert)

        ###
        for pointTest in pointsTest:
            sinkPointDesserte.addFeature(pointTest, QgsFeatureSink.FastInsert)
        ###
        
        avancementAlgo = self.actualiserProgress(feedback, avancementAlgo, 10, "")
        
        """
        # Update the progress bar
        feedback.setProgress(int(c * total))"""
        
        # Return the results of the algorithm. In this case our only result is
        # the feature sink which contains the processed features, but some
        # algorithms may return multiple feature sinks, calculated numeric
        # statistics, etc. These should all be included in the returned
        # dictionary, with keys matching the feature corresponding parameter
        # or output names.

        #os.remove(nomFichier)

        return {self.BRANCHEMENT: destIdBranchement,
        self.POINTDESSERTE: destIdPointDesserte}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Createur Branchement'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'AEP'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return CreateurBranchementAlgorithm()

    def calculerDistanceEucl(p1, p2):
        return math.sqrt((p1.x()-p2.x())**2+(p1.y()-p2.y())**2)