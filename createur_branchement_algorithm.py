# -*- coding: utf-8 -*-

"""
/***************************************************************************
 CreateurBranchement
                                 A QGIS plugin
 Ce plugin créé des branchements sur une réseau AEP
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-06-10
        copyright            : (C) 2022 by Runeo
        email                : omranedoo@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Runeo'
__date__ = '2022-06-10'
__copyright__ = '(C) 2022 by Runeo'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from asyncio.windows_events import NULL
from email import feedparser
import os
from math import sqrt
from datetime import datetime
import math
import csv
from socket import NI_NUMERICHOST
from typing import Optional
from xml.dom.minidom import TypeInfo
#import GeoCoding
from qgis.utils import *
from qgis.PyQt.QtCore import QCoreApplication, QVariant
from qgis.core import (QgsProcessing,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterField,
                       QgsFields,
                       QgsField,
                       QgsWkbTypes,
                       QgsVectorLayer,
                       QgsProject,
                       QgsProcessingContext,
                       QgsGeometry,
                       QgsPointXY,
                       QgsFeature,
                       QgsFeatureSink,
                       QgsSpatialIndex,
                       QgsFeatureRequest,
                       QgsExpression,
                       QgsCoordinateReferenceSystem,
                       QgsVectorFileWriter,
                       QgsLineString,
                       QgsPoint)
from processing.core.Processing import Processing
Processing.initialize()
from processing.tools import *
import processing


class CreateurBranchementAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    ADRESSE = 'ADRESSE'
    CODEPOSTAL = 'CODEPOSTAL'
    CHAMPADRESSE = 'CHAMPADRESSE'
    CANALISATION = 'CANALISATION'
    BRANCHEMENT = 'BRANCHEMENT'
    POINTDESSERTE = 'POINTDESSERTE'

    def actualiserProgress(self, feedback, avancementAlgo, points, message):
        avancementAlgo += points
        feedback.setProgress(avancementAlgo)
        if message:
            feedback.pushInfo(message)

        return avancementAlgo

    def trouverVoisinParcelle(self, point, plusProcheIdParcelle, parcelleData):

            fitParcelle2 = parcelleData.getFeatures(QgsFeatureRequest().setFilterFid(plusProcheIdParcelle))
            caracParcelle2 = QgsFeature()
            fitParcelle2.nextFeature(caracParcelle2)

            pointSurParcelle = caracParcelle2.geometry().closestSegmentWithContext(QgsPointXY(point.geometry().asPoint()))[1]

            return caracParcelle2, pointSurParcelle

    def trouverVoisinCanalisation(self, point, plusProcheIdCanalisation, sourceCanalisation):

            fitCanalisation2 = sourceCanalisation.getFeatures(QgsFeatureRequest().setFilterFid(plusProcheIdCanalisation))
            caracCanalisation2 = QgsFeature()
            fitCanalisation2.nextFeature(caracCanalisation2)

            pointSurCanalisation = caracCanalisation2.geometry().closestSegmentWithContext(QgsPointXY(point.geometry().asPoint()))[1]

            return caracCanalisation2, pointSurCanalisation

    def allongerBranchement(self, x1, x2Init, y1, y2Init, coefficient, mode):###enlever coefficient mettre constante
        x2 = x2Init 
        y2 = y2Init
        pente = (y2Init - y1)/(x2Init - x1)
        if mode:
            if x1 != x2Init:
                    if x2Init > x1:
                        x2 += pente*coefficient
                    else:
                        x2 -= pente*coefficient
            if y1 != y2Init:
                if y2Init > y1:
                    y2 += pente*coefficient
                else:
                    y2 -= pente*coefficient
        else:
            if x1 != x2Init:
                if x2Init < x1:
                    x2 += 2*pente*coefficient
                else:
                    x2 -= 2*pente*coefficient
            if y1 != y2Init:
                if y2Init < y1:
                    y2 += 2*pente*coefficient
                else:
                    y2 -= 2*pente*coefficient
        return x2, y2

    def testerIntersection(self, caracParcelle2, x1, x2Init, y1, y2Init, k):
        x2, y2 = self.allongerBranchement(x1, x2Init, y1, y2Init, k, True)

        geometrie = QgsGeometry.fromPointXY(QgsPointXY(x2, y2))
        if not geometrie.intersects(caracParcelle2.geometry()):
            x2, y2 = self.allongerBranchement(x1, x2Init, y1, y2Init, k, False)
            geometrie = QgsGeometry.fromPointXY(QgsPointXY(x2, y2))
            if not geometrie.intersects(caracParcelle2.geometry()):
                x2, y2 = x2Init, y2Init
                geometrie = QgsGeometry.fromPointXY(QgsPointXY(x2, y2))
        
        return geometrie, x2, y2
    
    def ajouterBranchement(self, branchementFields, branchements, idBranchement, idParcelle, x1, y1, x2, y2, date):
        branchement = QgsFeature(branchementFields)
        geometrie = QgsGeometry.fromPolyline([QgsPoint(x1, y1), QgsPoint(x2, y2)])
        branchement.setGeometry(geometrie)
        branchement.setAttributes([idBranchement, idParcelle, date, 'C', geometrie.length()])
        branchements.append(branchement)
        idBranchement += 1

        return branchements, idBranchement

    def creerCouche(self, features, type, source):
        couche = QgsVectorLayer(type+"?crs=epsg:2975", "duplicated_layer", "memory")
        if isinstance(source, QgsVectorLayer):
            attributs = source.dataProvider().fields().toList()
        elif isinstance(source, QgsFields):
            attributs = source.toList()
        else:
            attributs = source.fields().toList()
        couche.dataProvider().addAttributes(attributs)
        couche.updateFields()
        feats = [feat for feat in features]
        couche.dataProvider().addFeatures(feats)
        return couche

    @staticmethod
    def calculerDistanceEucl(p1, p2):
        return math.sqrt((p1.x()-p2.x())**2+(p1.y()-p2.y())**2)

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # Couche des adresses de la table clientèle
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.ADRESSE,
                self.tr('Couche d\'entrée des adresses'),
                [QgsProcessing.TypeVectorPoint]
            )
        )

        # Nom de la colonne rescencant les code postaux dans la table clientèle
        self.addParameter(
            QgsProcessingParameterField(
                self.CODEPOSTAL,
                self.tr('Champ Code Postal'),
                parentLayerParameterName = self.ADRESSE,
                allowMultiple=False,
                optional=False,
            )
        )

        # Nom de la colonne donnant l'adresse complète
        self.addParameter(
            QgsProcessingParameterField(
                self.CHAMPADRESSE,
                self.tr('Champ adresse'),
                parentLayerParameterName = self.ADRESSE,
                allowMultiple=False,
                optional=False,
            )
        )

        # Nom de la colonne rescencant les canalisations du réseau sans les branchements
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.CANALISATION,
                self.tr('Couche d\'entrée des canalisations'),
                [QgsProcessing.TypeVectorLine]
            )
        )

        # Couche des branchements possibles 
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.BRANCHEMENT,
                self.tr('Couche de sortie de branchements')
            )
        )

        # Couche des points de desserte
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.POINTDESSERTE,
                self.tr('Couche des points de dessertes')
            )
        )


    def processAlgorithm(self, parameters, context, feedback):
        """"
        Here is where the processing itself takes place.
        """
        avancementAlgo = 0
        self.actualiserProgress(feedback, avancementAlgo, 1, "Début de l'algorithme...")

        #Création des champs des couches de sortie
        pointDesserteFields = QgsFields()
        pointDesserteFields.append(QgsField('id', QVariant.Int, '', 254, 0))
        pointDesserteFields.append(QgsField('parcelle_id', QVariant.Int, '', 254, 0))
        pointDesserteFields.append(QgsField('adresse_id', QVariant.Int, '', 254, 0))
        pointDesserteFields.append(QgsField('adresse complète', QVariant.String, '', 254, 0))
        pointDesserteFields.append(QgsField('Num', QVariant.Int, '', 254, 0))
        pointDesserteFields.append(QgsField('date', QVariant.String, '', 254, 0))
        pointDesserteFields.append(QgsField('prec_clas', QVariant.Char, '', 254, 0))

        branchementFields = QgsFields()
        branchementFields.append(QgsField('id', QVariant.Int, '', 254, 0))
        branchementFields.append(QgsField('parcelle_id', QVariant.Int, '', 254, 0))
        branchementFields.append(QgsField('date', QVariant.String, '', 254, 0))
        branchementFields.append(QgsField('prec_clas', QVariant.Char, '', 254, 0))
        branchementFields.append(QgsField('longueur', QVariant.Double, '', 254, 0))

        idPointDesserte = 0
        idBranchement = 0

        # Retrieve the feature source and sink. The 'dest_id' variable is used
        # to uniquely identify the feature sink, and must be included in the
        # dictionary returned by the processAlgorithm function.
        sourceAdresse = self.parameterAsSource(parameters, self.ADRESSE, context)
        codePostalNom = self.parameterAsFields(parameters, self.CODEPOSTAL, context)[0]
        adresseNom = self.parameterAsFields(parameters, self.CHAMPADRESSE, context)[0]
        sourceCanalisation = self.parameterAsSource(parameters, self.CANALISATION, context)

        (sinkPointDesserte, destIdPointDesserte) = self.parameterAsSink(parameters, self.POINTDESSERTE,
                context, pointDesserteFields, QgsWkbTypes.Point, sourceAdresse.sourceCrs())
        (sinkBranchement, destIdBranchement) = self.parameterAsSink(parameters, self.BRANCHEMENT,
                context, branchementFields, QgsWkbTypes.LineString, sourceAdresse.sourceCrs())

        # Pour le feedback de la progression de l'algorithme
        total = 100.0 / sourceAdresse.featureCount() if sourceAdresse.featureCount() else 0
        date = str(datetime.now())

        # Filtrage de la BD PARCELLAIRE en fonction des communes de la zone étudiée
        root = QgsProject.instance().layerTreeRoot()
        #groupe = root.addGroup("BD PARCELLAIRE")

        # Création de la liste des codes postaux des communes présentes dans le fichier clientèle
        codesPostaux = [] 
        for adr in sourceAdresse.getFeatures():
            if str(adr[codePostalNom]) not in codesPostaux:
                codesPostaux.append(str(adr[codePostalNom]))

        codesInsee = []

        # Conversion des codes postaux en codes INSEE car certains fichiers de la BD PARCELLAIRE ne contiennent que le champ code INSEE
        with open('D:\omran\Runeo\data\correspondance-code-insee-code-postal-reunion.csv', mode ='r') as file:   
            # reading the CSV file
            csvFile = csv.DictReader(file)
             
            for code in codesPostaux:
                for lines in csvFile:
                    if str(lines["Code Postal"]) == code and str(lines["Code INSEE"]) not in codesInsee:
                        codesInsee.append(str(lines["Code INSEE"]))
        
        avancementAlgo = self.actualiserProgress(feedback, avancementAlgo, 2, "Création des couches de la BD PARCELLAIRE...")

        # Création de copie des couches de la BD PARCELLAIRE
        file = 'D:\\omran\\IGN\\BDPARCELLAIRE_1-2_VECTEUR_SHP_RGR92UTM40S_D974_2018-09-06\\BDPARCELLAIRE\\1_DONNEES_LIVRAISON_2018-09-00112\\BDPV_1-2_SHP_RGR92UTM40S_D974\\'
        listeCoucheParcel = ['COMMUNE', 'BATIMENT', 'PARCELLE']#, 'DIVCAD', 'LOCALISANT'] # Nom des couches que l'on souhaite afficher
                
        for nomCouche in listeCoucheParcel:
            couche = QgsVectorLayer(file+nomCouche+".SHP", nomCouche, 'ogr')
            context.temporaryLayerStore().addMapLayer(couche)
            context.addLayerToLoadOnCompletion(couche.id(), QgsProcessingContext.LayerDetails('Couche', context.project(), 'Couche'))
            #groupe.insertChildNode(0, QgsLayerTreeLayer(couche))
            #groupe.addLayer(couche)
            if nomCouche == "COMMUNE":

                avancementAlgo = self.actualiserProgress(feedback, avancementAlgo, 2, "Création de 'COMMUNE'...")

                commune = self.creerCouche(couche.getFeatures(), "Polygon", couche)

                context.temporaryLayerStore().removeMapLayers([couche])

                context.temporaryLayerStore().addMapLayer(commune)
                context.addLayerToLoadOnCompletion(commune.id(), QgsProcessingContext.LayerDetails('COMMUNE', context.project(), 'COMMUNE'))

                # Suppression des communes inutiles
                ids = []
                for caracteristique in commune.getFeatures():
                    if caracteristique['CODE_INSEE'] not in codesInsee:
                        ids.append(caracteristique.id())

                commune.dataProvider().deleteFeatures(ids)
                commune.triggerRepaint()
            
            elif nomCouche == 'PARCELLE':

                avancementAlgo = self.actualiserProgress(feedback, avancementAlgo, 2, "Création de 'PARCELLE'...")

                parcelle = self.creerCouche(couche.getFeatures(), "Polygon", couche)
                parcelleData = parcelle.dataProvider()
                parcelleData.addAttributes([QgsField('parite', QVariant.Int, '', 254, 0), QgsField('id', QVariant.Int, '', 254, 0)])
                parcelle.updateFields()

                context.temporaryLayerStore().removeMapLayers([couche])

                context.temporaryLayerStore().addMapLayer(parcelle)
                context.addLayerToLoadOnCompletion(parcelle.id(), QgsProcessingContext.LayerDetails('PARCELLE', context.project(), 'PARCELLE'))
                
                # Suppression des parcelles qui ne sont pas dans les communes de la zone
                ids = []
                for caracteristique in parcelle.getFeatures():
                    if '97'+caracteristique['CODE_COM'] not in codesInsee:
                        ids.append(caracteristique.id())

                parcelle.dataProvider().deleteFeatures(ids)
                parcelle.triggerRepaint()
            elif nomCouche == 'BATIMENT':

                avancementAlgo = self.actualiserProgress(feedback, avancementAlgo, 2, "Création de 'BATIMENT'...")

                batiment = self.creerCouche(couche.getFeatures(), "Polygon", couche)

                context.temporaryLayerStore().removeMapLayers([couche])

                context.temporaryLayerStore().addMapLayer(batiment)
                context.addLayerToLoadOnCompletion(batiment.id(), QgsProcessingContext.LayerDetails('BATIMENT', context.project(), 'BATIMENT'))

        avancementAlgo = self.actualiserProgress(feedback, avancementAlgo, 2, "Suppression des bâtiments hors-zones...")

        batimentIds = []
        # Suppression des batiments qui ne sont pas dans les communes de la zone étudiée
        
        params =  {"INPUT": batiment, "PREDICATE": [0], "INTERSECT": commune, "METHOD": 0}
        processing.run("qgis:selectbylocation", params)

        batiment.invertSelection()

        ###compter nb elt pr feedb

        for f in batiment.getSelectedFeatures():
            batimentIds.append(f.id())
            avancementAlgo = self.actualiserProgress(feedback, avancementAlgo, 0.0001, "")

        batiment.dataProvider().deleteFeatures(batimentIds)
        batiment.triggerRepaint()

        parcelleId = 0

        parcelle.startEditing()

        # création d'un champ id sur la couche parcelle
        for p in parcelle.getFeatures():
            parcelleId += 1
            parcelle.changeAttributeValue(p.id(), 9, parcelleId)

        parcelle.commitChanges()

        pointsDesserte = []
        pointsRestants = []

        feats = sourceAdresse.getFeatures()
        adresse = self.creerCouche(feats, "Point", sourceAdresse)

        pointsDouble = []

        # Recherche de points double
        for adr in adresse.getFeatures():
            params = {"INPUT": adresse, "FIELD": "Latitude", "VALUE": adr['Latitude']}
            processing.run("qgis:selectbyattribute", params)

            if adresse.selectedFeatureCount() > 1:
                pointsDouble.append([])
                for adrDouble in adresse.getSelectedFeatures():
                    pointsDouble[len(pointsDouble)-1].append(adrDouble['fid'])
                pointsDouble[len(pointsDouble)-1].append(0)

        avancementAlgo = self.actualiserProgress(feedback, avancementAlgo, 2, "jointure de la couche d'adresses et de la couche des parcelles...")
        
        adresseJointure = self.creerCouche(feats, "Point", sourceAdresse)

        nomFichier = 'D:/omran/Runeo/data/adresse3.shp'

        if os.path.exists(nomFichier):
            os.remove(nomFichier)

        QgsVectorFileWriter.writeAsVectorFormat(adresseJointure, nomFichier, 'UTF-8', QgsCoordinateReferenceSystem('EPSG:2975'), 'ESRI Shapefile')

        # adresseJointure contient les adresses avec les numéros des parcelles sur lesquelles elles se trouvent
        params = {"INPUT": adresse, "JOIN": parcelle, "PREDICATE": [0], "JOIN_FIELDS": ['id'], "METHOD": 0, "PREFIX": "p_", "OUTPUT": nomFichier}
        processing.run("native:joinattributesbylocation", params)

        adresseJointure = QgsVectorLayer(nomFichier, "adresse", "ogr")

        avancementAlgo = self.actualiserProgress(feedback, avancementAlgo, 2, "Sélection des parcelles qui ont un bâtiment...")

        # les parcelles sur lesquelles se trouvent un bâtiment son tsélectionnées
        params =  {"INPUT": parcelle, "PREDICATE": [0], "INTERSECT": batiment, "METHOD": 0}
        processing.run("qgis:selectbylocation", params)

        # parcelleBat contient les parcelles avec des bâtiments 
        parcelleBat = self.creerCouche(parcelle.getSelectedFeatures(), "Polygon", parcelle)        

        # On sélectionne les adresses qui sont dans des parcelles avec un bâtiment à l'intérieur
        params =  {"INPUT": adresseJointure, "PREDICATE": [0], "INTERSECT": parcelleBat, "METHOD": 0}
        processing.run("qgis:selectbylocation", params)

        avancementAlgo = self.actualiserProgress(feedback, avancementAlgo, 2, "Sélection des adresses qui sont dans des parcelles avec un bâtiment et changement en points de desserte...")

        sensRue = {}
        seuilPente = 2
        parcParite = []

        spIndexCanal = QgsSpatialIndex()
        feat = QgsFeature()
        fit = sourceCanalisation.getFeatures()

        while fit.nextFeature(feat):
            spIndexCanal.insertFeature(feat)

        pointsTest = []##

        # Itération sur les adresses qui sont sur des parcelles avec des bâtiments
        for s in adresseJointure.getSelectedFeatures():

            nouveauS = True
            aCreer = True

            while nouveauS:

                change = False

                nearestIds = spIndexCanal.nearestNeighbor(s.geometry().asPoint(), 1)
                featureId = nearestIds[0]
                fit2 = sourceCanalisation.getFeatures(QgsFeatureRequest().setFilterFid(featureId))
                canalisationProche = QgsFeature()
                fit2.nextFeature(canalisationProche)

                pointSurLigne = canalisationProche.geometry().closestSegmentWithContext(QgsPointXY(s.geometry().asPoint()))[1]

                fitP = parcelleData.getFeatures(QgsFeatureRequest().setFilterFid(p.id()))
                parcProche = QgsFeature()
                fitP.nextFeature(parcProche)

                pointSurP = parcProche.geometry().closestSegmentWithContext(pointSurLigne)[1]
                
                avancementAlgo = self.actualiserProgress(feedback, avancementAlgo, 0.1, "")
                
                # Sélection de la parcelle sur laquelle le point adresse se situe
                params = {"INPUT": parcelle, "FIELD": "id", "VALUE": s['p_id']}
                processing.run("qgis:selectbyattribute", params)
                p = QgsFeature()
                parcelle.getSelectedFeatures().nextFeature(p)

                if aCreer:
                    parcelle.startEditing()
                    parcelle.changeAttributeValue(p.id(), 8, int(s["Num"]%2))
                    parcelle.commitChanges()

                    pointDesserte = QgsFeature(pointDesserteFields)
                    pointDesserte.setAttributes([idPointDesserte, p.id(), s['fid'], s[adresseNom[:10]], s['Num'], date, 'C']) # lors de la création de la nouvelle couche, les noms des champs sont tronqués à la dixième lettre je ne sais pas pourquoi
                    pointDesserte.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(s.geometry().asPoint())))
                    pointsDesserte.append(pointDesserte)
                    idPointDesserte += 1

                # Création de la couche contenant uniquement la parcelle en question
                pCouche = self.creerCouche([p], "Polygon", parcelle)  

                # Sélection des parcelles qui touchent la parcelle possédant
                params =  {"INPUT": parcelle, "PREDICATE": [4], "INTERSECT": pCouche, "METHOD": 0}
                processing.run("qgis:selectbylocation", params)    

                # Déselection des parcelles ayant déjà une parité attribuée
                params =  {"INPUT": parcelle, "OPERATOR": 1, "FIELD": "parite", "VALUE": 0, "METHOD": 2}
                processing.run("qgis:selectbyattribute", params)   
                params =  {"INPUT": parcelle, "OPERATOR": 1, "FIELD": "parite", "VALUE": 1, "METHOD": 2}
                processing.run("qgis:selectbyattribute", params)   

                autre = []

                route = 0

                # On différencie la route des parcelles avec bâtiment
                for parc in parcelle.getSelectedFeatures():
                    # Création de la couche contenant uniquement une parcelle qui touche
                    parcToucheCouche = self.creerCouche([parc], "Polygon", parcelle)
                    
                    # Sélection des parcelles qui ont un bâtiment
                    params =  {"INPUT": parcToucheCouche, "PREDICATE": [0], "INTERSECT": batiment, "METHOD": 0}
                    processing.run("qgis:selectbylocation", params)

                    parcTouche = QgsFeature()

                    if parcToucheCouche.getSelectedFeatures().nextFeature(parcTouche): # cas des parcelles avec bâtiment
                        autre.append(parc)
                    else: # cas des parcelles sans bâtiment
                        if parc.geometry().intersects(canalisationProche.geometry()): # cas de la route
                            route = parc
                        else: # cas des parcelle qui n'ont pas des bâtiments mais ne sont pas des routes
                            autre.append(parc)

                if route:

                    coucheRoute = self.creerCouche([route], "Polygon", parcelle)

                    coucheAutre = self.creerCouche(autre, "Polygon", parcelle)
                        
                    # Sélection des parcelles touchant la route parmis celles qui touchent la parcelle adresse
                    params =  {"INPUT": coucheAutre, "PREDICATE": [4], "INTERSECT": coucheRoute, "METHOD": 1}
                    processing.run("qgis:selectbylocation", params)

                    for parc in coucheAutre.getSelectedFeatures():

                        # Sélection d'une' parcelle qui touche la route et qui touche la parcelle avec le point adresse 
                        params = {"INPUT": parcelle, "FIELD": "id", "VALUE": parc['id']}
                        processing.run("qgis:selectbyattribute", params)
                        p2 = QgsFeature()
                        parcelle.getSelectedFeatures().nextFeature(p2)

                        centroid = p2.geometry().centroid()

                        nearestIds = spIndexCanal.nearestNeighbor(centroid.asPoint(), 1)
                        featureId = nearestIds[0]
                        fit2 = sourceCanalisation.getFeatures(QgsFeatureRequest().setFilterFid(featureId))
                        canalisationProche2 = QgsFeature()
                        fit2.nextFeature(canalisationProche2)

                        if canalisationProche.id() == canalisationProche2.id():

                            pointSurLigne2 = canalisationProche2.geometry().closestSegmentWithContext(QgsPointXY(centroid.asPoint()))[1]

                            pointSurP2 = p2.geometry().closestSegmentWithContext(pointSurLigne2)[1]

                            x1 = pointSurLigne.x()
                            y1 = pointSurLigne.y()
                            x2 = pointSurLigne2.x()
                            y2 = pointSurLigne2.y()
                            x0 = pointSurP.x()
                            y0 = pointSurP.y()
                            newX = pointSurP2.x()
                            newY = pointSurP2.y()
                            newPoint = QgsPointXY(newX, newY)

                            if x1 != x2:
                                penteCanal = (y2 - y1)/(x2 - x1)
                            else:
                                penteCanal = 1
                            if newX != x0:
                                penteParc = (newY - y0)/(newX - x0)
                            else:
                                penteParc = 1

                            feedback.pushInfo(str(penteCanal))
                            feedback.pushInfo(str(penteParc))

                            if abs(penteCanal - penteParc) < seuilPente: # comparaison des pentes de la canalisation et des parcelles

                                feedback.pushInfo("_____parité ecrite:")
                                aCreer = False

                                parcelle.startEditing()

                                sensRue[p["id"]] = int(s["Num"]%2)
                                parcelle.changeAttributeValue(p2.id(), 8, int(s["Num"]%2))

                                parcelle.commitChanges()

                                parcParite.append(parc)

                                change = True
                                num = s['Num']
                                s = QgsFeature(adresseJointure.fields())
                                s['p_id'] = p2['id']
                                s['Num'] = num
                                s.setGeometry(QgsGeometry.fromPointXY(newPoint))
                if not change:
                    nouveauS = False

            # attribution de la parité sur l'autre côté de la route
            params =  {"INPUT": parcelle, "PREDICATE": [0], "INTERSECT": batiment, "METHOD": 0}
            processing.run("qgis:selectbylocation", params)

            parcelleBat = self.creerCouche(parcelle.getSelectedFeatures(), "Polygon", parcelle)

            params =  {"INPUT": parcelleBat, "PREDICATE": [0], "INTERSECT": coucheRoute, "METHOD": 1}
            processing.run("qgis:selectbylocation", params)

            parcelleBatRoute = self.creerCouche(parcelleBat.getSelectedFeatures(), "Polygon", parcelle)

            parcPariteCouche = self.creerCouche(parcParite, "Polygon", parcelle)

            params =  {"INPUT": parcelleBatRoute, "PREDICATE": [2], "INTERSECT": parcPariteCouche, "METHOD": 0}#####
            processing.run("qgis:selectbylocation", params)

            feedback.pushInfo("______parcelleBat.selectedFeatureCount: "+str(parcelleBatRoute.featureCount()))
            feedback.pushInfo("______parcPariteCouche.featureCount: "+str(parcPariteCouche.featureCount()))
            feedback.pushInfo("______parcelleBatRoute.selectedFeatureCount: "+str(parcelleBatRoute.selectedFeatureCount()))

            for parc in parcelleBatRoute.getSelectedFeatures():

                feedback.pushInfo("______parité autre coté route")

                # Sélection d'une parcelle qui touche la route et qui ne touche pas la parcelle avec le point adresse 
                params = {"INPUT": parcelle, "FIELD": "id", "VALUE": parc['id']}
                processing.run("qgis:selectbyattribute", params)
                p2 = QgsFeature()
                parcelle.getSelectedFeatures().nextFeature(p2)

                parcelle.startEditing()

                sensRue[p["id"]] = int((s["Num"]+1)%2)
                parcelle.changeAttributeValue(p2.id(), 8, int((s["Num"]+1)%2))

                parcelle.commitChanges()

                parcParite.append(parc)



    
        adresseJointure.invertSelection()
        
        # Création des points restants pour les points adresse qui ne sont pas dans des parcelles avec bâtiment
        for s in adresseJointure.getSelectedFeatures():
            idPointDesserte += 1
            point = QgsFeature(pointDesserteFields)
            point.setAttributes([idPointDesserte, 0, s['fid'], s[adresseNom[:10]], s['Num'], date, 'C'])
            point.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(s.geometry().asPoint())))
            pointsRestants.append(point)   
        
        indexSaptialCanalisation = QgsSpatialIndex(sourceCanalisation.getFeatures(), flags=QgsSpatialIndex.FlagStoreFeatureGeometries)

        branchements = []

        # Création des points de desserte pour les adresses qu'on a stocker précédement
        for point in pointsDesserte:

            plusProcheId = indexSaptialCanalisation.nearestNeighbor(point.geometry())[0]
            fitCanalisation2 = sourceCanalisation.getFeatures(QgsFeatureRequest().setFilterFid(plusProcheId))
            caracCanalisation2 = QgsFeature()
            fitCanalisation2.nextFeature(caracCanalisation2)

            pointSurLigne = caracCanalisation2.geometry().closestSegmentWithContext(QgsPointXY(point.geometry().asPoint()))[1]
            
            # selection par loc des parcelles qui coupe les branchements, s'il y a + de 2 parcelle coupées on refait

            """
            carac = QgsFeature()
            couche = QgsVectorLayer()
            attributs = 
            geometrie = QgsGeometry.fromPolylineXY([QgsPointXY(point.geometry().asPoint()), QgsPointXY(pointSurLigne[0], pointSurLigne[1])])
            params =  {"INPUT": , "PREDICATE": [0], "INTERSECT": parcelle.getSelectedFeatures(), "METHOD": 0}
            processing.run("qgis:selectbylocation", params)
            """
            branchements, idBranchement = self.ajouterBranchement(branchementFields, branchements, idBranchement, point['parcelle_id'], QgsPointXY(point.geometry().asPoint()).x(), QgsPointXY(point.geometry().asPoint()).y(), pointSurLigne[0], pointSurLigne[1], date)

        avancementAlgo += 10
        feedback.setProgress(avancementAlgo)
        feedback.pushInfo("Les premiers branchement ont été créé")

        # Sélection des parcelles avec bâtiment
        params =  {"INPUT": parcelle, "PREDICATE": [0], "INTERSECT": batiment, "METHOD": 0}
        processing.run("qgis:selectbylocation", params)

        indexSaptialParcelle = QgsSpatialIndex(parcelle.getSelectedFeatures(), flags=QgsSpatialIndex.FlagStoreFeatureGeometries)

        nouveauxPointsDesserte = []

        parcelleIds = []
        parcelleIdsNew = []

        for p in pointsDesserte:
            parcelleIds.append(p['parcelle_id'])

        for point in pointsRestants:
            
            jp = 0
            #jc = 0
            plusProcheIdParcelle = indexSaptialParcelle.nearestNeighbor(point.geometry())[0]
            plusProcheIdCanalisation = indexSaptialCanalisation.nearestNeighbor(point.geometry().asPoint(), 1)[0]

            caracParcelle2, pointSurParcelle = self.trouverVoisinParcelle(point, plusProcheIdParcelle, parcelleData)
            caracCanalisation2, pointSurLigne = self.trouverVoisinCanalisation(point, plusProcheIdCanalisation, sourceCanalisation)
            """
            ###verifier si la canalisation la plus proche est la bonne grace a la rue de la couche canalisation et la rue dans la couche point
            feedback.pushInfo(point['adresse complète'].lower())
            listeMot = caracCanalisation2['rue'].lower().split(' ') 
            if '(' in caracCanalisation2['rue']:
                nomRue = " ".join(listeMot[1:len(listeMot)-1])
            else:
                nomRue = " ".join(listeMot[1:])

            while nomRue not in point['adresse complète'].lower():
                jc += 1
                plusProcheIdCanalisation = indexSaptialCanalisation.nearestNeighbor(point.geometry().asPoint(), jc+1)[jc]
                caracCanalisation2, pointSurLigne = self.trouverVoisinCanalisation(point, plusProcheIdCanalisation, sourceCanalisation)             
                listeMot = caracCanalisation2['rue'].lower().split(' ') 
                if '(' in caracCanalisation2['rue']:
                    nomRue = " ".join(listeMot[1:len(listeMot)-1])
                else:
                    nomRue = " ".join(listeMot[1:])
                feedback.pushInfo(nomRue)
            """
            parite = caracParcelle2['parite']
            while parite is not None and parite != point["Num"]%2: # Check de la parité de la parcelle
                jp += 1
                plusProcheIdParcelle = indexSaptialParcelle.nearestNeighbor(point.geometry(), jp+1)[jp]
                caracParcelle2, pointSurParcelle = self.trouverVoisinParcelle(point, plusProcheIdParcelle, parcelleData)             
                parite = caracParcelle2['parite']

            parcId = caracParcelle2.id()
            
            branchement = QgsFeature(branchementFields)
            pointDesserte = QgsFeature(pointDesserteFields)

            x1, y1 = pointSurLigne[0], pointSurLigne[1]
            x2Init, y2Init = pointSurParcelle[0], pointSurParcelle[1]
            k = 2
            # Modification des coordonnées afin de prolonger les branchement d'un facteur k
            geometrie, x2, y2 = self.testerIntersection(caracParcelle2, x1, x2Init, y1, y2Init, k)

            adresse2 = self.creerCouche(pointsDesserte + nouveauxPointsDesserte, "Point", pointDesserteFields)

            # Sélection des points sur la parcelle s'il y en a
            params =  {"INPUT": adresse2, "FIELD": "parcelle_id", "VALUE": parcId, "METHOD": 0}
            processing.run("qgis:selectbyattribute", params)
            p = QgsFeature()
            adresse2.getSelectedFeatures().nextFeature(p)

            # Sélection du point traité
            params =  {"INPUT": adresse2, "FIELD": "adresse_id", "VALUE": point['adresse_id'], "METHOD": 0}
            processing.run("qgis:selectbyattribute", params)
            p2 = QgsFeature()
            adresse2.getSelectedFeatures().nextFeature(p2)

            nbPoints = 0
            listePoint = []
            indexListe = 0

            for n, liste in enumerate(pointsDouble):
                if point['adresse_id'] in liste:
                    listePoint = liste
                    indexListe = n
                    nbPoints = len(liste)
            """
            try:
                if CreateurBranchementAlgorithm.calculerDistanceEucl(p.geometry().asPoint(), p2.geometry().asPoint()) < 0.1: # les points sont au même endroit, la même adresse est donc dans le fichier client plusieurs fois, il y a plusieurs branchements sur la parcelle
                    ### on decale un peu le point
                    pente = (y2 - y1)/(x2 - x1)
                    x2 += 1
                    y2 += 1
                elif p['parcelle_id'] == parcId: # si le pointDesserte est sur la meme parcelle qu'un autre point, on compare le branchment de l'ancien point de desserte et du nouveau, on garde le plus petit   
            """ 

            pasBon = True
            while pasBon:
                modif = False
                feedback.pushInfo("_____pas bon = True ")
                brFeat = QgsFeature(branchementFields)
                brFeat.setGeometry(QgsGeometry.fromPolyline([QgsPoint(x1, y1), QgsPoint(x2, y2)]))

                coucheBranchementPossible = self.creerCouche([brFeat], "LineString", branchementFields)
                
                branchementsCopie = []
                
                for b in branchements:

                    brFeat2 = QgsFeature(branchementFields)
                    brFeat2.setGeometry(b.geometry())
                    brFeat2.setId(b['parcelle_id'])

                    branchementsCopie.append(brFeat2)

                coucheBranchement = self.creerCouche(branchementsCopie, "LineString", branchementFields)
                
                params =  {"INPUT": coucheBranchement, "PREDICATE": [0], "INTERSECT": coucheBranchementPossible, "METHOD": 0}
                processing.run("qgis:selectbylocation", params)

                f = QgsFeature()
                feedback.pushInfo("------coucheBranchement.featureCount: "+str(coucheBranchement.featureCount()))
                feedback.pushInfo("------coucheBranchement.selectedFeatureCount: "+str(coucheBranchement.selectedFeatureCount()))
                feedback.pushInfo("------coucheBranchementPossible.featureCount: "+str(coucheBranchementPossible.featureCount()))

                # Condition de non croisement des branchements
                if coucheBranchement.selectedFeatureCount() > 0:
                    modif = True
                    feedback.pushInfo("_____des branchements se croisent")

                    br = QgsFeature()
                    for feat in coucheBranchement.getSelectedFeatures():
                        br = feat
                    #coucheBranchement.getSelectedFeatures().nextFeature(br)

                    processing.run("qgis:selectbyexpression", {'INPUT': adresse2, 'EXPRESSION': "\"parcelle_id\" = "+str(brFeat2.id()), 'METHOD': 0})
                    feedback.pushInfo("------selected feature count: "+str(adresse2.selectedFeatureCount()))

                    pt = QgsFeature()
                    for feat in adresse2.getSelectedFeatures():
                        pt = feat
                    #adresse2.getSelectedFeatures().nextFeature(pt)

                    if br.geometry().length() < brFeat.geometry().length():
                        feedback.pushInfo("______on garde l'ancien")
                        jp += 1
                        plusProcheIdParcelle = indexSaptialParcelle.nearestNeighbor(point.geometry(), jp+1)[jp]
                        caracParcelle2, pointSurParcelle = self.trouverVoisinParcelle(point, plusProcheIdParcelle, parcelleData)
                        parcId = caracParcelle2.id()

                        x2Init, y2Init = pointSurParcelle[0], pointSurParcelle[1]
                        # Modification des coordonnées afin de prolonger les branchement d'un facteur k
                        geometrie, x2, y2 = self.testerIntersection(caracParcelle2, x1, x2Init, y1, y2Init, k)

                        brFeat = QgsFeature(branchementFields)
                        brFeat.setGeometry(QgsGeometry.fromPolyline([QgsPoint(x1, y1), QgsPoint(x2, y2)]))

                        coucheBranchementPossible = self.creerCouche([brFeat], "LineString", branchementFields)

                        params =  {"INPUT": coucheBranchement, "PREDICATE": [0], "INTERSECT": coucheBranchementPossible, "METHOD": 0}
                        processing.run("qgis:selectbylocation", params)
                        pasBon = True
                    elif adresse2.selectedFeatureCount() > 1:
                        feedback.pushInfo("_____on garde le nouveau")
                        for elt in nouveauxPointsDesserte: ### creer fct de delete
                            feedback.pushInfo("___"+str(elt['id']))
                            feedback.pushInfo("___"+str(pt['id']))
                            if elt['id'] == pt['id']:
                                feedback.pushInfo("____delete")
                                nouveauxPointsDesserte.remove(elt)
                                pointsRestants.append(elt)
                        for elt in pointsDesserte:
                            if elt['id'] == pt['id']:
                                feedback.pushInfo("____delete")
                                pointsDesserte.remove(elt)
                                pointsRestants.append(elt)
                        for elt in branchements:
                            if elt['id'] == brFeat2.id():
                                nouveauxPointsDesserte.remove(elt)
                        
                        pasBon = False
                    else:
                        feedback.pushInfo("_____prob croisement")
                        pasBon = False
                
                # Condition d'unicité de point de desserte par parcelle
                if parcelleIds.count(parcId) + parcelleIdsNew.count(parcId) > nbPoints:
                    feedback.pushInfo("______points double")
                    modif = True
                    if parcId in parcelleIdsNew: # cas où le point fait partie des points placés après
                                
                        pointDesserteVector = self.creerCouche(nouveauxPointsDesserte, "Point", pointDesserteFields)

                        branchementVector = self.creerCouche(branchements, "LineString", branchementFields)

                        processing.run("qgis:selectbyexpression", {'INPUT': pointDesserteVector, 'EXPRESSION': "\"parcelle_id\" = "+str(parcId), 'METHOD': 0})
                        processing.run("qgis:selectbyexpression", {'INPUT': branchementVector, 'EXPRESSION': "\"parcelle_id\" = "+str(parcId), 'METHOD': 0})

                        pt, br = QgsFeature(), QgsFeature()
                        pointDesserteVector.getSelectedFeatures().nextFeature(pt)
                        branchementVector.getSelectedFeatures().nextFeature(br)
                        
                        # On compare les longueurs des branchements, on considère que le plus petit est le bon
                        if br.geometry().length() < QgsGeometry.fromPolylineXY([QgsPointXY(x1, y1), QgsPointXY(x2, y2)]).length(): # cas où le branchement déjà présent est plus petit
                            feedback.pushInfo("_____ancien plus petit")
                            jp += 1
                            
                            plusProcheIdParcelle = indexSaptialParcelle.nearestNeighbor(point.geometry(), jp+1)[jp]
                            caracParcelle2, pointSurParcelle = self.trouverVoisinParcelle(point, plusProcheIdParcelle, parcelleData)
                            parcId = caracParcelle2.id()

                            x2Init, y2Init = pointSurParcelle[0], pointSurParcelle[1]
                            # Modification des coordonnées afin de prolonger les branchement d'un facteur k
                            geometrie, x2, y2 = self.testerIntersection(caracParcelle2, x1, x2Init, y1, y2Init, k)
                            pasBon = True
                        else: # cas où le nouveau branchement est le plus petit
                            feedback.pushInfo("_____nouveau plus petit")

                            for elt in nouveauxPointsDesserte: ### creer fct de delete
                                if elt['id'] == pt['id']:
                                    feedback.pushInfo("____delete")
                                    nouveauxPointsDesserte.remove(elt)
                                    pointsRestants.append(elt)
                            for elt in branchements:
                                if elt['id'] == br['id']:
                                    nouveauxPointsDesserte.remove(elt)

                            pasBon = False
                    else: # cas où le point qui est sur la même parcelle où l'on souhaite placer notre nouveau point fait partie des points placés au début qui étaient déjà sur des parcelles habités
                        feedback.pushInfo("____comme au debut")
                        jp += 1
                    
                        plusProcheIdParcelle = indexSaptialParcelle.nearestNeighbor(point.geometry(), jp+1)[jp]
                        caracParcelle2, pointSurParcelle = self.trouverVoisinParcelle(point, plusProcheIdParcelle, parcelleData)
                        parcId = caracParcelle2.id()

                        x2Init, y2Init = pointSurParcelle[0], pointSurParcelle[1]
                        # Modification des coordonnées afin de prolonger les branchement d'un facteur k
                        geometrie, x2, y2 = self.testerIntersection(caracParcelle2, x1, x2Init, y1, y2Init, k)
                        pasBon = True

                    parite = caracParcelle2['parite']
                    # Vérification de la parité
                    if pasBon and parite is not None and parite != point["Num"]%2:
                        feedback.pushInfo("____test parite")
                        jp += 1
                        plusProcheIdParcelle = indexSaptialParcelle.nearestNeighbor(point.geometry(), jp+1)[jp]
                        caracParcelle2, pointSurParcelle = self.trouverVoisinParcelle(point, plusProcheIdParcelle, parcelleData)
                        parcId = caracParcelle2.id()

                        x2Init, y2Init = pointSurParcelle[0], pointSurParcelle[1]
                        # Modification des coordonnées afin de prolonger les branchement d'un facteur k
                        geometrie, x2, y2 = self.testerIntersection(caracParcelle2, x1, x2Init, y1, y2Init, k)
                        pasBon = True
                
                elif nbPoints > 1: # cas où plusieurs points sont superposés, il faut les décaler légèrement
                    feedback.pushInfo("_______decalage")
                    modif = True
                    n = listePoint[len(listePoint)-1]
                    if n%2:
                        decalage = (math.ceil(n/2))/5
                    else:
                        decalage = -(n/2)/5
                    pointsDouble[indexListe][len(listePoint)-1] += 1
                    if decalage:
                        w = (y2-y1)**2+(x2-x1)**2-(x2-x1-decalage)**2
                        if w < 0:
                            w = -w
                        y2 = sqrt(w) + y1
                        x2 -= decalage
                        geometrie = QgsGeometry.fromPointXY(QgsPointXY(x2, y2))
                    
                    pasBon = False

                # Condition de respect de la parité
                if parite is not None and parite != point["Num"]%2:
                    modif = True
                    feedback.pushInfo("____test parite")
                    jp += 1
                    plusProcheIdParcelle = indexSaptialParcelle.nearestNeighbor(point.geometry(), jp+1)[jp]
                    caracParcelle2, pointSurParcelle = self.trouverVoisinParcelle(point, plusProcheIdParcelle, parcelleData)
                    parcId = caracParcelle2.id()

                    x2Init, y2Init = pointSurParcelle[0], pointSurParcelle[1]
                    # Modification des coordonnées afin de prolonger les branchement d'un facteur k
                    geometrie, x2, y2 = self.testerIntersection(caracParcelle2, x1, x2Init, y1, y2Init, k)
                    pasBon = True

                if not modif:
                    pasBon = False
                             
            feedback.pushInfo(str(parcId))
            pointDesserte.setGeometry(geometrie)
            pointDesserte.setAttributes([idPointDesserte, parcId, point['id'], point['Adresse complète'], point['Num'], date, 'C'])
            nouveauxPointsDesserte.append(pointDesserte)
            idPointDesserte += 1

            parcelleIdsNew.append(parcId)

            # Création des branchements
            branchements, idBranchement = self.ajouterBranchement(branchementFields, branchements, idBranchement,  parcId, x1, y1, x2, y2, date)

        # Création des couches de points desserte et de branchements
        for pointDesserte in pointsDesserte:
            sinkPointDesserte.addFeature(pointDesserte, QgsFeatureSink.FastInsert)

        for pointDesserte in nouveauxPointsDesserte:
            sinkPointDesserte.addFeature(pointDesserte, QgsFeatureSink.FastInsert)        

        for branchement in branchements:
            sinkBranchement.addFeature(branchement, QgsFeatureSink.FastInsert)

        ###
        for pointTest in pointsTest:
            sinkPointDesserte.addFeature(pointTest, QgsFeatureSink.FastInsert)
        ###

        parcelle.removeSelection()
        
        avancementAlgo = self.actualiserProgress(feedback, avancementAlgo, 10, "")
        
        """
        # Update the progress bar
        feedback.setProgress(int(c * total))"""
        
        # Return the results of the algorithm. In this case our only result is
        # the feature sink which contains the processed features, but some
        # algorithms may return multiple feature sinks, calculated numeric
        # statistics, etc. These should all be included in the returned
        # dictionary, with keys matching the feature corresponding parameter
        # or output names.

        #os.remove(nomFichier)

        return {self.BRANCHEMENT: destIdBranchement,
        self.POINTDESSERTE: destIdPointDesserte}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Createur Branchement'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'AEP'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return CreateurBranchementAlgorithm()